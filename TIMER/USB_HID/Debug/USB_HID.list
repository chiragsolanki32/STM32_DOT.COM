
USB_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f30  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007174  08007174  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08007174  08007174  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007174  08007174  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  0800717c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  20000174  080072f0  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  080072f0  00020b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7dd  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7e  00000000  00000000  0002f981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00032500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000332a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b28c  00000000  00000000  00033ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010465  00000000  00000000  0005f184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa4b7  00000000  00000000  0006f5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169aa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003624  00000000  00000000  00169af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000174 	.word	0x20000174
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080070d4 	.word	0x080070d4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000178 	.word	0x20000178
 80001f8:	080070d4 	.word	0x080070d4

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f987 	bl	8000512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f832 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f884 	bl	8000314 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f006 f9d0 	bl	80065b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  buffer[0]=0;//buttons - first 3 bits(LSB)
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <main+0x60>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
  buffer[1]=100;//X axis 8bit value signed
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <main+0x60>)
 8000218:	2264      	movs	r2, #100	; 0x64
 800021a:	705a      	strb	r2, [r3, #1]
  buffer[2]=0;//Y axis 8bit value signed
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <main+0x60>)
 800021e:	2200      	movs	r2, #0
 8000220:	709a      	strb	r2, [r3, #2]
  buffer[3]=0;//Wheel 8bit value signed
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <main+0x60>)
 8000224:	2200      	movs	r2, #0
 8000226:	70da      	strb	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(HAL_GPIO_ReadPin(bsp_btn_GPIO_Port,bsp_btn_Pin)==GPIO_PIN_SET)
 8000228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022c:	480c      	ldr	r0, [pc, #48]	; (8000260 <main+0x64>)
 800022e:	f000 fcad 	bl	8000b8c <HAL_GPIO_ReadPin>
 8000232:	4603      	mov	r3, r0
 8000234:	2b01      	cmp	r3, #1
 8000236:	d107      	bne.n	8000248 <main+0x4c>
	  {
		  USBD_HID_SendReport(&hUsbDeviceFS,buffer,4);
 8000238:	2204      	movs	r2, #4
 800023a:	4908      	ldr	r1, [pc, #32]	; (800025c <main+0x60>)
 800023c:	4809      	ldr	r0, [pc, #36]	; (8000264 <main+0x68>)
 800023e:	f004 ffc7 	bl	80051d0 <USBD_HID_SendReport>
		  HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f000 f9da 	bl	80005fc <HAL_Delay>
	  }
HAL_GPIO_TogglePin(bsp_led_GPIO_Port,bsp_led_Pin);
 8000248:	2180      	movs	r1, #128	; 0x80
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <main+0x6c>)
 800024c:	f000 fcce 	bl	8000bec <HAL_GPIO_TogglePin>
HAL_Delay(1000);
 8000250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000254:	f000 f9d2 	bl	80005fc <HAL_Delay>
	  if(HAL_GPIO_ReadPin(bsp_btn_GPIO_Port,bsp_btn_Pin)==GPIO_PIN_SET)
 8000258:	e7e6      	b.n	8000228 <main+0x2c>
 800025a:	bf00      	nop
 800025c:	20000190 	.word	0x20000190
 8000260:	48000800 	.word	0x48000800
 8000264:	2000019c 	.word	0x2000019c
 8000268:	48000400 	.word	0x48000400

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b096      	sub	sp, #88	; 0x58
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	2244      	movs	r2, #68	; 0x44
 8000278:	2100      	movs	r1, #0
 800027a:	4618      	mov	r0, r3
 800027c:	f006 ff22 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000280:	463b      	mov	r3, r7
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800028e:	2000      	movs	r0, #0
 8000290:	f001 fe8e 	bl	8001fb0 <HAL_PWREx_ControlVoltageScaling>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800029a:	f000 f8a1 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800029e:	2322      	movs	r3, #34	; 0x22
 80002a0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ac:	2340      	movs	r3, #64	; 0x40
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b4:	2302      	movs	r3, #2
 80002b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 15;
 80002bc:	230f      	movs	r3, #15
 80002be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c0:	2302      	movs	r3, #2
 80002c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c4:	2302      	movs	r3, #2
 80002c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c8:	2302      	movs	r3, #2
 80002ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 ff21 	bl	8002118 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002dc:	f000 f880 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2303      	movs	r3, #3
 80002e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002f6:	463b      	mov	r3, r7
 80002f8:	2105      	movs	r1, #5
 80002fa:	4618      	mov	r0, r3
 80002fc:	f002 fb26 	bl	800294c <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000306:	f000 f86b 	bl	80003e0 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3758      	adds	r7, #88	; 0x58
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b08a      	sub	sp, #40	; 0x28
 8000318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032a:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <MX_GPIO_Init+0xc0>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a29      	ldr	r2, [pc, #164]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	613b      	str	r3, [r7, #16]
 8000340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a23      	ldr	r2, [pc, #140]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <MX_GPIO_Init+0xc0>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000372:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000376:	4a17      	ldr	r2, [pc, #92]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000378:	f043 0302 	orr.w	r3, r3, #2
 800037c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037e:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_GPIO_Init+0xc0>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	f003 0302 	and.w	r3, r3, #2
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bsp_led_GPIO_Port, bsp_led_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	4812      	ldr	r0, [pc, #72]	; (80003d8 <MX_GPIO_Init+0xc4>)
 8000390:	f000 fc14 	bl	8000bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : bsp_btn_Pin */
  GPIO_InitStruct.Pin = bsp_btn_Pin;
 8000394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(bsp_btn_GPIO_Port, &GPIO_InitStruct);
 80003a2:	f107 0314 	add.w	r3, r7, #20
 80003a6:	4619      	mov	r1, r3
 80003a8:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_GPIO_Init+0xc8>)
 80003aa:	f000 fa5d 	bl	8000868 <HAL_GPIO_Init>

  /*Configure GPIO pin : bsp_led_Pin */
  GPIO_InitStruct.Pin = bsp_led_Pin;
 80003ae:	2380      	movs	r3, #128	; 0x80
 80003b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(bsp_led_GPIO_Port, &GPIO_InitStruct);
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	4619      	mov	r1, r3
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_GPIO_Init+0xc4>)
 80003c6:	f000 fa4f 	bl	8000868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	48000400 	.word	0x48000400
 80003dc:	48000800 	.word	0x48000800

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <Error_Handler+0x8>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <HAL_MspInit+0x44>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003f6:	4a0e      	ldr	r2, [pc, #56]	; (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	; 0x60
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	; (8000430 <HAL_MspInit+0x44>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	; (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	; 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <NMI_Handler+0x4>

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <MemManage_Handler+0x4>

08000446 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <BusFault_Handler+0x4>

0800044c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <UsageFault_Handler+0x4>

08000452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 f89c 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <OTG_FS_IRQHandler+0x10>)
 800048e:	f000 fd1a 	bl	8000ec6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000066c 	.word	0x2000066c

0800049c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <SystemInit+0x20>)
 80004a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a6:	4a05      	ldr	r2, [pc, #20]	; (80004bc <SystemInit+0x20>)
 80004a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80004c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004c4:	f7ff ffea 	bl	800049c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ee:	f006 fdc5 	bl	800707c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004f2:	f7ff fe83 	bl	80001fc <main>

080004f6 <LoopForever>:

LoopForever:
    b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000504:	0800717c 	.word	0x0800717c
  ldr r2, =_sbss
 8000508:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 800050c:	20000b8c 	.word	0x20000b8c

08000510 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC1_IRQHandler>

08000512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000518:	2300      	movs	r3, #0
 800051a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f961 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f80e 	bl	8000544 <HAL_InitTick>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d002      	beq.n	8000534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800052e:	2301      	movs	r3, #1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	e001      	b.n	8000538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000534:	f7ff ff5a 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000538:	79fb      	ldrb	r3, [r7, #7]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000550:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <HAL_InitTick+0x6c>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d023      	beq.n	80005a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <HAL_InitTick+0x70>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_InitTick+0x6c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000566:	fbb3 f3f1 	udiv	r3, r3, r1
 800056a:	fbb2 f3f3 	udiv	r3, r2, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f96d 	bl	800084e <HAL_SYSTICK_Config>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10f      	bne.n	800059a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d809      	bhi.n	8000594 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000588:	f000 f937 	bl	80007fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058c:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <HAL_InitTick+0x74>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e007      	b.n	80005a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000594:	2301      	movs	r3, #1
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e004      	b.n	80005a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e001      	b.n	80005a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000004 	.word	0x20000004

080005bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x20>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_IncTick+0x24>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <HAL_IncTick+0x24>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000194 	.word	0x20000194

080005e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  return uwTick;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_GetTick+0x14>)
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000194 	.word	0x20000194

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000604:	f7ff ffee 	bl	80005e4 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000614:	d005      	beq.n	8000622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_Delay+0x44>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000622:	bf00      	nop
 8000624:	f7ff ffde 	bl	80005e4 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	429a      	cmp	r2, r3
 8000632:	d8f7      	bhi.n	8000624 <HAL_Delay+0x28>
  {
  }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000008 	.word	0x20000008

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db0b      	blt.n	80006d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 021f 	and.w	r2, r3, #31
 80006c0:	4907      	ldr	r1, [pc, #28]	; (80006e0 <__NVIC_EnableIRQ+0x38>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	095b      	lsrs	r3, r3, #5
 80006c8:	2001      	movs	r0, #1
 80006ca:	fa00 f202 	lsl.w	r2, r0, r2
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000e100 	.word	0xe000e100

080006e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	db0a      	blt.n	800070e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	490c      	ldr	r1, [pc, #48]	; (8000730 <__NVIC_SetPriority+0x4c>)
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070c:	e00a      	b.n	8000724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4908      	ldr	r1, [pc, #32]	; (8000734 <__NVIC_SetPriority+0x50>)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	3b04      	subs	r3, #4
 800071c:	0112      	lsls	r2, r2, #4
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	440b      	add	r3, r1
 8000722:	761a      	strb	r2, [r3, #24]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	f1c3 0307 	rsb	r3, r3, #7
 8000752:	2b04      	cmp	r3, #4
 8000754:	bf28      	it	cs
 8000756:	2304      	movcs	r3, #4
 8000758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3304      	adds	r3, #4
 800075e:	2b06      	cmp	r3, #6
 8000760:	d902      	bls.n	8000768 <NVIC_EncodePriority+0x30>
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3b03      	subs	r3, #3
 8000766:	e000      	b.n	800076a <NVIC_EncodePriority+0x32>
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000770:	69bb      	ldr	r3, [r7, #24]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43da      	mvns	r2, r3
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	401a      	ands	r2, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43d9      	mvns	r1, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	4313      	orrs	r3, r2
         );
}
 8000792:	4618      	mov	r0, r3
 8000794:	3724      	adds	r7, #36	; 0x24
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b0:	d301      	bcc.n	80007b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b2:	2301      	movs	r3, #1
 80007b4:	e00f      	b.n	80007d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <SysTick_Config+0x40>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3b01      	subs	r3, #1
 80007bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007be:	210f      	movs	r1, #15
 80007c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007c4:	f7ff ff8e 	bl	80006e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <SysTick_Config+0x40>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <SysTick_Config+0x40>)
 80007d0:	2207      	movs	r2, #7
 80007d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	e000e010 	.word	0xe000e010

080007e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff ff29 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	4603      	mov	r3, r0
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
 8000806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff3e 	bl	800068c <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff8e 	bl	8000738 <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5d 	bl	80006e4 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff31 	bl	80006a8 <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa2 	bl	80007a0 <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000876:	e166      	b.n	8000b46 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 8158 	beq.w	8000b40 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b01      	cmp	r3, #1
 800089a:	d005      	beq.n	80008a8 <HAL_GPIO_Init+0x40>
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 0303 	and.w	r3, r3, #3
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d130      	bne.n	800090a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68da      	ldr	r2, [r3, #12]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008de:	2201      	movs	r2, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 0201 	and.w	r2, r3, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	2b03      	cmp	r3, #3
 8000914:	d017      	beq.n	8000946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f003 0303 	and.w	r3, r3, #3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d123      	bne.n	800099a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	08da      	lsrs	r2, r3, #3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	220f      	movs	r2, #15
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	08da      	lsrs	r2, r3, #3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3208      	adds	r2, #8
 8000994:	6939      	ldr	r1, [r7, #16]
 8000996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 0203 	and.w	r2, r3, #3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80b2 	beq.w	8000b40 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e0:	4a60      	ldr	r2, [pc, #384]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6613      	str	r3, [r2, #96]	; 0x60
 80009e8:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <HAL_GPIO_Init+0x2fc>)
 80009ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f4:	4a5c      	ldr	r2, [pc, #368]	; (8000b68 <HAL_GPIO_Init+0x300>)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a1e:	d02b      	beq.n	8000a78 <HAL_GPIO_Init+0x210>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a52      	ldr	r2, [pc, #328]	; (8000b6c <HAL_GPIO_Init+0x304>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d025      	beq.n	8000a74 <HAL_GPIO_Init+0x20c>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a51      	ldr	r2, [pc, #324]	; (8000b70 <HAL_GPIO_Init+0x308>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d01f      	beq.n	8000a70 <HAL_GPIO_Init+0x208>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a50      	ldr	r2, [pc, #320]	; (8000b74 <HAL_GPIO_Init+0x30c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d019      	beq.n	8000a6c <HAL_GPIO_Init+0x204>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a4f      	ldr	r2, [pc, #316]	; (8000b78 <HAL_GPIO_Init+0x310>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d013      	beq.n	8000a68 <HAL_GPIO_Init+0x200>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4e      	ldr	r2, [pc, #312]	; (8000b7c <HAL_GPIO_Init+0x314>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1fc>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a4d      	ldr	r2, [pc, #308]	; (8000b80 <HAL_GPIO_Init+0x318>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1f8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <HAL_GPIO_Init+0x31c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1f4>
 8000a58:	2307      	movs	r3, #7
 8000a5a:	e00e      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	e00c      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a60:	2306      	movs	r3, #6
 8000a62:	e00a      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a64:	2305      	movs	r3, #5
 8000a66:	e008      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	e004      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a70:	2302      	movs	r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a74:	2301      	movs	r3, #1
 8000a76:	e000      	b.n	8000a7a <HAL_GPIO_Init+0x212>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	f002 0203 	and.w	r2, r2, #3
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	4093      	lsls	r3, r2
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a8a:	4937      	ldr	r1, [pc, #220]	; (8000b68 <HAL_GPIO_Init+0x300>)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	089b      	lsrs	r3, r3, #2
 8000a90:	3302      	adds	r3, #2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a98:	4b3b      	ldr	r3, [pc, #236]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000abc:	4a32      	ldr	r2, [pc, #200]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ae6:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000aec:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b3a:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_GPIO_Init+0x320>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f47f ae91 	bne.w	8000878 <HAL_GPIO_Init+0x10>
  }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	48000800 	.word	0x48000800
 8000b74:	48000c00 	.word	0x48000c00
 8000b78:	48001000 	.word	0x48001000
 8000b7c:	48001400 	.word	0x48001400
 8000b80:	48001800 	.word	0x48001800
 8000b84:	48001c00 	.word	0x48001c00
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	691a      	ldr	r2, [r3, #16]
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e001      	b.n	8000bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bcc:	787b      	ldrb	r3, [r7, #1]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd2:	887a      	ldrh	r2, [r7, #2]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bd8:	e002      	b.n	8000be0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bda:	887a      	ldrh	r2, [r7, #2]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	041a      	lsls	r2, r3, #16
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43d9      	mvns	r1, r3
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	400b      	ands	r3, r1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c22:	b08f      	sub	sp, #60	; 0x3c
 8000c24:	af0a      	add	r7, sp, #40	; 0x28
 8000c26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e116      	b.n	8000e60 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d106      	bne.n	8000c52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f005 fdf7 	bl	8006840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f002 feee 	bl	8003a52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	687e      	ldr	r6, [r7, #4]
 8000c7e:	466d      	mov	r5, sp
 8000c80:	f106 0410 	add.w	r4, r6, #16
 8000c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c90:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c94:	1d33      	adds	r3, r6, #4
 8000c96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c98:	6838      	ldr	r0, [r7, #0]
 8000c9a:	f002 fe01 	bl	80038a0 <USB_CoreInit>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d005      	beq.n	8000cb0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	e0d7      	b.n	8000e60 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fedc 	bl	8003a74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e04a      	b.n	8000d58 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	333d      	adds	r3, #61	; 0x3d
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cd6:	7bfa      	ldrb	r2, [r7, #15]
 8000cd8:	6879      	ldr	r1, [r7, #4]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	333c      	adds	r3, #60	; 0x3c
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	b298      	uxth	r0, r3
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	3344      	adds	r3, #68	; 0x44
 8000cfe:	4602      	mov	r2, r0
 8000d00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	440b      	add	r3, r1
 8000d10:	3340      	adds	r3, #64	; 0x40
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3348      	adds	r3, #72	; 0x48
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d2a:	7bfa      	ldrb	r2, [r7, #15]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	334c      	adds	r3, #76	; 0x4c
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3354      	adds	r3, #84	; 0x54
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	3301      	adds	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
 8000d58:	7bfa      	ldrb	r2, [r7, #15]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3af      	bcc.n	8000cc2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	e044      	b.n	8000df2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4413      	add	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4413      	add	r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	4413      	add	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4413      	add	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d3b5      	bcc.n	8000d68 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	687e      	ldr	r6, [r7, #4]
 8000e04:	466d      	mov	r5, sp
 8000e06:	f106 0410 	add.w	r4, r6, #16
 8000e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e1a:	1d33      	adds	r3, r6, #4
 8000e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f002 fe74 	bl	8003b0c <USB_DevInit>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e014      	b.n	8000e60 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d102      	bne.n	8000e54 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f001 f86a 	bl	8001f28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fefc 	bl	8004c56 <USB_DevDisconnect>

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <HAL_PCD_Start+0x1c>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e01c      	b.n	8000ebe <HAL_PCD_Start+0x56>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d105      	bne.n	8000ea0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 fdc3 	bl	8003a30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 feb0 	bl	8004c14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ec6:	b590      	push	{r4, r7, lr}
 8000ec8:	b08d      	sub	sp, #52	; 0x34
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f003 ff6e 	bl	8004dbe <USB_GetMode>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 847e 	bne.w	80017e6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 fed2 	bl	8004c98 <USB_ReadInterrupts>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 8474 	beq.w	80017e4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	0a1b      	lsrs	r3, r3, #8
 8000f06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 febf 	bl	8004c98 <USB_ReadInterrupts>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d107      	bne.n	8000f34 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f002 0202 	and.w	r2, r2, #2
 8000f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f003 fead 	bl	8004c98 <USB_ReadInterrupts>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	2b10      	cmp	r3, #16
 8000f46:	d161      	bne.n	800100c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0210 	bic.w	r2, r2, #16
 8000f56:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	f003 020f 	and.w	r2, r3, #15
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	3304      	adds	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	0c5b      	lsrs	r3, r3, #17
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d124      	bne.n	8000fce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d035      	beq.n	8000ffc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	6a38      	ldr	r0, [r7, #32]
 8000fa4:	f003 fce4 	bl	8004970 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb4:	441a      	add	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	6a1a      	ldr	r2, [r3, #32]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fc6:	441a      	add	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	e016      	b.n	8000ffc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	0c5b      	lsrs	r3, r3, #17
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d110      	bne.n	8000ffc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	6a38      	ldr	r0, [r7, #32]
 8000fe6:	f003 fcc3 	bl	8004970 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	6a1a      	ldr	r2, [r3, #32]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ff6:	441a      	add	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	699a      	ldr	r2, [r3, #24]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0210 	orr.w	r2, r2, #16
 800100a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fe41 	bl	8004c98 <USB_ReadInterrupts>
 8001016:	4603      	mov	r3, r0
 8001018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800101c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001020:	f040 80a7 	bne.w	8001172 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fe46 	bl	8004cbe <USB_ReadDevAllOutEpInterrupt>
 8001032:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001034:	e099      	b.n	800116a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 808e 	beq.w	800115e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fe6a 	bl	8004d26 <USB_ReadDevOutEPInterrupt>
 8001052:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00c      	beq.n	8001078 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	015a      	lsls	r2, r3, #5
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	4413      	add	r3, r2
 8001066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800106a:	461a      	mov	r2, r3
 800106c:	2301      	movs	r3, #1
 800106e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fe7e 	bl	8001d74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00c      	beq.n	800109c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	015a      	lsls	r2, r3, #5
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	4413      	add	r3, r2
 800108a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800108e:	461a      	mov	r2, r3
 8001090:	2308      	movs	r3, #8
 8001092:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001094:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 feba 	bl	8001e10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d008      	beq.n	80010b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	015a      	lsls	r2, r3, #5
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	4413      	add	r3, r2
 80010ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010b2:	461a      	mov	r2, r3
 80010b4:	2310      	movs	r3, #16
 80010b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d030      	beq.n	8001124 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	2b80      	cmp	r3, #128	; 0x80
 80010cc:	d109      	bne.n	80010e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	69fa      	ldr	r2, [r7, #28]
 80010d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80010e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	3304      	adds	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	78db      	ldrb	r3, [r3, #3]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	2200      	movs	r2, #0
 8001104:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f005 fcdb 	bl	8006ac8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	015a      	lsls	r2, r3, #5
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	4413      	add	r3, r2
 800111a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800111e:	461a      	mov	r2, r3
 8001120:	2302      	movs	r3, #2
 8001122:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f003 0320 	and.w	r3, r3, #32
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	015a      	lsls	r2, r3, #5
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	4413      	add	r3, r2
 8001136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800113a:	461a      	mov	r2, r3
 800113c:	2320      	movs	r3, #32
 800113e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	015a      	lsls	r2, r3, #5
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	4413      	add	r3, r2
 8001152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001156:	461a      	mov	r2, r3
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	3301      	adds	r3, #1
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	2b00      	cmp	r3, #0
 800116e:	f47f af62 	bne.w	8001036 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fd8e 	bl	8004c98 <USB_ReadInterrupts>
 800117c:	4603      	mov	r3, r0
 800117e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001182:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001186:	f040 80a4 	bne.w	80012d2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fdaf 	bl	8004cf2 <USB_ReadDevAllInEpInterrupt>
 8001194:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800119a:	e096      	b.n	80012ca <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 808b 	beq.w	80012be <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fdd5 	bl	8004d62 <USB_ReadDevInEPInterrupt>
 80011b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d020      	beq.n	8001206 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	2201      	movs	r2, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69f9      	ldr	r1, [r7, #28]
 80011e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80011e4:	4013      	ands	r3, r2
 80011e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	015a      	lsls	r2, r3, #5
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	4413      	add	r3, r2
 80011f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011f4:	461a      	mov	r2, r3
 80011f6:	2301      	movs	r3, #1
 80011f8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f005 fbcc 	bl	800699e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001212:	015a      	lsls	r2, r3, #5
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	4413      	add	r3, r2
 8001218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800121c:	461a      	mov	r2, r3
 800121e:	2308      	movs	r3, #8
 8001220:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	015a      	lsls	r2, r3, #5
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	4413      	add	r3, r2
 8001234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001238:	461a      	mov	r2, r3
 800123a:	2310      	movs	r3, #16
 800123c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	015a      	lsls	r2, r3, #5
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001254:	461a      	mov	r2, r3
 8001256:	2340      	movs	r3, #64	; 0x40
 8001258:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d023      	beq.n	80012ac <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001266:	6a38      	ldr	r0, [r7, #32]
 8001268:	f002 fd9c 	bl	8003da4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	3338      	adds	r3, #56	; 0x38
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	3304      	adds	r3, #4
 800127e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	78db      	ldrb	r3, [r3, #3]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2200      	movs	r2, #0
 800128c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f005 fc29 	bl	8006aec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	015a      	lsls	r2, r3, #5
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	4413      	add	r3, r2
 80012a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012a6:	461a      	mov	r2, r3
 80012a8:	2302      	movs	r3, #2
 80012aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80012b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 fcd2 	bl	8001c62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	085b      	lsrs	r3, r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80012ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f47f af65 	bne.w	800119c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fcde 	bl	8004c98 <USB_ReadInterrupts>
 80012dc:	4603      	mov	r3, r0
 80012de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80012e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012e6:	d122      	bne.n	800132e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f005 fe47 	bl	8006fa4 <HAL_PCDEx_LPM_Callback>
 8001316:	e002      	b.n	800131e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f005 fbad 	bl	8006a78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800132c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fcb0 	bl	8004c98 <USB_ReadInterrupts>
 8001338:	4603      	mov	r3, r0
 800133a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800133e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001342:	d112      	bne.n	800136a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d102      	bne.n	800135a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f005 fb69 	bl	8006a2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001368:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fc92 	bl	8004c98 <USB_ReadInterrupts>
 8001374:	4603      	mov	r3, r0
 8001376:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800137a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800137e:	d121      	bne.n	80013c4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800138e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001396:	2b00      	cmp	r3, #0
 8001398:	d111      	bne.n	80013be <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	f003 020f 	and.w	r2, r3, #15
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013b4:	2101      	movs	r1, #1
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f005 fdf4 	bl	8006fa4 <HAL_PCDEx_LPM_Callback>
 80013bc:	e002      	b.n	80013c4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f005 fb34 	bl	8006a2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fc65 	bl	8004c98 <USB_ReadInterrupts>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d8:	f040 80b5 	bne.w	8001546 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013ea:	f023 0301 	bic.w	r3, r3, #1
 80013ee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2110      	movs	r1, #16
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fcd4 	bl	8003da4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fc:	2300      	movs	r3, #0
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001400:	e046      	b.n	8001490 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	4413      	add	r3, r2
 800140a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800140e:	461a      	mov	r2, r3
 8001410:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001414:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	015a      	lsls	r2, r3, #5
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	4413      	add	r3, r2
 800141e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001426:	0151      	lsls	r1, r2, #5
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	440a      	add	r2, r1
 800142c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001434:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001438:	015a      	lsls	r2, r3, #5
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001442:	461a      	mov	r2, r3
 8001444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001448:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144c:	015a      	lsls	r2, r3, #5
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4413      	add	r3, r2
 8001452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800145a:	0151      	lsls	r1, r2, #5
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	440a      	add	r2, r1
 8001460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001464:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001468:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	015a      	lsls	r2, r3, #5
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	4413      	add	r3, r2
 8001472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147a:	0151      	lsls	r1, r2, #5
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	440a      	add	r2, r1
 8001480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001484:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001488:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148c:	3301      	adds	r3, #1
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001496:	429a      	cmp	r2, r3
 8001498:	d3b3      	bcc.n	8001402 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80014ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014c6:	f043 030b 	orr.w	r3, r3, #11
 80014ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	69fa      	ldr	r2, [r7, #28]
 80014d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014dc:	f043 030b 	orr.w	r3, r3, #11
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	e015      	b.n	8001510 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80014fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800150a:	f043 030b 	orr.w	r3, r3, #11
 800150e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800151e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001522:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800152e:	4619      	mov	r1, r3
 8001530:	4610      	mov	r0, r2
 8001532:	f003 fc75 	bl	8004e20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001544:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fba4 	bl	8004c98 <USB_ReadInterrupts>
 8001550:	4603      	mov	r3, r0
 8001552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800155a:	d124      	bne.n	80015a6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f003 fc3a 	bl	8004dda <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fc97 	bl	8003e9e <USB_GetDevSpeed>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681c      	ldr	r4, [r3, #0]
 800157c:	f001 fbac 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8001580:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001586:	b2db      	uxtb	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4620      	mov	r0, r4
 800158c:	f002 f9b4 	bl	80038f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f005 fa2c 	bl	80069ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80015a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fb74 	bl	8004c98 <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d10a      	bne.n	80015d0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f005 fa09 	bl	80069d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695a      	ldr	r2, [r3, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f002 0208 	and.w	r2, r2, #8
 80015ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fb5f 	bl	8004c98 <USB_ReadInterrupts>
 80015da:	4603      	mov	r3, r0
 80015dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e0:	2b80      	cmp	r3, #128	; 0x80
 80015e2:	d122      	bne.n	800162a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015f0:	2301      	movs	r3, #1
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
 80015f4:	e014      	b.n	8001620 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fa:	4613      	mov	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d105      	bne.n	800161a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4619      	mov	r1, r3
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 faf3 	bl	8001c00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	429a      	cmp	r2, r3
 8001628:	d3e5      	bcc.n	80015f6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fb32 	bl	8004c98 <USB_ReadInterrupts>
 8001634:	4603      	mov	r3, r0
 8001636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800163a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800163e:	d13b      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
 8001644:	e02b      	b.n	800169e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	015a      	lsls	r2, r3, #5
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4413      	add	r3, r2
 800164e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	3340      	adds	r3, #64	; 0x40
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d115      	bne.n	8001698 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800166c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	da12      	bge.n	8001698 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	333f      	adds	r3, #63	; 0x3f
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fab4 	bl	8001c00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	3301      	adds	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3ce      	bcc.n	8001646 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80016b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 faeb 	bl	8004c98 <USB_ReadInterrupts>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016cc:	d155      	bne.n	800177a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016ce:	2301      	movs	r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
 80016d2:	e045      	b.n	8001760 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d12e      	bne.n	800175a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80016fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da2b      	bge.n	800175a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800170e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001712:	429a      	cmp	r2, r3
 8001714:	d121      	bne.n	800175a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10a      	bne.n	800175a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6053      	str	r3, [r2, #4]
            break;
 8001758:	e007      	b.n	800176a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	3301      	adds	r3, #1
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	429a      	cmp	r2, r3
 8001768:	d3b4      	bcc.n	80016d4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fa8a 	bl	8004c98 <USB_ReadInterrupts>
 8001784:	4603      	mov	r3, r0
 8001786:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800178a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800178e:	d10a      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f005 f9bd 	bl	8006b10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f003 fa74 	bl	8004c98 <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d115      	bne.n	80017e6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f005 f9ad 	bl	8006b2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	430a      	orrs	r2, r1
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	e000      	b.n	80017e6 <HAL_PCD_IRQHandler+0x920>
      return;
 80017e4:	bf00      	nop
    }
  }
}
 80017e6:	3734      	adds	r7, #52	; 0x34
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_PCD_SetAddress+0x1a>
 8001802:	2302      	movs	r3, #2
 8001804:	e013      	b.n	800182e <HAL_PCD_SetAddress+0x42>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	78fa      	ldrb	r2, [r7, #3]
 8001812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	78fa      	ldrb	r2, [r7, #3]
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f003 f9d2 	bl	8004bc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	4608      	mov	r0, r1
 8001840:	4611      	mov	r1, r2
 8001842:	461a      	mov	r2, r3
 8001844:	4603      	mov	r3, r0
 8001846:	70fb      	strb	r3, [r7, #3]
 8001848:	460b      	mov	r3, r1
 800184a:	803b      	strh	r3, [r7, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001854:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001858:	2b00      	cmp	r3, #0
 800185a:	da0f      	bge.n	800187c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	f003 020f 	and.w	r2, r3, #15
 8001862:	4613      	mov	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	3338      	adds	r3, #56	; 0x38
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	3304      	adds	r3, #4
 8001872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2201      	movs	r2, #1
 8001878:	705a      	strb	r2, [r3, #1]
 800187a:	e00f      	b.n	800189c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 020f 	and.w	r2, r3, #15
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	3304      	adds	r3, #4
 8001894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018a8:	883a      	ldrh	r2, [r7, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	78ba      	ldrb	r2, [r7, #2]
 80018b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	785b      	ldrb	r3, [r3, #1]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018c6:	78bb      	ldrb	r3, [r7, #2]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d102      	bne.n	80018d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_PCD_EP_Open+0xaa>
 80018dc:	2302      	movs	r3, #2
 80018de:	e00e      	b.n	80018fe <HAL_PCD_EP_Open+0xc8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f002 faf4 	bl	8003edc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80018fc:	7afb      	ldrb	r3, [r7, #11]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da0f      	bge.n	800193a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 020f 	and.w	r2, r3, #15
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	3338      	adds	r3, #56	; 0x38
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	3304      	adds	r3, #4
 8001930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	705a      	strb	r2, [r3, #1]
 8001938:	e00f      	b.n	800195a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	f003 020f 	and.w	r2, r3, #15
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4413      	add	r3, r2
 8001950:	3304      	adds	r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_PCD_EP_Close+0x6e>
 8001970:	2302      	movs	r3, #2
 8001972:	e00e      	b.n	8001992 <HAL_PCD_EP_Close+0x8c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fb32 	bl	8003fec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	460b      	mov	r3, r1
 80019a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019aa:	7afb      	ldrb	r3, [r7, #11]
 80019ac:	f003 020f 	and.w	r2, r3, #15
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	3304      	adds	r3, #4
 80019c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2200      	movs	r2, #0
 80019da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6979      	ldr	r1, [r7, #20]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fdb3 	bl	8004564 <USB_EP0StartXfer>
 80019fe:	e005      	b.n	8001a0c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6979      	ldr	r1, [r7, #20]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fbcc 	bl	80041a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	460b      	mov	r3, r1
 8001a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	f003 020f 	and.w	r2, r3, #15
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	3338      	adds	r3, #56	; 0x38
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2201      	movs	r2, #1
 8001a54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d106      	bne.n	8001a7a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6979      	ldr	r1, [r7, #20]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fd76 	bl	8004564 <USB_EP0StartXfer>
 8001a78:	e005      	b.n	8001a86 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6979      	ldr	r1, [r7, #20]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fb8f 	bl	80041a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	f003 020f 	and.w	r2, r3, #15
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d901      	bls.n	8001aae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e04e      	b.n	8001b4c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da0f      	bge.n	8001ad6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 020f 	and.w	r2, r3, #15
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	3338      	adds	r3, #56	; 0x38
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	3304      	adds	r3, #4
 8001acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	705a      	strb	r2, [r3, #1]
 8001ad4:	e00d      	b.n	8001af2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ad6:	78fa      	ldrb	r2, [r7, #3]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_PCD_EP_SetStall+0x82>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e01c      	b.n	8001b4c <HAL_PCD_EP_SetStall+0xbc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f002 ff7d 	bl	8004a20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d108      	bne.n	8001b42 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	f003 f96f 	bl	8004e20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d901      	bls.n	8001b72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e042      	b.n	8001bf8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da0f      	bge.n	8001b9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	3338      	adds	r3, #56	; 0x38
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e00f      	b.n	8001bba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_PCD_EP_ClrStall+0x86>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e00e      	b.n	8001bf8 <HAL_PCD_EP_ClrStall+0xa4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 ff87 	bl	8004afc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da0c      	bge.n	8001c2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 020f 	and.w	r2, r3, #15
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3338      	adds	r3, #56	; 0x38
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	4413      	add	r3, r2
 8001c28:	3304      	adds	r3, #4
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e00c      	b.n	8001c48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68f9      	ldr	r1, [r7, #12]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fdaa 	bl	80047a8 <USB_EPStopXfer>
 8001c54:	4603      	mov	r3, r0
 8001c56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001c58:	7afb      	ldrb	r3, [r7, #11]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b088      	sub	sp, #32
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3338      	adds	r3, #56	; 0x38
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a1a      	ldr	r2, [r3, #32]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d901      	bls.n	8001c9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e067      	b.n	8001d6a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d902      	bls.n	8001cb6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3303      	adds	r3, #3
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cbe:	e026      	b.n	8001d0e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	699a      	ldr	r2, [r3, #24]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d902      	bls.n	8001cdc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3303      	adds	r3, #3
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6919      	ldr	r1, [r3, #16]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	6978      	ldr	r0, [r7, #20]
 8001cf2:	f002 fe03 	bl	80048fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	441a      	add	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	441a      	add	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d809      	bhi.n	8001d38 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a1a      	ldr	r2, [r3, #32]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d203      	bcs.n	8001d38 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1c3      	bne.n	8001cc0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d811      	bhi.n	8001d68 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	6939      	ldr	r1, [r7, #16]
 8001d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d64:	4013      	ands	r3, r2
 8001d66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	333c      	adds	r3, #60	; 0x3c
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	015a      	lsls	r2, r3, #5
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <PCD_EP_OutXfrComplete_int+0x98>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d124      	bne.n	8001df4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dc6:	6093      	str	r3, [r2, #8]
 8001dc8:	e01a      	b.n	8001e00 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f003 0320 	and.w	r3, r3, #32
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de0:	461a      	mov	r2, r3
 8001de2:	2320      	movs	r3, #32
 8001de4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f004 fdbb 	bl	8006968 <HAL_PCD_DataOutStageCallback>
 8001df2:	e005      	b.n	8001e00 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	4619      	mov	r1, r3
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f004 fdb4 	bl	8006968 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	4f54310a 	.word	0x4f54310a

08001e10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	333c      	adds	r3, #60	; 0x3c
 8001e28:	3304      	adds	r3, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <PCD_EP_OutSetupPacket_int+0x64>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d90e      	bls.n	8001e64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f004 fd6d 	bl	8006944 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	4f54300a 	.word	0x4f54300a

08001e78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	70fb      	strb	r3, [r7, #3]
 8001e84:	4613      	mov	r3, r2
 8001e86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d107      	bne.n	8001ea6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e96:	883b      	ldrh	r3, [r7, #0]
 8001e98:	0419      	lsls	r1, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ea4:	e028      	b.n	8001ef8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e00d      	b.n	8001ed6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	3340      	adds	r3, #64	; 0x40
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d3ec      	bcc.n	8001eba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001ee0:	883b      	ldrh	r3, [r7, #0]
 8001ee2:	0418      	lsls	r0, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	4302      	orrs	r2, r0
 8001ef0:	3340      	adds	r3, #64	; 0x40
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	f043 0303 	orr.w	r3, r3, #3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f80:	d102      	bne.n	8001f88 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f86:	e00b      	b.n	8001fa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f96:	d102      	bne.n	8001f9e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9c:	e000      	b.n	8001fa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f9e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40007000 	.word	0x40007000

08001fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d141      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d131      	bne.n	8002030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd2:	4a46      	ldr	r2, [pc, #280]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fec:	4b40      	ldr	r3, [pc, #256]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2232      	movs	r2, #50	; 0x32
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4a3f      	ldr	r2, [pc, #252]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	3301      	adds	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002002:	e002      	b.n	800200a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3b01      	subs	r3, #1
 8002008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002016:	d102      	bne.n	800201e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f2      	bne.n	8002004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800201e:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202a:	d158      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e057      	b.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002036:	4a2d      	ldr	r2, [pc, #180]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002040:	e04d      	b.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002048:	d141      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204a:	4b28      	ldr	r3, [pc, #160]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002056:	d131      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205e:	4a23      	ldr	r2, [pc, #140]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002070:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2232      	movs	r2, #50	; 0x32
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	e002      	b.n	8002096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d102      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d112      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e011      	b.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020cc:	e007      	b.n	80020de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40007000 	.word	0x40007000
 80020f0:	20000000 	.word	0x20000000
 80020f4:	431bde83 	.word	0x431bde83

080020f8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_PWREx_EnableVddUSB+0x1c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002106:	6053      	str	r3, [r2, #4]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40007000 	.word	0x40007000

08002118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	f000 bc08 	b.w	800293c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212c:	4b96      	ldr	r3, [pc, #600]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002136:	4b94      	ldr	r3, [pc, #592]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80e4 	beq.w	8002316 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d007      	beq.n	8002164 <HAL_RCC_OscConfig+0x4c>
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	f040 808b 	bne.w	8002272 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b01      	cmp	r3, #1
 8002160:	f040 8087 	bne.w	8002272 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002164:	4b88      	ldr	r3, [pc, #544]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_OscConfig+0x64>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e3df      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	4b81      	ldr	r3, [pc, #516]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_RCC_OscConfig+0x7e>
 800218c:	4b7e      	ldr	r3, [pc, #504]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002194:	e005      	b.n	80021a2 <HAL_RCC_OscConfig+0x8a>
 8002196:	4b7c      	ldr	r3, [pc, #496]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d223      	bcs.n	80021ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 fda0 	bl	8002cf0 <RCC_SetFlashLatencyFromMSIRange>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e3c0      	b.n	800293c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ba:	4b73      	ldr	r3, [pc, #460]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a72      	ldr	r2, [pc, #456]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b70      	ldr	r3, [pc, #448]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	496d      	ldr	r1, [pc, #436]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	4968      	ldr	r1, [pc, #416]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	e025      	b.n	800223a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ee:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a65      	ldr	r2, [pc, #404]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b63      	ldr	r3, [pc, #396]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4960      	ldr	r1, [pc, #384]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220c:	4b5e      	ldr	r3, [pc, #376]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	495b      	ldr	r1, [pc, #364]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fd60 	bl	8002cf0 <RCC_SetFlashLatencyFromMSIRange>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e380      	b.n	800293c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800223a:	f000 fcc1 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 800223e:	4602      	mov	r2, r0
 8002240:	4b51      	ldr	r3, [pc, #324]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	091b      	lsrs	r3, r3, #4
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	4950      	ldr	r1, [pc, #320]	; (800238c <HAL_RCC_OscConfig+0x274>)
 800224c:	5ccb      	ldrb	r3, [r1, r3]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	4a4e      	ldr	r2, [pc, #312]	; (8002390 <HAL_RCC_OscConfig+0x278>)
 8002258:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800225a:	4b4e      	ldr	r3, [pc, #312]	; (8002394 <HAL_RCC_OscConfig+0x27c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f970 	bl	8000544 <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d052      	beq.n	8002314 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	e364      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d032      	beq.n	80022e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800227a:	4b43      	ldr	r3, [pc, #268]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a42      	ldr	r2, [pc, #264]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002286:	f7fe f9ad 	bl	80005e4 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228e:	f7fe f9a9 	bl	80005e4 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e34d      	b.n	800293c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a0:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a35      	ldr	r2, [pc, #212]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b33      	ldr	r3, [pc, #204]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4930      	ldr	r1, [pc, #192]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	492b      	ldr	r1, [pc, #172]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e01a      	b.n	8002316 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a28      	ldr	r2, [pc, #160]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ec:	f7fe f97a 	bl	80005e4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f4:	f7fe f976 	bl	80005e4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e31a      	b.n	800293c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1dc>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d073      	beq.n	800240a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b08      	cmp	r3, #8
 8002326:	d005      	beq.n	8002334 <HAL_RCC_OscConfig+0x21c>
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b0c      	cmp	r3, #12
 800232c:	d10e      	bne.n	800234c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d10b      	bne.n	800234c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d063      	beq.n	8002408 <HAL_RCC_OscConfig+0x2f0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d15f      	bne.n	8002408 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e2f7      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x24c>
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0b      	ldr	r2, [pc, #44]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e025      	b.n	80023b0 <HAL_RCC_OscConfig+0x298>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800236c:	d114      	bne.n	8002398 <HAL_RCC_OscConfig+0x280>
 800236e:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a02      	ldr	r2, [pc, #8]	; (8002388 <HAL_RCC_OscConfig+0x270>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e013      	b.n	80023b0 <HAL_RCC_OscConfig+0x298>
 8002388:	40021000 	.word	0x40021000
 800238c:	08007134 	.word	0x08007134
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004
 8002398:	4ba0      	ldr	r3, [pc, #640]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a9f      	ldr	r2, [pc, #636]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b9d      	ldr	r3, [pc, #628]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a9c      	ldr	r2, [pc, #624]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe f914 	bl	80005e4 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe f910 	bl	80005e4 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e2b4      	b.n	800293c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d2:	4b92      	ldr	r3, [pc, #584]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2a8>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7fe f900 	bl	80005e4 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe f8fc 	bl	80005e4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e2a0      	b.n	800293c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023fa:	4b88      	ldr	r3, [pc, #544]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2d0>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d060      	beq.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2b04      	cmp	r3, #4
 800241a:	d005      	beq.n	8002428 <HAL_RCC_OscConfig+0x310>
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d119      	bne.n	8002456 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d116      	bne.n	8002456 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002428:	4b7c      	ldr	r3, [pc, #496]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_RCC_OscConfig+0x328>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e27d      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b76      	ldr	r3, [pc, #472]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	4973      	ldr	r1, [pc, #460]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	e040      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d023      	beq.n	80024a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245e:	4b6f      	ldr	r3, [pc, #444]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a6e      	ldr	r2, [pc, #440]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe f8bb 	bl	80005e4 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe f8b7 	bl	80005e4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e25b      	b.n	800293c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002484:	4b65      	ldr	r3, [pc, #404]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b62      	ldr	r3, [pc, #392]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	495f      	ldr	r1, [pc, #380]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a5c      	ldr	r2, [pc, #368]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe f897 	bl	80005e4 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe f893 	bl	80005e4 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e237      	b.n	800293c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d03c      	beq.n	800255e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d01c      	beq.n	8002526 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f2:	4a4a      	ldr	r2, [pc, #296]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fc:	f7fe f872 	bl	80005e4 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002504:	f7fe f86e 	bl	80005e4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e212      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCC_OscConfig+0x3ec>
 8002524:	e01b      	b.n	800255e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252c:	4a3b      	ldr	r2, [pc, #236]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7fe f855 	bl	80005e4 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253e:	f7fe f851 	bl	80005e4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e1f5      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002550:	4b32      	ldr	r3, [pc, #200]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1ef      	bne.n	800253e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80a6 	beq.w	80026b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10d      	bne.n	8002598 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	4a26      	ldr	r2, [pc, #152]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002586:	6593      	str	r3, [r2, #88]	; 0x58
 8002588:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002594:	2301      	movs	r3, #1
 8002596:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d118      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b0:	f7fe f818 	bl	80005e4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe f814 	bl	80005e4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1b8      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x508>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4d8>
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80025e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ee:	e029      	b.n	8002644 <HAL_RCC_OscConfig+0x52c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d115      	bne.n	8002624 <HAL_RCC_OscConfig+0x50c>
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCC_OscConfig+0x504>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_OscConfig+0x504>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	4a03      	ldr	r2, [pc, #12]	; (800261c <HAL_RCC_OscConfig+0x504>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002618:	e014      	b.n	8002644 <HAL_RCC_OscConfig+0x52c>
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
 8002624:	4b9d      	ldr	r3, [pc, #628]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	4a9c      	ldr	r2, [pc, #624]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	4a98      	ldr	r2, [pc, #608]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d016      	beq.n	800267a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fd ffca 	bl	80005e4 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fd ffc6 	bl	80005e4 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e168      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266a:	4b8c      	ldr	r3, [pc, #560]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0ed      	beq.n	8002654 <HAL_RCC_OscConfig+0x53c>
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fd ffb3 	bl	80005e4 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fd ffaf 	bl	80005e4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e151      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002698:	4b80      	ldr	r3, [pc, #512]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ed      	bne.n	8002682 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a6:	7ffb      	ldrb	r3, [r7, #31]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ac:	4b7b      	ldr	r3, [pc, #492]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b0:	4a7a      	ldr	r2, [pc, #488]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80026b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0320 	and.w	r3, r3, #32
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d03c      	beq.n	800273e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d01c      	beq.n	8002706 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026cc:	4b73      	ldr	r3, [pc, #460]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80026ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d2:	4a72      	ldr	r2, [pc, #456]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fd ff82 	bl	80005e4 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e4:	f7fd ff7e 	bl	80005e4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e122      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026f6:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80026f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ef      	beq.n	80026e4 <HAL_RCC_OscConfig+0x5cc>
 8002704:	e01b      	b.n	800273e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270c:	4a63      	ldr	r2, [pc, #396]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002716:	f7fd ff65 	bl	80005e4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800271e:	f7fd ff61 	bl	80005e4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e105      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002730:	4b5a      	ldr	r3, [pc, #360]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002732:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ef      	bne.n	800271e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80f9 	beq.w	800293a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	2b02      	cmp	r3, #2
 800274e:	f040 80cf 	bne.w	80028f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002752:	4b52      	ldr	r3, [pc, #328]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	429a      	cmp	r2, r3
 8002764:	d12c      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	3b01      	subs	r3, #1
 8002772:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d123      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d11b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d113      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d109      	bne.n	80027c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d071      	beq.n	80028a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d068      	beq.n	8002898 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027c6:	4b35      	ldr	r3, [pc, #212]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027d2:	4b32      	ldr	r3, [pc, #200]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0ac      	b.n	800293c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027e2:	4b2e      	ldr	r3, [pc, #184]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2d      	ldr	r2, [pc, #180]	; (800289c <HAL_RCC_OscConfig+0x784>)
 80027e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ee:	f7fd fef9 	bl	80005e4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fd fef5 	bl	80005e4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e099      	b.n	800293c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002808:	4b24      	ldr	r3, [pc, #144]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_RCC_OscConfig+0x788>)
 800281a:	4013      	ands	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002824:	3a01      	subs	r2, #1
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	4311      	orrs	r1, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800282e:	0212      	lsls	r2, r2, #8
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	0552      	lsls	r2, r2, #21
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002842:	0852      	lsrs	r2, r2, #1
 8002844:	3a01      	subs	r2, #1
 8002846:	0652      	lsls	r2, r2, #25
 8002848:	4311      	orrs	r1, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800284e:	06d2      	lsls	r2, r2, #27
 8002850:	430a      	orrs	r2, r1
 8002852:	4912      	ldr	r1, [pc, #72]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002854:	4313      	orrs	r3, r2
 8002856:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0f      	ldr	r2, [pc, #60]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_RCC_OscConfig+0x784>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800286a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800286e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002870:	f7fd feb8 	bl	80005e4 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fd feb4 	bl	80005e4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e058      	b.n	800293c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	4b04      	ldr	r3, [pc, #16]	; (800289c <HAL_RCC_OscConfig+0x784>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002896:	e050      	b.n	800293a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e04f      	b.n	800293c <HAL_RCC_OscConfig+0x824>
 800289c:	40021000 	.word	0x40021000
 80028a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d144      	bne.n	800293a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028bc:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a20      	ldr	r2, [pc, #128]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028c8:	f7fd fe8c 	bl	80005e4 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fd fe88 	bl	80005e4 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e02c      	b.n	800293c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x7b8>
 80028ee:	e024      	b.n	800293a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d01f      	beq.n	8002936 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 80028fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fd fe6f 	bl	80005e4 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290a:	f7fd fe6b 	bl	80005e4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e00f      	b.n	800293c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4905      	ldr	r1, [pc, #20]	; (8002944 <HAL_RCC_OscConfig+0x82c>)
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_OscConfig+0x830>)
 8002930:	4013      	ands	r3, r2
 8002932:	60cb      	str	r3, [r1, #12]
 8002934:	e001      	b.n	800293a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	feeefffc 	.word	0xfeeefffc

0800294c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e11d      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b90      	ldr	r3, [pc, #576]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 020f 	bic.w	r2, r3, #15
 800297a:	498b      	ldr	r1, [pc, #556]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e105      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b81      	ldr	r3, [pc, #516]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d908      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	497b      	ldr	r1, [pc, #492]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d079      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d11e      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d6:	4b75      	ldr	r3, [pc, #468]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0dc      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80029e6:	f000 f9dd 	bl	8002da4 <RCC_GetSysClockFreqFromPLLSource>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a70      	ldr	r2, [pc, #448]	; (8002bb0 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d946      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029f2:	4b6e      	ldr	r3, [pc, #440]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d140      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029fe:	4b6b      	ldr	r3, [pc, #428]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a06:	4a69      	ldr	r2, [pc, #420]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e035      	b.n	8002a80 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d107      	bne.n	8002a2c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a1c:	4b63      	ldr	r3, [pc, #396]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d115      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b9      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a34:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0ad      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0a5      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a54:	f000 f8b4 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4a55      	ldr	r2, [pc, #340]	; (8002bb0 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d90f      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a6c:	4b4f      	ldr	r3, [pc, #316]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a74:	4a4d      	ldr	r2, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a80:	4b4a      	ldr	r3, [pc, #296]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 0203 	bic.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4947      	ldr	r1, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a92:	f7fd fda7 	bl	80005e4 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9a:	f7fd fda3 	bl	80005e4 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e077      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab0:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 020c 	and.w	r2, r3, #12
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d1eb      	bne.n	8002a9a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	d105      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002ac8:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a37      	ldr	r2, [pc, #220]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ad2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d208      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	492b      	ldr	r1, [pc, #172]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b02:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d210      	bcs.n	8002b32 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 020f 	bic.w	r2, r3, #15
 8002b18:	4923      	ldr	r1, [pc, #140]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e036      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4918      	ldr	r1, [pc, #96]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4910      	ldr	r1, [pc, #64]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b70:	f000 f826 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	490c      	ldr	r1, [pc, #48]	; (8002bb4 <HAL_RCC_ClockConfig+0x268>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x26c>)
 8002b8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b90:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_ClockConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcd5 	bl	8000544 <HAL_InitTick>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	04c4b400 	.word	0x04c4b400
 8002bb4:	08007134 	.word	0x08007134
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bce:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d121      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d11e      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e005      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c1c:	4a2b      	ldr	r2, [pc, #172]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10d      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c30:	e00a      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d102      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c38:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	e004      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c44:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d134      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d003      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0xac>
 8002c64:	e005      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c68:	617b      	str	r3, [r7, #20]
      break;
 8002c6a:	e005      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c6e:	617b      	str	r3, [r7, #20]
      break;
 8002c70:	e002      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	617b      	str	r3, [r7, #20]
      break;
 8002c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3301      	adds	r3, #1
 8002c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	fb03 f202 	mul.w	r2, r3, r2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	0e5b      	lsrs	r3, r3, #25
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	3301      	adds	r3, #1
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cb8:	69bb      	ldr	r3, [r7, #24]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08007144 	.word	0x08007144
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_RCC_GetHCLKFreq+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cfc:	4b27      	ldr	r3, [pc, #156]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d08:	f7ff f932 	bl	8001f70 <HAL_PWREx_GetVoltageRange>
 8002d0c:	6178      	str	r0, [r7, #20]
 8002d0e:	e014      	b.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d28:	f7ff f922 	bl	8001f70 <HAL_PWREx_GetVoltageRange>
 8002d2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d32:	4a1a      	ldr	r2, [pc, #104]	; (8002d9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d40:	d10b      	bne.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d913      	bls.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2ba0      	cmp	r3, #160	; 0xa0
 8002d4c:	d902      	bls.n	8002d54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d4e:	2302      	movs	r3, #2
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	e00d      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d54:	2301      	movs	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	e00a      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d5e:	d902      	bls.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d60:	2302      	movs	r3, #2
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	e004      	b.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d101      	bne.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 020f 	bic.w	r2, r3, #15
 8002d78:	4909      	ldr	r1, [pc, #36]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d001      	beq.n	8002d92 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40022000 	.word	0x40022000

08002da4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002daa:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d00b      	beq.n	8002dd2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d825      	bhi.n	8002e0c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d008      	beq.n	8002dd8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d11f      	bne.n	8002e0c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002dce:	613b      	str	r3, [r7, #16]
    break;
 8002dd0:	e01f      	b.n	8002e12 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002dd4:	613b      	str	r3, [r7, #16]
    break;
 8002dd6:	e01c      	b.n	8002e12 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d107      	bne.n	8002df4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e005      	b.n	8002e00 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002df4:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	613b      	str	r3, [r7, #16]
    break;
 8002e0a:	e002      	b.n	8002e12 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
    break;
 8002e10:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 030f 	and.w	r3, r3, #15
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	fb03 f202 	mul.w	r2, r3, r2
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	0e5b      	lsrs	r3, r3, #25
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	3301      	adds	r3, #1
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e52:	683b      	ldr	r3, [r7, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	40021000 	.word	0x40021000
 8002e64:	00f42400 	.word	0x00f42400
 8002e68:	007a1200 	.word	0x007a1200
 8002e6c:	08007144 	.word	0x08007144

08002e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d040      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d02a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e94:	2b80      	cmp	r3, #128	; 0x80
 8002e96:	d825      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e98:	2b60      	cmp	r3, #96	; 0x60
 8002e9a:	d026      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e9c:	2b60      	cmp	r3, #96	; 0x60
 8002e9e:	d821      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d006      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d81d      	bhi.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d009      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002eac:	2b20      	cmp	r3, #32
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002eb0:	e018      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eb2:	4b89      	ldr	r3, [pc, #548]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4a88      	ldr	r2, [pc, #544]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ebe:	e015      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fb02 	bl	80034d0 <RCCEx_PLLSAI1_Config>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ed0:	e00c      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3320      	adds	r3, #32
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fbed 	bl	80036b8 <RCCEx_PLLSAI2_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ee2:	e003      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee8:	e000      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ef2:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ef8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f00:	4975      	ldr	r1, [pc, #468]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f08:	e001      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d047      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d030      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f28:	d82a      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2e:	d02a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f34:	d824      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f40:	d81e      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f4c:	e018      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4a61      	ldr	r2, [pc, #388]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5a:	e015      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fab4 	bl	80034d0 <RCCEx_PLLSAI1_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6c:	e00c      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3320      	adds	r3, #32
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fb9f 	bl	80036b8 <RCCEx_PLLSAI2_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f7e:	e003      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	74fb      	strb	r3, [r7, #19]
      break;
 8002f84:	e000      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f8e:	4b52      	ldr	r3, [pc, #328]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	494e      	ldr	r1, [pc, #312]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fa4:	e001      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 809f 	beq.w	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fea:	2301      	movs	r3, #1
 8002fec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3a      	ldr	r2, [pc, #232]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ffa:	f7fd faf3 	bl	80005e4 <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003000:	e009      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003002:	f7fd faef 	bl	80005e4 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d902      	bls.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	74fb      	strb	r3, [r7, #19]
        break;
 8003014:	e005      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ef      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d15b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01f      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	429a      	cmp	r2, r3
 8003044:	d019      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003050:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003052:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003058:	4a1f      	ldr	r2, [pc, #124]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003062:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d016      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fd faae 	bl	80005e4 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308a:	e00b      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fd faaa 	bl	80005e4 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d902      	bls.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	74fb      	strb	r3, [r7, #19]
            break;
 80030a2:	e006      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ec      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10c      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030d0:	e008      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	74bb      	strb	r3, [r7, #18]
 80030d6:	e005      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e4:	7c7b      	ldrb	r3, [r7, #17]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4ba0      	ldr	r3, [pc, #640]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ee:	4a9f      	ldr	r2, [pc, #636]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003102:	4b9a      	ldr	r3, [pc, #616]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	4996      	ldr	r1, [pc, #600]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003124:	4b91      	ldr	r3, [pc, #580]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312a:	f023 020c 	bic.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	498e      	ldr	r1, [pc, #568]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003146:	4b89      	ldr	r3, [pc, #548]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	4985      	ldr	r1, [pc, #532]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003168:	4b80      	ldr	r3, [pc, #512]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800316a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003176:	497d      	ldr	r1, [pc, #500]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800318a:	4b78      	ldr	r3, [pc, #480]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	4974      	ldr	r1, [pc, #464]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	496c      	ldr	r1, [pc, #432]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031ce:	4b67      	ldr	r3, [pc, #412]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031dc:	4963      	ldr	r1, [pc, #396]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031f0:	4b5e      	ldr	r3, [pc, #376]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031fe:	495b      	ldr	r1, [pc, #364]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003212:	4b56      	ldr	r3, [pc, #344]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003218:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	4952      	ldr	r1, [pc, #328]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003234:	4b4d      	ldr	r3, [pc, #308]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	494a      	ldr	r1, [pc, #296]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003256:	4b45      	ldr	r3, [pc, #276]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	4941      	ldr	r1, [pc, #260]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00a      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003278:	4b3c      	ldr	r3, [pc, #240]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	4939      	ldr	r1, [pc, #228]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d028      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329a:	4b34      	ldr	r3, [pc, #208]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	4930      	ldr	r1, [pc, #192]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b8:	d106      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032ba:	4b2c      	ldr	r3, [pc, #176]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4a2b      	ldr	r2, [pc, #172]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c4:	60d3      	str	r3, [r2, #12]
 80032c6:	e011      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032d0:	d10c      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 f8f9 	bl	80034d0 <RCCEx_PLLSAI1_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d04d      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003300:	d108      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003308:	4a18      	ldr	r2, [pc, #96]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003312:	e012      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800331a:	4a14      	ldr	r2, [pc, #80]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003320:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003324:	4b11      	ldr	r3, [pc, #68]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	490e      	ldr	r1, [pc, #56]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003342:	d106      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a08      	ldr	r2, [pc, #32]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e020      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800335a:	d109      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a02      	ldr	r2, [pc, #8]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003366:	60d3      	str	r3, [r2, #12]
 8003368:	e014      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003378:	d10c      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	2101      	movs	r1, #1
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f8a5 	bl	80034d0 <RCCEx_PLLSAI1_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800338a:	7cfb      	ldrb	r3, [r7, #19]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d028      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a0:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ae:	4947      	ldr	r1, [pc, #284]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033be:	d106      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c0:	4b42      	ldr	r3, [pc, #264]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a41      	ldr	r2, [pc, #260]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ca:	60d3      	str	r3, [r2, #12]
 80033cc:	e011      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3304      	adds	r3, #4
 80033dc:	2101      	movs	r1, #1
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f876 	bl	80034d0 <RCCEx_PLLSAI1_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01e      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033fe:	4b33      	ldr	r3, [pc, #204]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800340e:	492f      	ldr	r1, [pc, #188]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800341c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	2102      	movs	r1, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f851 	bl	80034d0 <RCCEx_PLLSAI1_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003448:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344e:	f023 0204 	bic.w	r2, r3, #4
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003458:	491c      	ldr	r1, [pc, #112]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00b      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800346c:	4b17      	ldr	r3, [pc, #92]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800346e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003472:	f023 0218 	bic.w	r2, r3, #24
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347c:	4913      	ldr	r1, [pc, #76]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d017      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003490:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003496:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a0:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034b2:	d105      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40021000 	.word	0x40021000

080034d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034de:	4b72      	ldr	r3, [pc, #456]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00e      	beq.n	8003508 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d103      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
       ||
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d142      	bne.n	8003588 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	e03f      	b.n	8003588 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d018      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0x72>
 8003510:	2b03      	cmp	r3, #3
 8003512:	d825      	bhi.n	8003560 <RCCEx_PLLSAI1_Config+0x90>
 8003514:	2b01      	cmp	r3, #1
 8003516:	d002      	beq.n	800351e <RCCEx_PLLSAI1_Config+0x4e>
 8003518:	2b02      	cmp	r3, #2
 800351a:	d009      	beq.n	8003530 <RCCEx_PLLSAI1_Config+0x60>
 800351c:	e020      	b.n	8003560 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800351e:	4b62      	ldr	r3, [pc, #392]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11d      	bne.n	8003566 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800352e:	e01a      	b.n	8003566 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003530:	4b5d      	ldr	r3, [pc, #372]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003540:	e013      	b.n	800356a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003542:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10f      	bne.n	800356e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800354e:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d109      	bne.n	800356e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800355e:	e006      	b.n	800356e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e004      	b.n	8003570 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800356e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003576:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f023 0203 	bic.w	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4949      	ldr	r1, [pc, #292]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003584:	4313      	orrs	r3, r2
 8003586:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f040 8086 	bne.w	800369c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003590:	4b45      	ldr	r3, [pc, #276]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a44      	ldr	r2, [pc, #272]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800359a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fd f822 	bl	80005e4 <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035a2:	e009      	b.n	80035b8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035a4:	f7fd f81e 	bl	80005e4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d902      	bls.n	80035b8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	73fb      	strb	r3, [r7, #15]
        break;
 80035b6:	e005      	b.n	80035c4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035b8:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1ef      	bne.n	80035a4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d168      	bne.n	800369c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d113      	bne.n	80035f8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	4b35      	ldr	r3, [pc, #212]	; (80036ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6892      	ldr	r2, [r2, #8]
 80035dc:	0211      	lsls	r1, r2, #8
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68d2      	ldr	r2, [r2, #12]
 80035e2:	06d2      	lsls	r2, r2, #27
 80035e4:	4311      	orrs	r1, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6852      	ldr	r2, [r2, #4]
 80035ea:	3a01      	subs	r2, #1
 80035ec:	0112      	lsls	r2, r2, #4
 80035ee:	430a      	orrs	r2, r1
 80035f0:	492d      	ldr	r1, [pc, #180]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	610b      	str	r3, [r1, #16]
 80035f6:	e02d      	b.n	8003654 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d115      	bne.n	800362a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003604:	4013      	ands	r3, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	0211      	lsls	r1, r2, #8
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6912      	ldr	r2, [r2, #16]
 8003610:	0852      	lsrs	r2, r2, #1
 8003612:	3a01      	subs	r2, #1
 8003614:	0552      	lsls	r2, r2, #21
 8003616:	4311      	orrs	r1, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6852      	ldr	r2, [r2, #4]
 800361c:	3a01      	subs	r2, #1
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	430a      	orrs	r2, r1
 8003622:	4921      	ldr	r1, [pc, #132]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	610b      	str	r3, [r1, #16]
 8003628:	e014      	b.n	8003654 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	0211      	lsls	r1, r2, #8
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6952      	ldr	r2, [r2, #20]
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0652      	lsls	r2, r2, #25
 8003642:	4311      	orrs	r1, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6852      	ldr	r2, [r2, #4]
 8003648:	3a01      	subs	r2, #1
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	430a      	orrs	r2, r1
 800364e:	4916      	ldr	r1, [pc, #88]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003650:	4313      	orrs	r3, r2
 8003652:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800365a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800365e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7fc ffc0 	bl	80005e4 <HAL_GetTick>
 8003664:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003666:	e009      	b.n	800367c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003668:	f7fc ffbc 	bl	80005e4 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d902      	bls.n	800367c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	73fb      	strb	r3, [r7, #15]
          break;
 800367a:	e005      	b.n	8003688 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ef      	beq.n	8003668 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	4904      	ldr	r1, [pc, #16]	; (80036a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	07ff800f 	.word	0x07ff800f
 80036b0:	ff9f800f 	.word	0xff9f800f
 80036b4:	f9ff800f 	.word	0xf9ff800f

080036b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036c6:	4b72      	ldr	r3, [pc, #456]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00e      	beq.n	80036f0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036d2:	4b6f      	ldr	r3, [pc, #444]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0203 	and.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d103      	bne.n	80036ea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
       ||
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d142      	bne.n	8003770 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	73fb      	strb	r3, [r7, #15]
 80036ee:	e03f      	b.n	8003770 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d018      	beq.n	800372a <RCCEx_PLLSAI2_Config+0x72>
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d825      	bhi.n	8003748 <RCCEx_PLLSAI2_Config+0x90>
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d002      	beq.n	8003706 <RCCEx_PLLSAI2_Config+0x4e>
 8003700:	2b02      	cmp	r3, #2
 8003702:	d009      	beq.n	8003718 <RCCEx_PLLSAI2_Config+0x60>
 8003704:	e020      	b.n	8003748 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003706:	4b62      	ldr	r3, [pc, #392]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d11d      	bne.n	800374e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003716:	e01a      	b.n	800374e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003718:	4b5d      	ldr	r3, [pc, #372]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003720:	2b00      	cmp	r3, #0
 8003722:	d116      	bne.n	8003752 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003728:	e013      	b.n	8003752 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800372a:	4b59      	ldr	r3, [pc, #356]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003746:	e006      	b.n	8003756 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      break;
 800374c:	e004      	b.n	8003758 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800374e:	bf00      	nop
 8003750:	e002      	b.n	8003758 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003756:	bf00      	nop
    }

    if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d108      	bne.n	8003770 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800375e:	4b4c      	ldr	r3, [pc, #304]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4949      	ldr	r1, [pc, #292]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800376c:	4313      	orrs	r3, r2
 800376e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 8086 	bne.w	8003884 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003778:	4b45      	ldr	r3, [pc, #276]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a44      	ldr	r2, [pc, #272]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800377e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fc ff2e 	bl	80005e4 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800378a:	e009      	b.n	80037a0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800378c:	f7fc ff2a 	bl	80005e4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	73fb      	strb	r3, [r7, #15]
        break;
 800379e:	e005      	b.n	80037ac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037a0:	4b3b      	ldr	r3, [pc, #236]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ef      	bne.n	800378c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d168      	bne.n	8003884 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d113      	bne.n	80037e0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037b8:	4b35      	ldr	r3, [pc, #212]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <RCCEx_PLLSAI2_Config+0x1dc>)
 80037be:	4013      	ands	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	06d2      	lsls	r2, r2, #27
 80037cc:	4311      	orrs	r1, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6852      	ldr	r2, [r2, #4]
 80037d2:	3a01      	subs	r2, #1
 80037d4:	0112      	lsls	r2, r2, #4
 80037d6:	430a      	orrs	r2, r1
 80037d8:	492d      	ldr	r1, [pc, #180]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	614b      	str	r3, [r1, #20]
 80037de:	e02d      	b.n	800383c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d115      	bne.n	8003812 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037e6:	4b2a      	ldr	r3, [pc, #168]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <RCCEx_PLLSAI2_Config+0x1e0>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	0211      	lsls	r1, r2, #8
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6912      	ldr	r2, [r2, #16]
 80037f8:	0852      	lsrs	r2, r2, #1
 80037fa:	3a01      	subs	r2, #1
 80037fc:	0552      	lsls	r2, r2, #21
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6852      	ldr	r2, [r2, #4]
 8003804:	3a01      	subs	r2, #1
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	430a      	orrs	r2, r1
 800380a:	4921      	ldr	r1, [pc, #132]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	614b      	str	r3, [r1, #20]
 8003810:	e014      	b.n	800383c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003812:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6892      	ldr	r2, [r2, #8]
 800381e:	0211      	lsls	r1, r2, #8
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6952      	ldr	r2, [r2, #20]
 8003824:	0852      	lsrs	r2, r2, #1
 8003826:	3a01      	subs	r2, #1
 8003828:	0652      	lsls	r2, r2, #25
 800382a:	4311      	orrs	r1, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6852      	ldr	r2, [r2, #4]
 8003830:	3a01      	subs	r2, #1
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	430a      	orrs	r2, r1
 8003836:	4916      	ldr	r1, [pc, #88]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003838:	4313      	orrs	r3, r2
 800383a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800383c:	4b14      	ldr	r3, [pc, #80]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a13      	ldr	r2, [pc, #76]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003846:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fc fecc 	bl	80005e4 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800384e:	e009      	b.n	8003864 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003850:	f7fc fec8 	bl	80005e4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d902      	bls.n	8003864 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	73fb      	strb	r3, [r7, #15]
          break;
 8003862:	e005      	b.n	8003870 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003864:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ef      	beq.n	8003850 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	4904      	ldr	r1, [pc, #16]	; (8003890 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003880:	4313      	orrs	r3, r2
 8003882:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
 8003894:	07ff800f 	.word	0x07ff800f
 8003898:	ff9f800f 	.word	0xff9f800f
 800389c:	f9ff800f 	.word	0xf9ff800f

080038a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038a0:	b084      	sub	sp, #16
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	f107 001c 	add.w	r0, r7, #28
 80038ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f001 faf6 	bl	8004eb0 <USB_CoreReset>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80038c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38
 80038da:	e005      	b.n	80038e8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038f4:	b004      	add	sp, #16
 80038f6:	4770      	bx	lr

080038f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b087      	sub	sp, #28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	4613      	mov	r3, r2
 8003904:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d165      	bne.n	80039d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4a3e      	ldr	r2, [pc, #248]	; (8003a08 <USB_SetTurnaroundTime+0x110>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d906      	bls.n	8003922 <USB_SetTurnaroundTime+0x2a>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4a3d      	ldr	r2, [pc, #244]	; (8003a0c <USB_SetTurnaroundTime+0x114>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d202      	bcs.n	8003922 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800391c:	230f      	movs	r3, #15
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e05c      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4a39      	ldr	r2, [pc, #228]	; (8003a0c <USB_SetTurnaroundTime+0x114>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d306      	bcc.n	8003938 <USB_SetTurnaroundTime+0x40>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4a38      	ldr	r2, [pc, #224]	; (8003a10 <USB_SetTurnaroundTime+0x118>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d202      	bcs.n	8003938 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003932:	230e      	movs	r3, #14
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e051      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	4a35      	ldr	r2, [pc, #212]	; (8003a10 <USB_SetTurnaroundTime+0x118>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d306      	bcc.n	800394e <USB_SetTurnaroundTime+0x56>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4a34      	ldr	r2, [pc, #208]	; (8003a14 <USB_SetTurnaroundTime+0x11c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d202      	bcs.n	800394e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003948:	230d      	movs	r3, #13
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e046      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4a30      	ldr	r2, [pc, #192]	; (8003a14 <USB_SetTurnaroundTime+0x11c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d306      	bcc.n	8003964 <USB_SetTurnaroundTime+0x6c>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4a2f      	ldr	r2, [pc, #188]	; (8003a18 <USB_SetTurnaroundTime+0x120>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d802      	bhi.n	8003964 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800395e:	230c      	movs	r3, #12
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e03b      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4a2c      	ldr	r2, [pc, #176]	; (8003a18 <USB_SetTurnaroundTime+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d906      	bls.n	800397a <USB_SetTurnaroundTime+0x82>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4a2b      	ldr	r2, [pc, #172]	; (8003a1c <USB_SetTurnaroundTime+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d802      	bhi.n	800397a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003974:	230b      	movs	r3, #11
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	e030      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <USB_SetTurnaroundTime+0x124>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d906      	bls.n	8003990 <USB_SetTurnaroundTime+0x98>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <USB_SetTurnaroundTime+0x128>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d802      	bhi.n	8003990 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800398a:	230a      	movs	r3, #10
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	e025      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <USB_SetTurnaroundTime+0x128>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d906      	bls.n	80039a6 <USB_SetTurnaroundTime+0xae>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <USB_SetTurnaroundTime+0x12c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d202      	bcs.n	80039a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039a0:	2309      	movs	r3, #9
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e01a      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <USB_SetTurnaroundTime+0x12c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d306      	bcc.n	80039bc <USB_SetTurnaroundTime+0xc4>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <USB_SetTurnaroundTime+0x130>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d802      	bhi.n	80039bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039b6:	2308      	movs	r3, #8
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	e00f      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <USB_SetTurnaroundTime+0x130>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d906      	bls.n	80039d2 <USB_SetTurnaroundTime+0xda>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <USB_SetTurnaroundTime+0x134>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d202      	bcs.n	80039d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039cc:	2307      	movs	r3, #7
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e004      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80039d2:	2306      	movs	r3, #6
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e001      	b.n	80039dc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80039d8:	2309      	movs	r3, #9
 80039da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	029b      	lsls	r3, r3, #10
 80039f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	00d8acbf 	.word	0x00d8acbf
 8003a0c:	00e4e1c0 	.word	0x00e4e1c0
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	01067380 	.word	0x01067380
 8003a18:	011a499f 	.word	0x011a499f
 8003a1c:	01312cff 	.word	0x01312cff
 8003a20:	014ca43f 	.word	0x014ca43f
 8003a24:	016e3600 	.word	0x016e3600
 8003a28:	01a6ab1f 	.word	0x01a6ab1f
 8003a2c:	01e84800 	.word	0x01e84800

08003a30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 0201 	bic.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d115      	bne.n	8003ac2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f7fc fdaa 	bl	80005fc <HAL_Delay>
      ms++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f001 f985 	bl	8004dbe <USB_GetMode>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d01e      	beq.n	8003af8 <USB_SetCurrentMode+0x84>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b31      	cmp	r3, #49	; 0x31
 8003abe:	d9f0      	bls.n	8003aa2 <USB_SetCurrentMode+0x2e>
 8003ac0:	e01a      	b.n	8003af8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ac2:	78fb      	ldrb	r3, [r7, #3]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d115      	bne.n	8003af4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7fc fd91 	bl	80005fc <HAL_Delay>
      ms++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f001 f96c 	bl	8004dbe <USB_GetMode>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <USB_SetCurrentMode+0x84>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b31      	cmp	r3, #49	; 0x31
 8003af0:	d9f0      	bls.n	8003ad4 <USB_SetCurrentMode+0x60>
 8003af2:	e001      	b.n	8003af8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e005      	b.n	8003b04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b32      	cmp	r3, #50	; 0x32
 8003afc:	d101      	bne.n	8003b02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	e009      	b.n	8003b40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	3340      	adds	r3, #64	; 0x40
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	2200      	movs	r2, #0
 8003b38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b0e      	cmp	r3, #14
 8003b44:	d9f2      	bls.n	8003b2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11c      	bne.n	8003b86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	e005      	b.n	8003b92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bac:	461a      	mov	r2, r3
 8003bae:	680b      	ldr	r3, [r1, #0]
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bb2:	2103      	movs	r1, #3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f959 	bl	8003e6c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bba:	2110      	movs	r1, #16
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8f1 	bl	8003da4 <USB_FlushTxFifo>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f91d 	bl	8003e0c <USB_FlushRxFifo>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be2:	461a      	mov	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	e043      	b.n	8003c8e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c1c:	d118      	bne.n	8003c50 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c30:	461a      	mov	r2, r3
 8003c32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	e013      	b.n	8003c62 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c46:	461a      	mov	r2, r3
 8003c48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e008      	b.n	8003c62 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2300      	movs	r3, #0
 8003c72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	461a      	mov	r2, r3
 8003c82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d3b7      	bcc.n	8003c06 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	e043      	b.n	8003d24 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cb2:	d118      	bne.n	8003ce6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e013      	b.n	8003cf8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	e008      	b.n	8003cf8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d04:	461a      	mov	r2, r3
 8003d06:	2300      	movs	r3, #0
 8003d08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	461a      	mov	r2, r3
 8003d18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3301      	adds	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3b7      	bcc.n	8003c9c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f043 0210 	orr.w	r2, r3, #16
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <USB_DevInit+0x294>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f043 0208 	orr.w	r2, r3, #8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d9a:	b004      	add	sp, #16
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	803c3800 	.word	0x803c3800

08003da4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <USB_FlushTxFifo+0x64>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e01b      	b.n	8003dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	daf2      	bge.n	8003db2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	019b      	lsls	r3, r3, #6
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <USB_FlushTxFifo+0x64>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e006      	b.n	8003dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d0f0      	beq.n	8003ddc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	00030d40 	.word	0x00030d40

08003e0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <USB_FlushRxFifo+0x5c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e018      	b.n	8003e5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	daf2      	bge.n	8003e18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <USB_FlushRxFifo+0x5c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e006      	b.n	8003e5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d0f0      	beq.n	8003e3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	00030d40 	.word	0x00030d40

08003e6c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b087      	sub	sp, #28
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0306 	and.w	r3, r3, #6
 8003eb6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d002      	beq.n	8003ec4 <USB_GetDevSpeed+0x26>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b06      	cmp	r3, #6
 8003ec2:	d102      	bne.n	8003eca <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	75fb      	strb	r3, [r7, #23]
 8003ec8:	e001      	b.n	8003ece <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003eca:	230f      	movs	r3, #15
 8003ecc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d13a      	bne.n	8003f6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	2101      	movs	r1, #1
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d155      	bne.n	8003fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	791b      	ldrb	r3, [r3, #4]
 8003f4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	059b      	lsls	r3, r3, #22
 8003f52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f54:	4313      	orrs	r3, r2
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	e036      	b.n	8003fdc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	2101      	movs	r1, #1
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	68f9      	ldr	r1, [r7, #12]
 8003f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11a      	bne.n	8003fdc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	791b      	ldrb	r3, [r3, #4]
 8003fc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fc2:	430b      	orrs	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	785b      	ldrb	r3, [r3, #1]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d161      	bne.n	80040cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800401e:	d11f      	bne.n	8004060 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800403e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	0151      	lsls	r1, r2, #5
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	440a      	add	r2, r1
 8004056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800405e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004080:	4013      	ands	r3, r2
 8004082:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408a:	69da      	ldr	r2, [r3, #28]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2101      	movs	r1, #1
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	b29b      	uxth	r3, r3
 800409c:	43db      	mvns	r3, r3
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a4:	4013      	ands	r3, r2
 80040a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	0159      	lsls	r1, r3, #5
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	440b      	add	r3, r1
 80040be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c2:	4619      	mov	r1, r3
 80040c4:	4b35      	ldr	r3, [pc, #212]	; (800419c <USB_DeactivateEndpoint+0x1b0>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	600b      	str	r3, [r1, #0]
 80040ca:	e060      	b.n	800418e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040e2:	d11f      	bne.n	8004124 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	0151      	lsls	r1, r2, #5
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	440a      	add	r2, r1
 80040fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004102:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	0151      	lsls	r1, r2, #5
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	440a      	add	r2, r1
 800411a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800411e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004122:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	43db      	mvns	r3, r3
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004144:	4013      	ands	r3, r2
 8004146:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	f003 030f 	and.w	r3, r3, #15
 8004158:	2101      	movs	r1, #1
 800415a:	fa01 f303 	lsl.w	r3, r1, r3
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	43db      	mvns	r3, r3
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004168:	4013      	ands	r3, r2
 800416a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	0159      	lsls	r1, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	440b      	add	r3, r1
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	4619      	mov	r1, r3
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <USB_DeactivateEndpoint+0x1b4>)
 800418a:	4013      	ands	r3, r2
 800418c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	ec337800 	.word	0xec337800
 80041a0:	eff37800 	.word	0xeff37800

080041a4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 810a 	bne.w	80043d6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d132      	bne.n	8004230 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004208:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800420c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004228:	0cdb      	lsrs	r3, r3, #19
 800422a:	04db      	lsls	r3, r3, #19
 800422c:	6113      	str	r3, [r2, #16]
 800422e:	e074      	b.n	800431a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	440a      	add	r2, r1
 8004246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424a:	0cdb      	lsrs	r3, r3, #19
 800424c:	04db      	lsls	r3, r3, #19
 800424e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	0151      	lsls	r1, r2, #5
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	440a      	add	r2, r1
 8004266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800426e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004272:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6999      	ldr	r1, [r3, #24]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	440b      	add	r3, r1
 800428c:	1e59      	subs	r1, r3, #1
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	fbb1 f3f3 	udiv	r3, r1, r3
 8004296:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004298:	4b9e      	ldr	r3, [pc, #632]	; (8004514 <USB_EPStartXfer+0x370>)
 800429a:	400b      	ands	r3, r1
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	0148      	lsls	r0, r1, #5
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	4401      	add	r1, r0
 80042a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	6939      	ldr	r1, [r7, #16]
 80042c4:	0148      	lsls	r0, r1, #5
 80042c6:	6979      	ldr	r1, [r7, #20]
 80042c8:	4401      	add	r1, r0
 80042ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	791b      	ldrb	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d11f      	bne.n	800431a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004318:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004334:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004338:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	791b      	ldrb	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d015      	beq.n	800436e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8106 	beq.w	8004558 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	6979      	ldr	r1, [r7, #20]
 8004364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004368:	4313      	orrs	r3, r2
 800436a:	634b      	str	r3, [r1, #52]	; 0x34
 800436c:	e0f4      	b.n	8004558 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	2b00      	cmp	r3, #0
 800437c:	d110      	bne.n	80043a0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004398:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00f      	b.n	80043c0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043be:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	6919      	ldr	r1, [r3, #16]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa94 	bl	80048fc <USB_WritePacket>
 80043d4:	e0c0      	b.n	8004558 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043f0:	0cdb      	lsrs	r3, r3, #19
 80043f2:	04db      	lsls	r3, r3, #19
 80043f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004410:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004414:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004418:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d123      	bne.n	800446a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004438:	6939      	ldr	r1, [r7, #16]
 800443a:	0148      	lsls	r0, r1, #5
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	4401      	add	r1, r0
 8004440:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004444:	4313      	orrs	r3, r2
 8004446:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004466:	6113      	str	r3, [r2, #16]
 8004468:	e037      	b.n	80044da <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4413      	add	r3, r2
 8004474:	1e5a      	subs	r2, r3, #1
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	fbb2 f3f3 	udiv	r3, r2, r3
 800447e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	89fa      	ldrh	r2, [r7, #14]
 8004486:	fb03 f202 	mul.w	r2, r3, r2
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	89fb      	ldrh	r3, [r7, #14]
 800449e:	04d9      	lsls	r1, r3, #19
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <USB_EPStartXfer+0x370>)
 80044a2:	400b      	ands	r3, r1
 80044a4:	6939      	ldr	r1, [r7, #16]
 80044a6:	0148      	lsls	r0, r1, #5
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	4401      	add	r1, r0
 80044ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044b0:	4313      	orrs	r3, r2
 80044b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ca:	6939      	ldr	r1, [r7, #16]
 80044cc:	0148      	lsls	r0, r1, #5
 80044ce:	6979      	ldr	r1, [r7, #20]
 80044d0:	4401      	add	r1, r0
 80044d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044d6:	4313      	orrs	r3, r2
 80044d8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	791b      	ldrb	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d12a      	bne.n	8004538 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d112      	bne.n	8004518 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	0151      	lsls	r1, r2, #5
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	440a      	add	r2, r1
 8004508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800450c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e011      	b.n	8004538 <USB_EPStartXfer+0x394>
 8004514:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	0151      	lsls	r1, r2, #5
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	440a      	add	r2, r1
 800452e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	440a      	add	r2, r1
 800454e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004556:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b01      	cmp	r3, #1
 800457e:	f040 80ab 	bne.w	80046d8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d132      	bne.n	80045f0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	0151      	lsls	r1, r2, #5
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	440a      	add	r2, r1
 80045c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	0151      	lsls	r1, r2, #5
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	440a      	add	r2, r1
 80045e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e8:	0cdb      	lsrs	r3, r3, #19
 80045ea:	04db      	lsls	r3, r3, #19
 80045ec:	6113      	str	r3, [r2, #16]
 80045ee:	e04e      	b.n	800468e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460a:	0cdb      	lsrs	r3, r3, #19
 800460c:	04db      	lsls	r3, r3, #19
 800460e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	440a      	add	r2, r1
 8004626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800462a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004632:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d903      	bls.n	8004648 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	0148      	lsls	r0, r1, #5
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	4401      	add	r1, r0
 8004686:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800468a:	4313      	orrs	r3, r2
 800468c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	0151      	lsls	r1, r2, #5
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	440a      	add	r2, r1
 80046a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046ac:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d071      	beq.n	800479a <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	2101      	movs	r1, #1
 80046c8:	fa01 f303 	lsl.w	r3, r1, r3
 80046cc:	68f9      	ldr	r1, [r7, #12]
 80046ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d2:	4313      	orrs	r3, r2
 80046d4:	634b      	str	r3, [r1, #52]	; 0x34
 80046d6:	e060      	b.n	800479a <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f2:	0cdb      	lsrs	r3, r3, #19
 80046f4:	04db      	lsls	r3, r3, #19
 80046f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004712:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004716:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800471a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800474e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004752:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	0148      	lsls	r0, r1, #5
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	4401      	add	r1, r0
 8004772:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004776:	4313      	orrs	r3, r2
 8004778:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	0151      	lsls	r1, r2, #5
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	440a      	add	r2, r1
 8004790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004794:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004798:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d14a      	bne.n	800485c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047de:	f040 8086 	bne.w	80048ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	7812      	ldrb	r2, [r2, #0]
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004800:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004804:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	7812      	ldrb	r2, [r2, #0]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	440a      	add	r2, r1
 8004820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004824:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004828:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3301      	adds	r3, #1
 800482e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f242 7210 	movw	r2, #10000	; 0x2710
 8004836:	4293      	cmp	r3, r2
 8004838:	d902      	bls.n	8004840 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
          break;
 800483e:	e056      	b.n	80048ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004858:	d0e7      	beq.n	800482a <USB_EPStopXfer+0x82>
 800485a:	e048      	b.n	80048ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004874:	d13b      	bne.n	80048ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	0151      	lsls	r1, r2, #5
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	440a      	add	r2, r1
 8004890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004894:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004898:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	7812      	ldrb	r2, [r2, #0]
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d902      	bls.n	80048d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	75fb      	strb	r3, [r7, #23]
          break;
 80048d2:	e00c      	b.n	80048ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ec:	d0e7      	beq.n	80048be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	; 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	4611      	mov	r1, r2
 8004908:	461a      	mov	r2, r3
 800490a:	460b      	mov	r3, r1
 800490c:	71fb      	strb	r3, [r7, #7]
 800490e:	4613      	mov	r3, r2
 8004910:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800491a:	88bb      	ldrh	r3, [r7, #4]
 800491c:	3303      	adds	r3, #3
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e018      	b.n	800495a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	031a      	lsls	r2, r3, #12
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4413      	add	r3, r2
 8004930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004934:	461a      	mov	r2, r3
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3301      	adds	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	3301      	adds	r3, #1
 8004946:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3301      	adds	r3, #1
 800494c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	3301      	adds	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	3301      	adds	r3, #1
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	429a      	cmp	r2, r3
 8004960:	d3e2      	bcc.n	8004928 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3724      	adds	r7, #36	; 0x24
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004970:	b480      	push	{r7}
 8004972:	b08b      	sub	sp, #44	; 0x2c
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	089b      	lsrs	r3, r3, #2
 800498a:	b29b      	uxth	r3, r3
 800498c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004996:	2300      	movs	r3, #0
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	e014      	b.n	80049c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	3301      	adds	r3, #1
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	3301      	adds	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	3301      	adds	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	3301      	adds	r3, #1
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	3301      	adds	r3, #1
 80049c4:	623b      	str	r3, [r7, #32]
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d3e6      	bcc.n	800499c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ce:	8bfb      	ldrh	r3, [r7, #30]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01e      	beq.n	8004a12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049de:	461a      	mov	r2, r3
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	701a      	strb	r2, [r3, #0]
      i++;
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	3301      	adds	r3, #1
 80049fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	3301      	adds	r3, #1
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a06:	8bfb      	ldrh	r3, [r7, #30]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a0c:	8bfb      	ldrh	r3, [r7, #30]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1ea      	bne.n	80049e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	372c      	adds	r7, #44	; 0x2c
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d12c      	bne.n	8004a96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	db12      	blt.n	8004a74 <USB_EPSetStall+0x54>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00f      	beq.n	8004a74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e02b      	b.n	8004aee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	015a      	lsls	r2, r3, #5
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	db12      	blt.n	8004ace <USB_EPSetStall+0xae>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00f      	beq.n	8004ace <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004acc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	015a      	lsls	r2, r3, #5
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	785b      	ldrb	r3, [r3, #1]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d128      	bne.n	8004b6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	791b      	ldrb	r3, [r3, #4]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d003      	beq.n	8004b48 <USB_EPClearStall+0x4c>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d138      	bne.n	8004bba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e027      	b.n	8004bba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	791b      	ldrb	r3, [r3, #4]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d003      	beq.n	8004b9a <USB_EPClearStall+0x9e>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	791b      	ldrb	r3, [r3, #4]
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d10f      	bne.n	8004bba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004be6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3714      	adds	r7, #20
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c42:	f023 0302 	bic.w	r3, r3, #2
 8004c46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c70:	f023 0303 	bic.w	r3, r3, #3
 8004c74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4013      	ands	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	0c1b      	lsrs	r3, r3, #16
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	b29b      	uxth	r3, r3
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d54:	68bb      	ldr	r3, [r7, #8]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	01db      	lsls	r3, r3, #7
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004db0:	68bb      	ldr	r3, [r7, #8]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0301 	and.w	r3, r3, #1
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004df4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004df8:	f023 0307 	bic.w	r3, r3, #7
 8004dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	333c      	adds	r3, #60	; 0x3c
 8004e32:	3304      	adds	r3, #4
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a1c      	ldr	r2, [pc, #112]	; (8004eac <USB_EP0_OutStart+0x8c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d90a      	bls.n	8004e56 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e50:	d101      	bne.n	8004e56 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e024      	b.n	8004ea0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	f043 0318 	orr.w	r3, r3, #24
 8004e88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e9c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	4f54300a 	.word	0x4f54300a

08004eb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <USB_CoreReset+0x64>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e01b      	b.n	8004f06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	daf2      	bge.n	8004ebc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f043 0201 	orr.w	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <USB_CoreReset+0x64>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e006      	b.n	8004f06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d0f0      	beq.n	8004ee6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	00030d40 	.word	0x00030d40

08004f18 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004f24:	2010      	movs	r0, #16
 8004f26:	f002 f88b 	bl	8007040 <USBD_static_malloc>
 8004f2a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e01b      	b.n	8004f76 <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7c1b      	ldrb	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2207      	movs	r2, #7
 8004f52:	875a      	strh	r2, [r3, #58]	; 0x3a
 8004f54:	e002      	b.n	8004f5c <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	220a      	movs	r2, #10
 8004f5a:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	2203      	movs	r2, #3
 8004f60:	2181      	movs	r1, #129	; 0x81
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 fe6c 	bl	8006c40 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	460b      	mov	r3, r1
 8004f88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004f8a:	2181      	movs	r1, #129	; 0x81
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 fe95 	bl	8006cbc <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d009      	beq.n	8004fbc <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f002 f854 	bl	800705c <USBD_static_free>
    pdev->pClassData = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fd8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e0e8      	b.n	80051be <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d046      	beq.n	8005086 <USBD_HID_Setup+0xbe>
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	f040 80d8 	bne.w	80051ae <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	3b02      	subs	r3, #2
 8005004:	2b09      	cmp	r3, #9
 8005006:	d836      	bhi.n	8005076 <USBD_HID_Setup+0xae>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <USBD_HID_Setup+0x48>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005067 	.word	0x08005067
 8005014:	08005047 	.word	0x08005047
 8005018:	08005077 	.word	0x08005077
 800501c:	08005077 	.word	0x08005077
 8005020:	08005077 	.word	0x08005077
 8005024:	08005077 	.word	0x08005077
 8005028:	08005077 	.word	0x08005077
 800502c:	08005077 	.word	0x08005077
 8005030:	08005055 	.word	0x08005055
 8005034:	08005039 	.word	0x08005039
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	885b      	ldrh	r3, [r3, #2]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]
          break;
 8005044:	e01e      	b.n	8005084 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 fa4c 	bl	80064ea <USBD_CtlSendData>
          break;
 8005052:	e017      	b.n	8005084 <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	885b      	ldrh	r3, [r3, #2]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	b29b      	uxth	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	605a      	str	r2, [r3, #4]
          break;
 8005064:	e00e      	b.n	8005084 <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	3304      	adds	r3, #4
 800506a:	2201      	movs	r2, #1
 800506c:	4619      	mov	r1, r3
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 fa3b 	bl	80064ea <USBD_CtlSendData>
          break;
 8005074:	e006      	b.n	8005084 <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005076:	6839      	ldr	r1, [r7, #0]
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f001 f9c5 	bl	8006408 <USBD_CtlError>
          ret = USBD_FAIL;
 800507e:	2303      	movs	r3, #3
 8005080:	75fb      	strb	r3, [r7, #23]
          break;
 8005082:	bf00      	nop
      }
      break;
 8005084:	e09a      	b.n	80051bc <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	2b0b      	cmp	r3, #11
 800508c:	f200 8086 	bhi.w	800519c <USBD_HID_Setup+0x1d4>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <USBD_HID_Setup+0xd0>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050c9 	.word	0x080050c9
 800509c:	080051ab 	.word	0x080051ab
 80050a0:	0800519d 	.word	0x0800519d
 80050a4:	0800519d 	.word	0x0800519d
 80050a8:	0800519d 	.word	0x0800519d
 80050ac:	0800519d 	.word	0x0800519d
 80050b0:	080050f3 	.word	0x080050f3
 80050b4:	0800519d 	.word	0x0800519d
 80050b8:	0800519d 	.word	0x0800519d
 80050bc:	0800519d 	.word	0x0800519d
 80050c0:	0800514b 	.word	0x0800514b
 80050c4:	08005175 	.word	0x08005175
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d107      	bne.n	80050e4 <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80050d4:	f107 030a 	add.w	r3, r7, #10
 80050d8:	2202      	movs	r2, #2
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 fa04 	bl	80064ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050e2:	e063      	b.n	80051ac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f001 f98e 	bl	8006408 <USBD_CtlError>
            ret = USBD_FAIL;
 80050ec:	2303      	movs	r3, #3
 80050ee:	75fb      	strb	r3, [r7, #23]
          break;
 80050f0:	e05c      	b.n	80051ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	885b      	ldrh	r3, [r3, #2]
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b22      	cmp	r3, #34	; 0x22
 80050fc:	d108      	bne.n	8005110 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	88db      	ldrh	r3, [r3, #6]
 8005102:	2b4a      	cmp	r3, #74	; 0x4a
 8005104:	bf28      	it	cs
 8005106:	234a      	movcs	r3, #74	; 0x4a
 8005108:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800510a:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <USBD_HID_Setup+0x200>)
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e015      	b.n	800513c <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	885b      	ldrh	r3, [r3, #2]
 8005114:	0a1b      	lsrs	r3, r3, #8
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b21      	cmp	r3, #33	; 0x21
 800511a:	d108      	bne.n	800512e <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 800511c:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <USBD_HID_Setup+0x204>)
 800511e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	88db      	ldrh	r3, [r3, #6]
 8005124:	2b09      	cmp	r3, #9
 8005126:	bf28      	it	cs
 8005128:	2309      	movcs	r3, #9
 800512a:	82bb      	strh	r3, [r7, #20]
 800512c:	e006      	b.n	800513c <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f001 f969 	bl	8006408 <USBD_CtlError>
            ret = USBD_FAIL;
 8005136:	2303      	movs	r3, #3
 8005138:	75fb      	strb	r3, [r7, #23]
            break;
 800513a:	e037      	b.n	80051ac <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800513c:	8abb      	ldrh	r3, [r7, #20]
 800513e:	461a      	mov	r2, r3
 8005140:	6939      	ldr	r1, [r7, #16]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 f9d1 	bl	80064ea <USBD_CtlSendData>
          break;
 8005148:	e030      	b.n	80051ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d107      	bne.n	8005166 <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3308      	adds	r3, #8
 800515a:	2201      	movs	r2, #1
 800515c:	4619      	mov	r1, r3
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 f9c3 	bl	80064ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005164:	e022      	b.n	80051ac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f001 f94d 	bl	8006408 <USBD_CtlError>
            ret = USBD_FAIL;
 800516e:	2303      	movs	r3, #3
 8005170:	75fb      	strb	r3, [r7, #23]
          break;
 8005172:	e01b      	b.n	80051ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b03      	cmp	r3, #3
 800517e:	d106      	bne.n	800518e <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	885b      	ldrh	r3, [r3, #2]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	461a      	mov	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800518c:	e00e      	b.n	80051ac <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 f939 	bl	8006408 <USBD_CtlError>
            ret = USBD_FAIL;
 8005196:	2303      	movs	r3, #3
 8005198:	75fb      	strb	r3, [r7, #23]
          break;
 800519a:	e007      	b.n	80051ac <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 f932 	bl	8006408 <USBD_CtlError>
          ret = USBD_FAIL;
 80051a4:	2303      	movs	r3, #3
 80051a6:	75fb      	strb	r3, [r7, #23]
          break;
 80051a8:	e000      	b.n	80051ac <USBD_HID_Setup+0x1e4>
          break;
 80051aa:	bf00      	nop
      }
      break;
 80051ac:	e006      	b.n	80051bc <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 f929 	bl	8006408 <USBD_CtlError>
      ret = USBD_FAIL;
 80051b6:	2303      	movs	r3, #3
 80051b8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ba:	bf00      	nop
  }

  return (uint8_t)ret;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200000c8 	.word	0x200000c8
 80051cc:	200000b0 	.word	0x200000b0

080051d0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	4613      	mov	r3, r2
 80051dc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051e4:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e013      	b.n	8005218 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d10c      	bne.n	8005216 <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	7b1b      	ldrb	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2201      	movs	r2, #1
 8005208:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	2181      	movs	r1, #129	; 0x81
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f001 fe57 	bl	8006ec4 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2222      	movs	r2, #34	; 0x22
 800522c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 800522e:	4b03      	ldr	r3, [pc, #12]	; (800523c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	20000044 	.word	0x20000044

08005240 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2222      	movs	r2, #34	; 0x22
 800524c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 800524e:	4b03      	ldr	r3, [pc, #12]	; (800525c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000068 	.word	0x20000068

08005260 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2222      	movs	r2, #34	; 0x22
 800526c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 800526e:	4b03      	ldr	r3, [pc, #12]	; (800527c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	2000008c 	.word	0x2000008c

08005280 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005292:	2200      	movs	r2, #0
 8005294:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	220a      	movs	r2, #10
 80052b0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80052b2:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	200000bc 	.word	0x200000bc

080052c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80052d8:	2303      	movs	r3, #3
 80052da:	e01f      	b.n	800531c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	79fa      	ldrb	r2, [r7, #7]
 800530e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f001 fc19 	bl	8006b48 <USBD_LL_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]

  return ret;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005338:	2303      	movs	r3, #3
 800533a:	e016      	b.n	800536a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	f107 020e 	add.w	r2, r7, #14
 800535c:	4610      	mov	r0, r2
 800535e:	4798      	blx	r3
 8005360:	4602      	mov	r2, r0
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fc2e 	bl	8006bdc <USBD_LL_Start>
 8005380:	4603      	mov	r3, r0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053ac:	2303      	movs	r3, #3
 80053ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	4611      	mov	r1, r2
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	4611      	mov	r1, r2
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	4798      	blx	r3
  }

  return USBD_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	4618      	mov	r0, r3
 800541c:	f000 ffba 	bl	8006394 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	2b02      	cmp	r3, #2
 8005442:	d01a      	beq.n	800547a <USBD_LL_SetupStage+0x72>
 8005444:	2b02      	cmp	r3, #2
 8005446:	d822      	bhi.n	800548e <USBD_LL_SetupStage+0x86>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <USBD_LL_SetupStage+0x4a>
 800544c:	2b01      	cmp	r3, #1
 800544e:	d00a      	beq.n	8005466 <USBD_LL_SetupStage+0x5e>
 8005450:	e01d      	b.n	800548e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005458:	4619      	mov	r1, r3
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fa62 	bl	8005924 <USBD_StdDevReq>
 8005460:	4603      	mov	r3, r0
 8005462:	73fb      	strb	r3, [r7, #15]
      break;
 8005464:	e020      	b.n	80054a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fac6 	bl	8005a00 <USBD_StdItfReq>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]
      break;
 8005478:	e016      	b.n	80054a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fb05 	bl	8005a92 <USBD_StdEPReq>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e00c      	b.n	80054a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005494:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005498:	b2db      	uxtb	r3, r3
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f001 fc43 	bl	8006d28 <USBD_LL_StallEP>
 80054a2:	4603      	mov	r3, r0
 80054a4:	73fb      	strb	r3, [r7, #15]
      break;
 80054a6:	bf00      	nop
  }

  return ret;
 80054a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b086      	sub	sp, #24
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	460b      	mov	r3, r1
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80054c0:	7afb      	ldrb	r3, [r7, #11]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d138      	bne.n	8005538 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054d4:	2b03      	cmp	r3, #3
 80054d6:	d14a      	bne.n	800556e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d913      	bls.n	800550c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	1ad2      	subs	r2, r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	4293      	cmp	r3, r2
 80054fc:	bf28      	it	cs
 80054fe:	4613      	movcs	r3, r2
 8005500:	461a      	mov	r2, r3
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f001 f81c 	bl	8006542 <USBD_CtlContinueRx>
 800550a:	e030      	b.n	800556e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d10b      	bne.n	8005530 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f001 f817 	bl	8006564 <USBD_CtlSendStatus>
 8005536:	e01a      	b.n	800556e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b03      	cmp	r3, #3
 8005542:	d114      	bne.n	800556e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00e      	beq.n	800556e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	7afa      	ldrb	r2, [r7, #11]
 800555a:	4611      	mov	r1, r2
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	4798      	blx	r3
 8005560:	4603      	mov	r3, r0
 8005562:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800556a:	7dfb      	ldrb	r3, [r7, #23]
 800556c:	e000      	b.n	8005570 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	460b      	mov	r3, r1
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005586:	7afb      	ldrb	r3, [r7, #11]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d16b      	bne.n	8005664 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3314      	adds	r3, #20
 8005590:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005598:	2b02      	cmp	r3, #2
 800559a:	d156      	bne.n	800564a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d914      	bls.n	80055d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	1ad2      	subs	r2, r2, r3
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	461a      	mov	r2, r3
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 ffae 	bl	8006520 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055c4:	2300      	movs	r3, #0
 80055c6:	2200      	movs	r2, #0
 80055c8:	2100      	movs	r1, #0
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f001 fcb2 	bl	8006f34 <USBD_LL_PrepareReceive>
 80055d0:	e03b      	b.n	800564a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d11c      	bne.n	8005618 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d316      	bcc.n	8005618 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d20f      	bcs.n	8005618 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055f8:	2200      	movs	r2, #0
 80055fa:	2100      	movs	r1, #0
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 ff8f 	bl	8006520 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800560a:	2300      	movs	r3, #0
 800560c:	2200      	movs	r2, #0
 800560e:	2100      	movs	r1, #0
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f001 fc8f 	bl	8006f34 <USBD_LL_PrepareReceive>
 8005616:	e018      	b.n	800564a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b03      	cmp	r3, #3
 8005622:	d10b      	bne.n	800563c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800563c:	2180      	movs	r1, #128	; 0x80
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f001 fb72 	bl	8006d28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 ffa0 	bl	800658a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d122      	bne.n	800569a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f7ff fe98 	bl	800538a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005662:	e01a      	b.n	800569a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b03      	cmp	r3, #3
 800566e:	d114      	bne.n	800569a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	7afa      	ldrb	r2, [r7, #11]
 8005686:	4611      	mov	r1, r2
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	4798      	blx	r3
 800568c:	4603      	mov	r3, r0
 800568e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
 8005698:	e000      	b.n	800569c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e02f      	b.n	8005738 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00f      	beq.n	8005702 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6852      	ldr	r2, [r2, #4]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	4611      	mov	r1, r2
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005702:	2340      	movs	r3, #64	; 0x40
 8005704:	2200      	movs	r2, #0
 8005706:	2100      	movs	r1, #0
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 fa99 	bl	8006c40 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2240      	movs	r2, #64	; 0x40
 800571a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	2200      	movs	r2, #0
 8005722:	2180      	movs	r1, #128	; 0x80
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 fa8b 	bl	8006c40 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2240      	movs	r2, #64	; 0x40
 8005734:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800576e:	b2da      	uxtb	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2204      	movs	r2, #4
 800577a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b04      	cmp	r3, #4
 800579e:	d106      	bne.n	80057ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e012      	b.n	80057f8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b03      	cmp	r3, #3
 80057dc:	d10b      	bne.n	80057f6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005816:	2303      	movs	r3, #3
 8005818:	e014      	b.n	8005844 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d10d      	bne.n	8005842 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	4611      	mov	r1, r2
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005862:	2303      	movs	r3, #3
 8005864:	e014      	b.n	8005890 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d10d      	bne.n	800588e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	78fa      	ldrb	r2, [r7, #3]
 8005888:	4611      	mov	r1, r2
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6852      	ldr	r2, [r2, #4]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	4611      	mov	r1, r2
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	4798      	blx	r3
  }

  return USBD_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3301      	adds	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005904:	8a3b      	ldrh	r3, [r7, #16]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	b21a      	sxth	r2, r3
 800590a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800590e:	4313      	orrs	r3, r2
 8005910:	b21b      	sxth	r3, r3
 8005912:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005914:	89fb      	ldrh	r3, [r7, #14]
}
 8005916:	4618      	mov	r0, r3
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d005      	beq.n	800594a <USBD_StdDevReq+0x26>
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d853      	bhi.n	80059ea <USBD_StdDevReq+0xc6>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <USBD_StdDevReq+0x3a>
 8005946:	2b20      	cmp	r3, #32
 8005948:	d14f      	bne.n	80059ea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
 8005958:	4603      	mov	r3, r0
 800595a:	73fb      	strb	r3, [r7, #15]
      break;
 800595c:	e04a      	b.n	80059f4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b09      	cmp	r3, #9
 8005964:	d83b      	bhi.n	80059de <USBD_StdDevReq+0xba>
 8005966:	a201      	add	r2, pc, #4	; (adr r2, 800596c <USBD_StdDevReq+0x48>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	080059c1 	.word	0x080059c1
 8005970:	080059d5 	.word	0x080059d5
 8005974:	080059df 	.word	0x080059df
 8005978:	080059cb 	.word	0x080059cb
 800597c:	080059df 	.word	0x080059df
 8005980:	0800599f 	.word	0x0800599f
 8005984:	08005995 	.word	0x08005995
 8005988:	080059df 	.word	0x080059df
 800598c:	080059b7 	.word	0x080059b7
 8005990:	080059a9 	.word	0x080059a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f9de 	bl	8005d58 <USBD_GetDescriptor>
          break;
 800599c:	e024      	b.n	80059e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fb6d 	bl	8006080 <USBD_SetAddress>
          break;
 80059a6:	e01f      	b.n	80059e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fbac 	bl	8006108 <USBD_SetConfig>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]
          break;
 80059b4:	e018      	b.n	80059e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fc4b 	bl	8006254 <USBD_GetConfig>
          break;
 80059be:	e013      	b.n	80059e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fc7c 	bl	80062c0 <USBD_GetStatus>
          break;
 80059c8:	e00e      	b.n	80059e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fcab 	bl	8006328 <USBD_SetFeature>
          break;
 80059d2:	e009      	b.n	80059e8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fcba 	bl	8006350 <USBD_ClrFeature>
          break;
 80059dc:	e004      	b.n	80059e8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fd11 	bl	8006408 <USBD_CtlError>
          break;
 80059e6:	bf00      	nop
      }
      break;
 80059e8:	e004      	b.n	80059f4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fd0b 	bl	8006408 <USBD_CtlError>
      break;
 80059f2:	bf00      	nop
  }

  return ret;
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop

08005a00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d005      	beq.n	8005a26 <USBD_StdItfReq+0x26>
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d82f      	bhi.n	8005a7e <USBD_StdItfReq+0x7e>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <USBD_StdItfReq+0x26>
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d12b      	bne.n	8005a7e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d81d      	bhi.n	8005a70 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	889b      	ldrh	r3, [r3, #4]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d813      	bhi.n	8005a66 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	88db      	ldrh	r3, [r3, #6]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d110      	bne.n	8005a7a <USBD_StdItfReq+0x7a>
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10d      	bne.n	8005a7a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fd80 	bl	8006564 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a64:	e009      	b.n	8005a7a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fccd 	bl	8006408 <USBD_CtlError>
          break;
 8005a6e:	e004      	b.n	8005a7a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005a70:	6839      	ldr	r1, [r7, #0]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fcc8 	bl	8006408 <USBD_CtlError>
          break;
 8005a78:	e000      	b.n	8005a7c <USBD_StdItfReq+0x7c>
          break;
 8005a7a:	bf00      	nop
      }
      break;
 8005a7c:	e004      	b.n	8005a88 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fcc1 	bl	8006408 <USBD_CtlError>
      break;
 8005a86:	bf00      	nop
  }

  return ret;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	889b      	ldrh	r3, [r3, #4]
 8005aa4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d007      	beq.n	8005ac2 <USBD_StdEPReq+0x30>
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	f200 8145 	bhi.w	8005d42 <USBD_StdEPReq+0x2b0>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00c      	beq.n	8005ad6 <USBD_StdEPReq+0x44>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	f040 8140 	bne.w	8005d42 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad4:	e13a      	b.n	8005d4c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d007      	beq.n	8005aee <USBD_StdEPReq+0x5c>
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	f300 8129 	bgt.w	8005d36 <USBD_StdEPReq+0x2a4>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d07f      	beq.n	8005be8 <USBD_StdEPReq+0x156>
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d03c      	beq.n	8005b66 <USBD_StdEPReq+0xd4>
 8005aec:	e123      	b.n	8005d36 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d002      	beq.n	8005b00 <USBD_StdEPReq+0x6e>
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d016      	beq.n	8005b2c <USBD_StdEPReq+0x9a>
 8005afe:	e02c      	b.n	8005b5a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00d      	beq.n	8005b22 <USBD_StdEPReq+0x90>
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	2b80      	cmp	r3, #128	; 0x80
 8005b0a:	d00a      	beq.n	8005b22 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 f909 	bl	8006d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f905 	bl	8006d28 <USBD_LL_StallEP>
 8005b1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b20:	e020      	b.n	8005b64 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fc6f 	bl	8006408 <USBD_CtlError>
              break;
 8005b2a:	e01b      	b.n	8005b64 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	885b      	ldrh	r3, [r3, #2]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10e      	bne.n	8005b52 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <USBD_StdEPReq+0xc0>
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d008      	beq.n	8005b52 <USBD_StdEPReq+0xc0>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	88db      	ldrh	r3, [r3, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 f8eb 	bl	8006d28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fd06 	bl	8006564 <USBD_CtlSendStatus>

              break;
 8005b58:	e004      	b.n	8005b64 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fc53 	bl	8006408 <USBD_CtlError>
              break;
 8005b62:	bf00      	nop
          }
          break;
 8005b64:	e0ec      	b.n	8005d40 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d002      	beq.n	8005b78 <USBD_StdEPReq+0xe6>
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d016      	beq.n	8005ba4 <USBD_StdEPReq+0x112>
 8005b76:	e030      	b.n	8005bda <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b78:	7bbb      	ldrb	r3, [r7, #14]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00d      	beq.n	8005b9a <USBD_StdEPReq+0x108>
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d00a      	beq.n	8005b9a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b84:	7bbb      	ldrb	r3, [r7, #14]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 f8cd 	bl	8006d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 f8c9 	bl	8006d28 <USBD_LL_StallEP>
 8005b96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b98:	e025      	b.n	8005be6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fc33 	bl	8006408 <USBD_CtlError>
              break;
 8005ba2:	e020      	b.n	8005be6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	885b      	ldrh	r3, [r3, #2]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11b      	bne.n	8005be4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 f8ea 	bl	8006d94 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fccf 	bl	8006564 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005bd8:	e004      	b.n	8005be4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fc13 	bl	8006408 <USBD_CtlError>
              break;
 8005be2:	e000      	b.n	8005be6 <USBD_StdEPReq+0x154>
              break;
 8005be4:	bf00      	nop
          }
          break;
 8005be6:	e0ab      	b.n	8005d40 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d002      	beq.n	8005bfa <USBD_StdEPReq+0x168>
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d032      	beq.n	8005c5e <USBD_StdEPReq+0x1cc>
 8005bf8:	e097      	b.n	8005d2a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <USBD_StdEPReq+0x17e>
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d004      	beq.n	8005c10 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fbfd 	bl	8006408 <USBD_CtlError>
                break;
 8005c0e:	e091      	b.n	8005d34 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da0b      	bge.n	8005c30 <USBD_StdEPReq+0x19e>
 8005c18:	7bbb      	ldrb	r3, [r7, #14]
 8005c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	3310      	adds	r3, #16
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	e00b      	b.n	8005c48 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c30:	7bbb      	ldrb	r3, [r7, #14]
 8005c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4413      	add	r3, r2
 8005c46:	3304      	adds	r3, #4
 8005c48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2202      	movs	r2, #2
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fc47 	bl	80064ea <USBD_CtlSendData>
              break;
 8005c5c:	e06a      	b.n	8005d34 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	da11      	bge.n	8005c8a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c66:	7bbb      	ldrb	r3, [r7, #14]
 8005c68:	f003 020f 	and.w	r2, r3, #15
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	3324      	adds	r3, #36	; 0x24
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d117      	bne.n	8005cb0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fbc0 	bl	8006408 <USBD_CtlError>
                  break;
 8005c88:	e054      	b.n	8005d34 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c8a:	7bbb      	ldrb	r3, [r7, #14]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d104      	bne.n	8005cb0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fbad 	bl	8006408 <USBD_CtlError>
                  break;
 8005cae:	e041      	b.n	8005d34 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da0b      	bge.n	8005cd0 <USBD_StdEPReq+0x23e>
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	3310      	adds	r3, #16
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	3304      	adds	r3, #4
 8005cce:	e00b      	b.n	8005ce8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cd0:	7bbb      	ldrb	r3, [r7, #14]
 8005cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <USBD_StdEPReq+0x264>
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d103      	bne.n	8005cfe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	e00e      	b.n	8005d1c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f001 f87c 	bl	8006e00 <USBD_LL_IsStallEP>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e002      	b.n	8005d1c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	4619      	mov	r1, r3
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fbe1 	bl	80064ea <USBD_CtlSendData>
              break;
 8005d28:	e004      	b.n	8005d34 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fb6b 	bl	8006408 <USBD_CtlError>
              break;
 8005d32:	bf00      	nop
          }
          break;
 8005d34:	e004      	b.n	8005d40 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fb65 	bl	8006408 <USBD_CtlError>
          break;
 8005d3e:	bf00      	nop
      }
      break;
 8005d40:	e004      	b.n	8005d4c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fb5f 	bl	8006408 <USBD_CtlError>
      break;
 8005d4a:	bf00      	nop
  }

  return ret;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	2b0e      	cmp	r3, #14
 8005d7a:	f200 8152 	bhi.w	8006022 <USBD_GetDescriptor+0x2ca>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <USBD_GetDescriptor+0x2c>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005df5 	.word	0x08005df5
 8005d88:	08005e0d 	.word	0x08005e0d
 8005d8c:	08005e4d 	.word	0x08005e4d
 8005d90:	08006023 	.word	0x08006023
 8005d94:	08006023 	.word	0x08006023
 8005d98:	08005fc3 	.word	0x08005fc3
 8005d9c:	08005fef 	.word	0x08005fef
 8005da0:	08006023 	.word	0x08006023
 8005da4:	08006023 	.word	0x08006023
 8005da8:	08006023 	.word	0x08006023
 8005dac:	08006023 	.word	0x08006023
 8005db0:	08006023 	.word	0x08006023
 8005db4:	08006023 	.word	0x08006023
 8005db8:	08006023 	.word	0x08006023
 8005dbc:	08005dc1 	.word	0x08005dc1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00b      	beq.n	8005de4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	7c12      	ldrb	r2, [r2, #16]
 8005dd8:	f107 0108 	add.w	r1, r7, #8
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4798      	blx	r3
 8005de0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005de2:	e126      	b.n	8006032 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fb0e 	bl	8006408 <USBD_CtlError>
        err++;
 8005dec:	7afb      	ldrb	r3, [r7, #11]
 8005dee:	3301      	adds	r3, #1
 8005df0:	72fb      	strb	r3, [r7, #11]
      break;
 8005df2:	e11e      	b.n	8006032 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	7c12      	ldrb	r2, [r2, #16]
 8005e00:	f107 0108 	add.w	r1, r7, #8
 8005e04:	4610      	mov	r0, r2
 8005e06:	4798      	blx	r3
 8005e08:	60f8      	str	r0, [r7, #12]
      break;
 8005e0a:	e112      	b.n	8006032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7c1b      	ldrb	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f107 0208 	add.w	r2, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e2e:	e100      	b.n	8006032 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	f107 0208 	add.w	r2, r7, #8
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
 8005e40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	2202      	movs	r2, #2
 8005e48:	701a      	strb	r2, [r3, #0]
      break;
 8005e4a:	e0f2      	b.n	8006032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	885b      	ldrh	r3, [r3, #2]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b05      	cmp	r3, #5
 8005e54:	f200 80ac 	bhi.w	8005fb0 <USBD_GetDescriptor+0x258>
 8005e58:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <USBD_GetDescriptor+0x108>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e79 	.word	0x08005e79
 8005e64:	08005ead 	.word	0x08005ead
 8005e68:	08005ee1 	.word	0x08005ee1
 8005e6c:	08005f15 	.word	0x08005f15
 8005e70:	08005f49 	.word	0x08005f49
 8005e74:	08005f7d 	.word	0x08005f7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	7c12      	ldrb	r2, [r2, #16]
 8005e90:	f107 0108 	add.w	r1, r7, #8
 8005e94:	4610      	mov	r0, r2
 8005e96:	4798      	blx	r3
 8005e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e9a:	e091      	b.n	8005fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fab2 	bl	8006408 <USBD_CtlError>
            err++;
 8005ea4:	7afb      	ldrb	r3, [r7, #11]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8005eaa:	e089      	b.n	8005fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7c12      	ldrb	r2, [r2, #16]
 8005ec4:	f107 0108 	add.w	r1, r7, #8
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
 8005ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ece:	e077      	b.n	8005fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa98 	bl	8006408 <USBD_CtlError>
            err++;
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	3301      	adds	r3, #1
 8005edc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ede:	e06f      	b.n	8005fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	7c12      	ldrb	r2, [r2, #16]
 8005ef8:	f107 0108 	add.w	r1, r7, #8
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
 8005f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f02:	e05d      	b.n	8005fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa7e 	bl	8006408 <USBD_CtlError>
            err++;
 8005f0c:	7afb      	ldrb	r3, [r7, #11]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	72fb      	strb	r3, [r7, #11]
          break;
 8005f12:	e055      	b.n	8005fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00b      	beq.n	8005f38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	7c12      	ldrb	r2, [r2, #16]
 8005f2c:	f107 0108 	add.w	r1, r7, #8
 8005f30:	4610      	mov	r0, r2
 8005f32:	4798      	blx	r3
 8005f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f36:	e043      	b.n	8005fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa64 	bl	8006408 <USBD_CtlError>
            err++;
 8005f40:	7afb      	ldrb	r3, [r7, #11]
 8005f42:	3301      	adds	r3, #1
 8005f44:	72fb      	strb	r3, [r7, #11]
          break;
 8005f46:	e03b      	b.n	8005fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00b      	beq.n	8005f6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	7c12      	ldrb	r2, [r2, #16]
 8005f60:	f107 0108 	add.w	r1, r7, #8
 8005f64:	4610      	mov	r0, r2
 8005f66:	4798      	blx	r3
 8005f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f6a:	e029      	b.n	8005fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa4a 	bl	8006408 <USBD_CtlError>
            err++;
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	3301      	adds	r3, #1
 8005f78:	72fb      	strb	r3, [r7, #11]
          break;
 8005f7a:	e021      	b.n	8005fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	7c12      	ldrb	r2, [r2, #16]
 8005f94:	f107 0108 	add.w	r1, r7, #8
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4798      	blx	r3
 8005f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9e:	e00f      	b.n	8005fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fa30 	bl	8006408 <USBD_CtlError>
            err++;
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	3301      	adds	r3, #1
 8005fac:	72fb      	strb	r3, [r7, #11]
          break;
 8005fae:	e007      	b.n	8005fc0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa28 	bl	8006408 <USBD_CtlError>
          err++;
 8005fb8:	7afb      	ldrb	r3, [r7, #11]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005fbe:	bf00      	nop
      }
      break;
 8005fc0:	e037      	b.n	8006032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7c1b      	ldrb	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	f107 0208 	add.w	r2, r7, #8
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4798      	blx	r3
 8005fda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fdc:	e029      	b.n	8006032 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fa11 	bl	8006408 <USBD_CtlError>
        err++;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	72fb      	strb	r3, [r7, #11]
      break;
 8005fec:	e021      	b.n	8006032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7c1b      	ldrb	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffe:	f107 0208 	add.w	r2, r7, #8
 8006002:	4610      	mov	r0, r2
 8006004:	4798      	blx	r3
 8006006:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	2207      	movs	r2, #7
 800600e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006010:	e00f      	b.n	8006032 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006012:	6839      	ldr	r1, [r7, #0]
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9f7 	bl	8006408 <USBD_CtlError>
        err++;
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	3301      	adds	r3, #1
 800601e:	72fb      	strb	r3, [r7, #11]
      break;
 8006020:	e007      	b.n	8006032 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9ef 	bl	8006408 <USBD_CtlError>
      err++;
 800602a:	7afb      	ldrb	r3, [r7, #11]
 800602c:	3301      	adds	r3, #1
 800602e:	72fb      	strb	r3, [r7, #11]
      break;
 8006030:	bf00      	nop
  }

  if (err != 0U)
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11e      	bne.n	8006076 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	88db      	ldrh	r3, [r3, #6]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d016      	beq.n	800606e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006040:	893b      	ldrh	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88da      	ldrh	r2, [r3, #6]
 800604a:	893b      	ldrh	r3, [r7, #8]
 800604c:	4293      	cmp	r3, r2
 800604e:	bf28      	it	cs
 8006050:	4613      	movcs	r3, r2
 8006052:	b29b      	uxth	r3, r3
 8006054:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006056:	893b      	ldrh	r3, [r7, #8]
 8006058:	461a      	mov	r2, r3
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fa44 	bl	80064ea <USBD_CtlSendData>
 8006062:	e009      	b.n	8006078 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006064:	6839      	ldr	r1, [r7, #0]
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f9ce 	bl	8006408 <USBD_CtlError>
 800606c:	e004      	b.n	8006078 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa78 	bl	8006564 <USBD_CtlSendStatus>
 8006074:	e000      	b.n	8006078 <USBD_GetDescriptor+0x320>
    return;
 8006076:	bf00      	nop
  }
}
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop

08006080 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	889b      	ldrh	r3, [r3, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d131      	bne.n	80060f6 <USBD_SetAddress+0x76>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	88db      	ldrh	r3, [r3, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d12d      	bne.n	80060f6 <USBD_SetAddress+0x76>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	885b      	ldrh	r3, [r3, #2]
 800609e:	2b7f      	cmp	r3, #127	; 0x7f
 80060a0:	d829      	bhi.n	80060f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d104      	bne.n	80060c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9a3 	bl	8006408 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	e01d      	b.n	8006100 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	7bfa      	ldrb	r2, [r7, #15]
 80060c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fec1 	bl	8006e58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa44 	bl	8006564 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2202      	movs	r2, #2
 80060e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ea:	e009      	b.n	8006100 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f4:	e004      	b.n	8006100 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f985 	bl	8006408 <USBD_CtlError>
  }
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	885b      	ldrh	r3, [r3, #2]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	4b4c      	ldr	r3, [pc, #304]	; (8006250 <USBD_SetConfig+0x148>)
 800611e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006120:	4b4b      	ldr	r3, [pc, #300]	; (8006250 <USBD_SetConfig+0x148>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d905      	bls.n	8006134 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f96c 	bl	8006408 <USBD_CtlError>
    return USBD_FAIL;
 8006130:	2303      	movs	r3, #3
 8006132:	e088      	b.n	8006246 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d002      	beq.n	8006146 <USBD_SetConfig+0x3e>
 8006140:	2b03      	cmp	r3, #3
 8006142:	d025      	beq.n	8006190 <USBD_SetConfig+0x88>
 8006144:	e071      	b.n	800622a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006146:	4b42      	ldr	r3, [pc, #264]	; (8006250 <USBD_SetConfig+0x148>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01c      	beq.n	8006188 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800614e:	4b40      	ldr	r3, [pc, #256]	; (8006250 <USBD_SetConfig+0x148>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006158:	4b3d      	ldr	r3, [pc, #244]	; (8006250 <USBD_SetConfig+0x148>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff f91e 	bl	80053a0 <USBD_SetClassConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f949 	bl	8006408 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006176:	e065      	b.n	8006244 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f9f3 	bl	8006564 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2203      	movs	r2, #3
 8006182:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006186:	e05d      	b.n	8006244 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 f9eb 	bl	8006564 <USBD_CtlSendStatus>
      break;
 800618e:	e059      	b.n	8006244 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006190:	4b2f      	ldr	r3, [pc, #188]	; (8006250 <USBD_SetConfig+0x148>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d112      	bne.n	80061be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80061a0:	4b2b      	ldr	r3, [pc, #172]	; (8006250 <USBD_SetConfig+0x148>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061aa:	4b29      	ldr	r3, [pc, #164]	; (8006250 <USBD_SetConfig+0x148>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff f911 	bl	80053d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f9d4 	bl	8006564 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061bc:	e042      	b.n	8006244 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80061be:	4b24      	ldr	r3, [pc, #144]	; (8006250 <USBD_SetConfig+0x148>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d02a      	beq.n	8006222 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff f8ff 	bl	80053d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80061da:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <USBD_SetConfig+0x148>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061e4:	4b1a      	ldr	r3, [pc, #104]	; (8006250 <USBD_SetConfig+0x148>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff f8d8 	bl	80053a0 <USBD_SetClassConfig>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00f      	beq.n	800621a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f903 	bl	8006408 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff f8e4 	bl	80053d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006218:	e014      	b.n	8006244 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f9a2 	bl	8006564 <USBD_CtlSendStatus>
      break;
 8006220:	e010      	b.n	8006244 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f99e 	bl	8006564 <USBD_CtlSendStatus>
      break;
 8006228:	e00c      	b.n	8006244 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8eb 	bl	8006408 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <USBD_SetConfig+0x148>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff f8cd 	bl	80053d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800623e:	2303      	movs	r3, #3
 8006240:	73fb      	strb	r3, [r7, #15]
      break;
 8006242:	bf00      	nop
  }

  return ret;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000198 	.word	0x20000198

08006254 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	88db      	ldrh	r3, [r3, #6]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d004      	beq.n	8006270 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f8cd 	bl	8006408 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800626e:	e023      	b.n	80062b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	dc02      	bgt.n	8006282 <USBD_GetConfig+0x2e>
 800627c:	2b00      	cmp	r3, #0
 800627e:	dc03      	bgt.n	8006288 <USBD_GetConfig+0x34>
 8006280:	e015      	b.n	80062ae <USBD_GetConfig+0x5a>
 8006282:	2b03      	cmp	r3, #3
 8006284:	d00b      	beq.n	800629e <USBD_GetConfig+0x4a>
 8006286:	e012      	b.n	80062ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3308      	adds	r3, #8
 8006292:	2201      	movs	r2, #1
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f927 	bl	80064ea <USBD_CtlSendData>
        break;
 800629c:	e00c      	b.n	80062b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	2201      	movs	r2, #1
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f91f 	bl	80064ea <USBD_CtlSendData>
        break;
 80062ac:	e004      	b.n	80062b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f8a9 	bl	8006408 <USBD_CtlError>
        break;
 80062b6:	bf00      	nop
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d81e      	bhi.n	8006316 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	88db      	ldrh	r3, [r3, #6]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d004      	beq.n	80062ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f890 	bl	8006408 <USBD_CtlError>
        break;
 80062e8:	e01a      	b.n	8006320 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f043 0202 	orr.w	r2, r3, #2
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	330c      	adds	r3, #12
 800630a:	2202      	movs	r2, #2
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8eb 	bl	80064ea <USBD_CtlSendData>
      break;
 8006314:	e004      	b.n	8006320 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f875 	bl	8006408 <USBD_CtlError>
      break;
 800631e:	bf00      	nop
  }
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	885b      	ldrh	r3, [r3, #2]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d106      	bne.n	8006348 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f90e 	bl	8006564 <USBD_CtlSendStatus>
  }
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006360:	b2db      	uxtb	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	2b02      	cmp	r3, #2
 8006366:	d80b      	bhi.n	8006380 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	885b      	ldrh	r3, [r3, #2]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d10c      	bne.n	800638a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f8f3 	bl	8006564 <USBD_CtlSendStatus>
      }
      break;
 800637e:	e004      	b.n	800638a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f840 	bl	8006408 <USBD_CtlError>
      break;
 8006388:	e000      	b.n	800638c <USBD_ClrFeature+0x3c>
      break;
 800638a:	bf00      	nop
  }
}
 800638c:	bf00      	nop
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	781a      	ldrb	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff fa91 	bl	80058e6 <SWAPBYTE>
 80063c4:	4603      	mov	r3, r0
 80063c6:	461a      	mov	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3301      	adds	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f7ff fa84 	bl	80058e6 <SWAPBYTE>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f7ff fa77 	bl	80058e6 <SWAPBYTE>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	80da      	strh	r2, [r3, #6]
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006412:	2180      	movs	r1, #128	; 0x80
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fc87 	bl	8006d28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800641a:	2100      	movs	r1, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fc83 	bl	8006d28 <USBD_LL_StallEP>
}
 8006422:	bf00      	nop
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b086      	sub	sp, #24
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d036      	beq.n	80064ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006444:	6938      	ldr	r0, [r7, #16]
 8006446:	f000 f836 	bl	80064b6 <USBD_GetLen>
 800644a:	4603      	mov	r3, r0
 800644c:	3301      	adds	r3, #1
 800644e:	b29b      	uxth	r3, r3
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4413      	add	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	701a      	strb	r2, [r3, #0]
  idx++;
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	3301      	adds	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	4413      	add	r3, r2
 8006470:	2203      	movs	r2, #3
 8006472:	701a      	strb	r2, [r3, #0]
  idx++;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	3301      	adds	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800647a:	e013      	b.n	80064a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800647c:	7dfb      	ldrb	r3, [r7, #23]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	4413      	add	r3, r2
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	3301      	adds	r3, #1
 800648c:	613b      	str	r3, [r7, #16]
    idx++;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	3301      	adds	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	4413      	add	r3, r2
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
    idx++;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	3301      	adds	r3, #1
 80064a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e7      	bne.n	800647c <USBD_GetString+0x52>
 80064ac:	e000      	b.n	80064b0 <USBD_GetString+0x86>
    return;
 80064ae:	bf00      	nop
  }
}
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80064c6:	e005      	b.n	80064d4 <USBD_GetLen+0x1e>
  {
    len++;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	3301      	adds	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	3301      	adds	r3, #1
 80064d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f5      	bne.n	80064c8 <USBD_GetLen+0x12>
  }

  return len;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	60f8      	str	r0, [r7, #12]
 80064f2:	60b9      	str	r1, [r7, #8]
 80064f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2202      	movs	r2, #2
 80064fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	2100      	movs	r1, #0
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fcd7 	bl	8006ec4 <USBD_LL_Transmit>

  return USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	2100      	movs	r1, #0
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 fcc6 	bl	8006ec4 <USBD_LL_Transmit>

  return USBD_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	2100      	movs	r1, #0
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fced 	bl	8006f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2204      	movs	r2, #4
 8006570:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006574:	2300      	movs	r3, #0
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fca2 	bl	8006ec4 <USBD_LL_Transmit>

  return USBD_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b082      	sub	sp, #8
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800659a:	2300      	movs	r3, #0
 800659c:	2200      	movs	r2, #0
 800659e:	2100      	movs	r1, #0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fcc7 	bl	8006f34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065b4:	2200      	movs	r2, #0
 80065b6:	490e      	ldr	r1, [pc, #56]	; (80065f0 <MX_USB_DEVICE_Init+0x40>)
 80065b8:	480e      	ldr	r0, [pc, #56]	; (80065f4 <MX_USB_DEVICE_Init+0x44>)
 80065ba:	f7fe fe83 	bl	80052c4 <USBD_Init>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80065c4:	f7f9 ff0c 	bl	80003e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80065c8:	490b      	ldr	r1, [pc, #44]	; (80065f8 <MX_USB_DEVICE_Init+0x48>)
 80065ca:	480a      	ldr	r0, [pc, #40]	; (80065f4 <MX_USB_DEVICE_Init+0x44>)
 80065cc:	f7fe feaa 	bl	8005324 <USBD_RegisterClass>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80065d6:	f7f9 ff03 	bl	80003e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80065da:	4806      	ldr	r0, [pc, #24]	; (80065f4 <MX_USB_DEVICE_Init+0x44>)
 80065dc:	f7fe fec9 	bl	8005372 <USBD_Start>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80065e6:	f7f9 fefb 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80065ea:	bf00      	nop
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	20000114 	.word	0x20000114
 80065f4:	2000019c 	.word	0x2000019c
 80065f8:	2000000c 	.word	0x2000000c

080065fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	6039      	str	r1, [r7, #0]
 8006606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2212      	movs	r2, #18
 800660c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800660e:	4b03      	ldr	r3, [pc, #12]	; (800661c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	20000134 	.word	0x20000134

08006620 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2204      	movs	r2, #4
 8006630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006632:	4b03      	ldr	r3, [pc, #12]	; (8006640 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20000154 	.word	0x20000154

08006644 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	6039      	str	r1, [r7, #0]
 800664e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d105      	bne.n	8006662 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	4907      	ldr	r1, [pc, #28]	; (8006678 <USBD_FS_ProductStrDescriptor+0x34>)
 800665a:	4808      	ldr	r0, [pc, #32]	; (800667c <USBD_FS_ProductStrDescriptor+0x38>)
 800665c:	f7ff fee5 	bl	800642a <USBD_GetString>
 8006660:	e004      	b.n	800666c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4904      	ldr	r1, [pc, #16]	; (8006678 <USBD_FS_ProductStrDescriptor+0x34>)
 8006666:	4805      	ldr	r0, [pc, #20]	; (800667c <USBD_FS_ProductStrDescriptor+0x38>)
 8006668:	f7ff fedf 	bl	800642a <USBD_GetString>
  }
  return USBD_StrDesc;
 800666c:	4b02      	ldr	r3, [pc, #8]	; (8006678 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	2000046c 	.word	0x2000046c
 800667c:	080070ec 	.word	0x080070ec

08006680 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	6039      	str	r1, [r7, #0]
 800668a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	4904      	ldr	r1, [pc, #16]	; (80066a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006690:	4804      	ldr	r0, [pc, #16]	; (80066a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006692:	f7ff feca 	bl	800642a <USBD_GetString>
  return USBD_StrDesc;
 8006696:	4b02      	ldr	r3, [pc, #8]	; (80066a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	2000046c 	.word	0x2000046c
 80066a4:	08007104 	.word	0x08007104

080066a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	6039      	str	r1, [r7, #0]
 80066b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	221a      	movs	r2, #26
 80066b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066ba:	f000 f855 	bl	8006768 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80066be:	4b02      	ldr	r3, [pc, #8]	; (80066c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	20000158 	.word	0x20000158

080066cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	6039      	str	r1, [r7, #0]
 80066d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	4907      	ldr	r1, [pc, #28]	; (8006700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066e2:	4808      	ldr	r0, [pc, #32]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066e4:	f7ff fea1 	bl	800642a <USBD_GetString>
 80066e8:	e004      	b.n	80066f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	4904      	ldr	r1, [pc, #16]	; (8006700 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066ee:	4805      	ldr	r0, [pc, #20]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066f0:	f7ff fe9b 	bl	800642a <USBD_GetString>
  }
  return USBD_StrDesc;
 80066f4:	4b02      	ldr	r3, [pc, #8]	; (8006700 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	2000046c 	.word	0x2000046c
 8006704:	08007118 	.word	0x08007118

08006708 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	6039      	str	r1, [r7, #0]
 8006712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d105      	bne.n	8006726 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	4907      	ldr	r1, [pc, #28]	; (800673c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800671e:	4808      	ldr	r0, [pc, #32]	; (8006740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006720:	f7ff fe83 	bl	800642a <USBD_GetString>
 8006724:	e004      	b.n	8006730 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	4904      	ldr	r1, [pc, #16]	; (800673c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800672a:	4805      	ldr	r0, [pc, #20]	; (8006740 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800672c:	f7ff fe7d 	bl	800642a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006730:	4b02      	ldr	r3, [pc, #8]	; (800673c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	2000046c 	.word	0x2000046c
 8006740:	08007124 	.word	0x08007124

08006744 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	6039      	str	r1, [r7, #0]
 800674e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	220c      	movs	r2, #12
 8006754:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006756:	4b03      	ldr	r3, [pc, #12]	; (8006764 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	20000148 	.word	0x20000148

08006768 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800676e:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <Get_SerialNum+0x44>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <Get_SerialNum+0x48>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800677a:	4b0e      	ldr	r3, [pc, #56]	; (80067b4 <Get_SerialNum+0x4c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4413      	add	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800678e:	2208      	movs	r2, #8
 8006790:	4909      	ldr	r1, [pc, #36]	; (80067b8 <Get_SerialNum+0x50>)
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f814 	bl	80067c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006798:	2204      	movs	r2, #4
 800679a:	4908      	ldr	r1, [pc, #32]	; (80067bc <Get_SerialNum+0x54>)
 800679c:	68b8      	ldr	r0, [r7, #8]
 800679e:	f000 f80f 	bl	80067c0 <IntToUnicode>
  }
}
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	1fff7590 	.word	0x1fff7590
 80067b0:	1fff7594 	.word	0x1fff7594
 80067b4:	1fff7598 	.word	0x1fff7598
 80067b8:	2000015a 	.word	0x2000015a
 80067bc:	2000016a 	.word	0x2000016a

080067c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067d2:	2300      	movs	r3, #0
 80067d4:	75fb      	strb	r3, [r7, #23]
 80067d6:	e027      	b.n	8006828 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	0f1b      	lsrs	r3, r3, #28
 80067dc:	2b09      	cmp	r3, #9
 80067de:	d80b      	bhi.n	80067f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	0f1b      	lsrs	r3, r3, #28
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4619      	mov	r1, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	440b      	add	r3, r1
 80067f0:	3230      	adds	r2, #48	; 0x30
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	e00a      	b.n	800680e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	0f1b      	lsrs	r3, r3, #28
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	4619      	mov	r1, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	440b      	add	r3, r1
 8006808:	3237      	adds	r2, #55	; 0x37
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	3301      	adds	r3, #1
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4413      	add	r3, r2
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	3301      	adds	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
 8006828:	7dfa      	ldrb	r2, [r7, #23]
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	429a      	cmp	r2, r3
 800682e:	d3d3      	bcc.n	80067d8 <IntToUnicode+0x18>
  }
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b0b0      	sub	sp, #192	; 0xc0
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006848:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	605a      	str	r2, [r3, #4]
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006858:	f107 0318 	add.w	r3, r7, #24
 800685c:	2294      	movs	r2, #148	; 0x94
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fc2f 	bl	80070c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800686e:	d163      	bne.n	8006938 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006874:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800687c:	f107 0318 	add.w	r3, r7, #24
 8006880:	4618      	mov	r0, r3
 8006882:	f7fc faf5 	bl	8002e70 <HAL_RCCEx_PeriphCLKConfig>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800688c:	f7f9 fda8 	bl	80003e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006890:	4b2b      	ldr	r3, [pc, #172]	; (8006940 <HAL_PCD_MspInit+0x100>)
 8006892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006894:	4a2a      	ldr	r2, [pc, #168]	; (8006940 <HAL_PCD_MspInit+0x100>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800689c:	4b28      	ldr	r3, [pc, #160]	; (8006940 <HAL_PCD_MspInit+0x100>)
 800689e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80068ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b0:	2302      	movs	r3, #2
 80068b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068bc:	2303      	movs	r3, #3
 80068be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068c2:	230a      	movs	r3, #10
 80068c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80068cc:	4619      	mov	r1, r3
 80068ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068d2:	f7f9 ffc9 	bl	8000868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068d6:	4b1a      	ldr	r3, [pc, #104]	; (8006940 <HAL_PCD_MspInit+0x100>)
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	4a19      	ldr	r2, [pc, #100]	; (8006940 <HAL_PCD_MspInit+0x100>)
 80068dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068e2:	4b17      	ldr	r3, [pc, #92]	; (8006940 <HAL_PCD_MspInit+0x100>)
 80068e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ee:	4b14      	ldr	r3, [pc, #80]	; (8006940 <HAL_PCD_MspInit+0x100>)
 80068f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d114      	bne.n	8006924 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068fa:	4b11      	ldr	r3, [pc, #68]	; (8006940 <HAL_PCD_MspInit+0x100>)
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	4a10      	ldr	r2, [pc, #64]	; (8006940 <HAL_PCD_MspInit+0x100>)
 8006900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006904:	6593      	str	r3, [r2, #88]	; 0x58
 8006906:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <HAL_PCD_MspInit+0x100>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006912:	f7fb fbf1 	bl	80020f8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <HAL_PCD_MspInit+0x100>)
 8006918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <HAL_PCD_MspInit+0x100>)
 800691c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006920:	6593      	str	r3, [r2, #88]	; 0x58
 8006922:	e001      	b.n	8006928 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006924:	f7fb fbe8 	bl	80020f8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006928:	2200      	movs	r2, #0
 800692a:	2100      	movs	r1, #0
 800692c:	2043      	movs	r0, #67	; 0x43
 800692e:	f7f9 ff64 	bl	80007fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006932:	2043      	movs	r0, #67	; 0x43
 8006934:	f7f9 ff7d 	bl	8000832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006938:	bf00      	nop
 800693a:	37c0      	adds	r7, #192	; 0xc0
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40021000 	.word	0x40021000

08006944 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7fe fd54 	bl	8005408 <USBD_LL_SetupStage>
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800697a:	78fa      	ldrb	r2, [r7, #3]
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	4619      	mov	r1, r3
 8006992:	f7fe fd8e 	bl	80054b2 <USBD_LL_DataOutStage>
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b082      	sub	sp, #8
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80069b0:	78fa      	ldrb	r2, [r7, #3]
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	334c      	adds	r3, #76	; 0x4c
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	4619      	mov	r1, r3
 80069c6:	f7fe fdd7 	bl	8005578 <USBD_LL_DataInStage>
}
 80069ca:	bf00      	nop
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b082      	sub	sp, #8
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe feeb 	bl	80057bc <USBD_LL_SOF>
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d001      	beq.n	8006a06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a02:	f7f9 fced 	bl	80003e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a0c:	7bfa      	ldrb	r2, [r7, #15]
 8006a0e:	4611      	mov	r1, r2
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7fe fe95 	bl	8005740 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe fe41 	bl	80056a4 <USBD_LL_Reset>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fe84 	bl	8005760 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <HAL_PCD_SuspendCallback+0x48>)
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	4a03      	ldr	r2, [pc, #12]	; (8006a74 <HAL_PCD_SuspendCallback+0x48>)
 8006a66:	f043 0306 	orr.w	r3, r3, #6
 8006a6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a92:	f023 0301 	bic.w	r3, r3, #1
 8006a96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006aa0:	4b08      	ldr	r3, [pc, #32]	; (8006ac4 <HAL_PCD_ResumeCallback+0x4c>)
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	4a07      	ldr	r2, [pc, #28]	; (8006ac4 <HAL_PCD_ResumeCallback+0x4c>)
 8006aa6:	f023 0306 	bic.w	r3, r3, #6
 8006aaa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006aac:	f000 fae0 	bl	8007070 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fe68 	bl	800578c <USBD_LL_Resume>
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	e000ed00 	.word	0xe000ed00

08006ac8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	4611      	mov	r1, r2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe feb4 	bl	800584c <USBD_LL_IsoOUTIncomplete>
}
 8006ae4:	bf00      	nop
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fe7c 	bl	8005800 <USBD_LL_IsoINIncomplete>
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe feba 	bl	8005898 <USBD_LL_DevConnected>
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe feb7 	bl	80058ae <USBD_LL_DevDisconnected>
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d139      	bne.n	8006bcc <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b58:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b68:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006b70:	4b19      	ldr	r3, [pc, #100]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b72:	2206      	movs	r2, #6
 8006b74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b76:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b78:	2202      	movs	r2, #2
 8006b7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b7c:	4b16      	ldr	r3, [pc, #88]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b88:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006b8e:	4b12      	ldr	r3, [pc, #72]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b94:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b9a:	4b0f      	ldr	r3, [pc, #60]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ba0:	480d      	ldr	r0, [pc, #52]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006ba2:	f7fa f83d 	bl	8000c20 <HAL_PCD_Init>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006bac:	f7f9 fc18 	bl	80003e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	4809      	ldr	r0, [pc, #36]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006bb4:	f7fb f9a7 	bl	8001f06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006bb8:	2240      	movs	r2, #64	; 0x40
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4806      	ldr	r0, [pc, #24]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006bbe:	f7fb f95b 	bl	8001e78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006bc2:	2280      	movs	r2, #128	; 0x80
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	4804      	ldr	r0, [pc, #16]	; (8006bd8 <USBD_LL_Init+0x90>)
 8006bc8:	f7fb f956 	bl	8001e78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	2000066c 	.word	0x2000066c

08006bdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fa f938 	bl	8000e68 <HAL_PCD_Start>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006bfc:	7bbb      	ldrb	r3, [r7, #14]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d816      	bhi.n	8006c30 <USBD_LL_Start+0x54>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <USBD_LL_Start+0x2c>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c1f 	.word	0x08006c1f
 8006c10:	08006c25 	.word	0x08006c25
 8006c14:	08006c2b 	.word	0x08006c2b
    case HAL_OK :
      usb_status = USBD_OK;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c1c:	e00b      	b.n	8006c36 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	73fb      	strb	r3, [r7, #15]
    break;
 8006c22:	e008      	b.n	8006c36 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
    break;
 8006c28:	e005      	b.n	8006c36 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c2e:	e002      	b.n	8006c36 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006c30:	2303      	movs	r3, #3
 8006c32:	73fb      	strb	r3, [r7, #15]
    break;
 8006c34:	bf00      	nop
  }
  return usb_status;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	4608      	mov	r0, r1
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	70fb      	strb	r3, [r7, #3]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70bb      	strb	r3, [r7, #2]
 8006c56:	4613      	mov	r3, r2
 8006c58:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c68:	78bb      	ldrb	r3, [r7, #2]
 8006c6a:	883a      	ldrh	r2, [r7, #0]
 8006c6c:	78f9      	ldrb	r1, [r7, #3]
 8006c6e:	f7fa fde2 	bl	8001836 <HAL_PCD_EP_Open>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d817      	bhi.n	8006cac <USBD_LL_OpenEP+0x6c>
 8006c7c:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <USBD_LL_OpenEP+0x44>)
 8006c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c82:	bf00      	nop
 8006c84:	08006c95 	.word	0x08006c95
 8006c88:	08006c9b 	.word	0x08006c9b
 8006c8c:	08006ca1 	.word	0x08006ca1
 8006c90:	08006ca7 	.word	0x08006ca7
    case HAL_OK :
      usb_status = USBD_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	73fb      	strb	r3, [r7, #15]
    break;
 8006c98:	e00b      	b.n	8006cb2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c9e:	e008      	b.n	8006cb2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ca4:	e005      	b.n	8006cb2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8006caa:	e002      	b.n	8006cb2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	73fb      	strb	r3, [r7, #15]
    break;
 8006cb0:	bf00      	nop
  }
  return usb_status;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fa fe13 	bl	8001906 <HAL_PCD_EP_Close>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d816      	bhi.n	8006d18 <USBD_LL_CloseEP+0x5c>
 8006cea:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <USBD_LL_CloseEP+0x34>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d07 	.word	0x08006d07
 8006cf8:	08006d0d 	.word	0x08006d0d
 8006cfc:	08006d13 	.word	0x08006d13
    case HAL_OK :
      usb_status = USBD_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
    break;
 8006d04:	e00b      	b.n	8006d1e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d06:	2303      	movs	r3, #3
 8006d08:	73fb      	strb	r3, [r7, #15]
    break;
 8006d0a:	e008      	b.n	8006d1e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d10:	e005      	b.n	8006d1e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	73fb      	strb	r3, [r7, #15]
    break;
 8006d16:	e002      	b.n	8006d1e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d1c:	bf00      	nop
  }
  return usb_status;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	4611      	mov	r1, r2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fa fea2 	bl	8001a90 <HAL_PCD_EP_SetStall>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d816      	bhi.n	8006d84 <USBD_LL_StallEP+0x5c>
 8006d56:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <USBD_LL_StallEP+0x34>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d6d 	.word	0x08006d6d
 8006d60:	08006d73 	.word	0x08006d73
 8006d64:	08006d79 	.word	0x08006d79
 8006d68:	08006d7f 	.word	0x08006d7f
    case HAL_OK :
      usb_status = USBD_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d70:	e00b      	b.n	8006d8a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d72:	2303      	movs	r3, #3
 8006d74:	73fb      	strb	r3, [r7, #15]
    break;
 8006d76:	e008      	b.n	8006d8a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7c:	e005      	b.n	8006d8a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	73fb      	strb	r3, [r7, #15]
    break;
 8006d82:	e002      	b.n	8006d8a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006d84:	2303      	movs	r3, #3
 8006d86:	73fb      	strb	r3, [r7, #15]
    break;
 8006d88:	bf00      	nop
  }
  return usb_status;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	4611      	mov	r1, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fa fece 	bl	8001b54 <HAL_PCD_EP_ClrStall>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d816      	bhi.n	8006df0 <USBD_LL_ClearStallEP+0x5c>
 8006dc2:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <USBD_LL_ClearStallEP+0x34>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006ddf 	.word	0x08006ddf
 8006dd0:	08006de5 	.word	0x08006de5
 8006dd4:	08006deb 	.word	0x08006deb
    case HAL_OK :
      usb_status = USBD_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]
    break;
 8006ddc:	e00b      	b.n	8006df6 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dde:	2303      	movs	r3, #3
 8006de0:	73fb      	strb	r3, [r7, #15]
    break;
 8006de2:	e008      	b.n	8006df6 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e005      	b.n	8006df6 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	73fb      	strb	r3, [r7, #15]
    break;
 8006dee:	e002      	b.n	8006df6 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	73fb      	strb	r3, [r7, #15]
    break;
 8006df4:	bf00      	nop
  }
  return usb_status;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	da0b      	bge.n	8006e34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	4613      	mov	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	333e      	adds	r3, #62	; 0x3e
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	e00b      	b.n	8006e4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e3a:	68f9      	ldr	r1, [r7, #12]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006e4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	4611      	mov	r1, r2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fa fcb8 	bl	80017ec <HAL_PCD_SetAddress>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d816      	bhi.n	8006eb4 <USBD_LL_SetUSBAddress+0x5c>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <USBD_LL_SetUSBAddress+0x34>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006ea3 	.word	0x08006ea3
 8006e94:	08006ea9 	.word	0x08006ea9
 8006e98:	08006eaf 	.word	0x08006eaf
    case HAL_OK :
      usb_status = USBD_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea0:	e00b      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea6:	e008      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8006eac:	e005      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb2:	e002      	b.n	8006eba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb8:	bf00      	nop
  }
  return usb_status;
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006ee2:	7af9      	ldrb	r1, [r7, #11]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	f7fa fd95 	bl	8001a16 <HAL_PCD_EP_Transmit>
 8006eec:	4603      	mov	r3, r0
 8006eee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006ef0:	7dbb      	ldrb	r3, [r7, #22]
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d816      	bhi.n	8006f24 <USBD_LL_Transmit+0x60>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <USBD_LL_Transmit+0x38>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f0d 	.word	0x08006f0d
 8006f00:	08006f13 	.word	0x08006f13
 8006f04:	08006f19 	.word	0x08006f19
 8006f08:	08006f1f 	.word	0x08006f1f
    case HAL_OK :
      usb_status = USBD_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	75fb      	strb	r3, [r7, #23]
    break;
 8006f10:	e00b      	b.n	8006f2a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f12:	2303      	movs	r3, #3
 8006f14:	75fb      	strb	r3, [r7, #23]
    break;
 8006f16:	e008      	b.n	8006f2a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
    break;
 8006f1c:	e005      	b.n	8006f2a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	75fb      	strb	r3, [r7, #23]
    break;
 8006f22:	e002      	b.n	8006f2a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8006f24:	2303      	movs	r3, #3
 8006f26:	75fb      	strb	r3, [r7, #23]
    break;
 8006f28:	bf00      	nop
  }
  return usb_status;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	607a      	str	r2, [r7, #4]
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	460b      	mov	r3, r1
 8006f42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f52:	7af9      	ldrb	r1, [r7, #11]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	f7fa fd1f 	bl	800199a <HAL_PCD_EP_Receive>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006f60:	7dbb      	ldrb	r3, [r7, #22]
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d816      	bhi.n	8006f94 <USBD_LL_PrepareReceive+0x60>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <USBD_LL_PrepareReceive+0x38>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006f7d 	.word	0x08006f7d
 8006f70:	08006f83 	.word	0x08006f83
 8006f74:	08006f89 	.word	0x08006f89
 8006f78:	08006f8f 	.word	0x08006f8f
    case HAL_OK :
      usb_status = USBD_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	75fb      	strb	r3, [r7, #23]
    break;
 8006f80:	e00b      	b.n	8006f9a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f82:	2303      	movs	r3, #3
 8006f84:	75fb      	strb	r3, [r7, #23]
    break;
 8006f86:	e008      	b.n	8006f9a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
    break;
 8006f8c:	e005      	b.n	8006f9a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	75fb      	strb	r3, [r7, #23]
    break;
 8006f92:	e002      	b.n	8006f9a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	75fb      	strb	r3, [r7, #23]
    break;
 8006f98:	bf00      	nop
  }
  return usb_status;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_PCDEx_LPM_Callback+0x18>
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d01f      	beq.n	8006ffa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8006fba:	e03b      	b.n	8007034 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006fc4:	f000 f854 	bl	8007070 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006fc8:	4b1c      	ldr	r3, [pc, #112]	; (800703c <HAL_PCDEx_LPM_Callback+0x98>)
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	; (800703c <HAL_PCDEx_LPM_Callback+0x98>)
 8006fce:	f023 0306 	bic.w	r3, r3, #6
 8006fd2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6812      	ldr	r2, [r2, #0]
 8006fe2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fe6:	f023 0301 	bic.w	r3, r3, #1
 8006fea:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fbca 	bl	800578c <USBD_LL_Resume>
    break;
 8006ff8:	e01c      	b.n	8007034 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fba1 	bl	8005760 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_PCDEx_LPM_Callback+0x98>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	4a04      	ldr	r2, [pc, #16]	; (800703c <HAL_PCDEx_LPM_Callback+0x98>)
 800702c:	f043 0306 	orr.w	r3, r3, #6
 8007030:	6113      	str	r3, [r2, #16]
    break;
 8007032:	bf00      	nop
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	e000ed00 	.word	0xe000ed00

08007040 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007048:	4b03      	ldr	r3, [pc, #12]	; (8007058 <USBD_static_malloc+0x18>)
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000b78 	.word	0x20000b78

0800705c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007074:	f7f9 f8fa 	bl	800026c <SystemClock_Config>
}
 8007078:	bf00      	nop
 800707a:	bd80      	pop	{r7, pc}

0800707c <__libc_init_array>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4d0d      	ldr	r5, [pc, #52]	; (80070b4 <__libc_init_array+0x38>)
 8007080:	4c0d      	ldr	r4, [pc, #52]	; (80070b8 <__libc_init_array+0x3c>)
 8007082:	1b64      	subs	r4, r4, r5
 8007084:	10a4      	asrs	r4, r4, #2
 8007086:	2600      	movs	r6, #0
 8007088:	42a6      	cmp	r6, r4
 800708a:	d109      	bne.n	80070a0 <__libc_init_array+0x24>
 800708c:	4d0b      	ldr	r5, [pc, #44]	; (80070bc <__libc_init_array+0x40>)
 800708e:	4c0c      	ldr	r4, [pc, #48]	; (80070c0 <__libc_init_array+0x44>)
 8007090:	f000 f820 	bl	80070d4 <_init>
 8007094:	1b64      	subs	r4, r4, r5
 8007096:	10a4      	asrs	r4, r4, #2
 8007098:	2600      	movs	r6, #0
 800709a:	42a6      	cmp	r6, r4
 800709c:	d105      	bne.n	80070aa <__libc_init_array+0x2e>
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a4:	4798      	blx	r3
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7ee      	b.n	8007088 <__libc_init_array+0xc>
 80070aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ae:	4798      	blx	r3
 80070b0:	3601      	adds	r6, #1
 80070b2:	e7f2      	b.n	800709a <__libc_init_array+0x1e>
 80070b4:	08007174 	.word	0x08007174
 80070b8:	08007174 	.word	0x08007174
 80070bc:	08007174 	.word	0x08007174
 80070c0:	08007178 	.word	0x08007178

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <_init>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr

080070e0 <_fini>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	bf00      	nop
 80070e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e6:	bc08      	pop	{r3}
 80070e8:	469e      	mov	lr, r3
 80070ea:	4770      	bx	lr
