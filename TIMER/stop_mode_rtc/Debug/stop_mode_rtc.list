
stop_mode_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005618  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080057c4  080057c4  000157c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058cc  080058cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058d4  080058d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000074  08005950  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08005950  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001501d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002714  00000000  00000000  000350c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  000377d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00038a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aef5  00000000  00000000  00039b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014254  00000000  00000000  00064a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108810  00000000  00000000  00078cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001814d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c0  00000000  00000000  0018152c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000074 	.word	0x20000074
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080057ac 	.word	0x080057ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000078 	.word	0x20000078
 80001e8:	080057ac 	.word	0x080057ac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000500:	2b00      	cmp	r3, #0
 8000502:	db0a      	blt.n	800051a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	b2da      	uxtb	r2, r3
 8000508:	490c      	ldr	r1, [pc, #48]	; (800053c <__NVIC_SetPriority+0x4c>)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	0112      	lsls	r2, r2, #4
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	440b      	add	r3, r1
 8000514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000518:	e00a      	b.n	8000530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4908      	ldr	r1, [pc, #32]	; (8000540 <__NVIC_SetPriority+0x50>)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f003 030f 	and.w	r3, r3, #15
 8000526:	3b04      	subs	r3, #4
 8000528:	0112      	lsls	r2, r2, #4
 800052a:	b2d2      	uxtb	r2, r2
 800052c:	440b      	add	r3, r1
 800052e:	761a      	strb	r2, [r3, #24]
}
 8000530:	bf00      	nop
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	e000e100 	.word	0xe000e100
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	3b01      	subs	r3, #1
 8000550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000554:	d301      	bcc.n	800055a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000556:	2301      	movs	r3, #1
 8000558:	e00f      	b.n	800057a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <SysTick_Config+0x40>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3b01      	subs	r3, #1
 8000560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000562:	210f      	movs	r1, #15
 8000564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000568:	f7ff ffc2 	bl	80004f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <SysTick_Config+0x40>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <SysTick_Config+0x40>)
 8000574:	2207      	movs	r2, #7
 8000576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	e000e010 	.word	0xe000e010

08000588 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000598:	d12d      	bne.n	80005f6 <HAL_GPIO_EXTI_Callback+0x6e>
		SystemClock_Config();
 800059a:	f000 f899 	bl	80006d0 <SystemClock_Config>
		HAL_ResumeTick(); //countios opration on intrupts
 800059e:	f000 fe09 	bl	80011b4 <HAL_ResumeTick>

		if (standbyModeFlag == 1) {
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <HAL_GPIO_EXTI_Callback+0x78>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d121      	bne.n	80005f0 <HAL_GPIO_EXTI_Callback+0x68>
			printf("WAKEUP FROM EXTII\r\n");
 80005ac:	4815      	ldr	r0, [pc, #84]	; (8000604 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005ae:	f004 fc6d 	bl	8004e8c <puts>

			printf("Weakup from stop mode\r\n");
 80005b2:	4815      	ldr	r0, [pc, #84]	; (8000608 <HAL_GPIO_EXTI_Callback+0x80>)
 80005b4:	f004 fc6a 	bl	8004e8c <puts>

			standbyTimeout = 10000;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <HAL_GPIO_EXTI_Callback+0x84>)
 80005ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80005be:	601a      	str	r2, [r3, #0]
			lastKeyPressMillis = 0;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <HAL_GPIO_EXTI_Callback+0x88>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
//			standbyModeFlag = 0;
			elapsedTime = 0;
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_GPIO_EXTI_Callback+0x8c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
			milliseconds = 0;
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_GPIO_EXTI_Callback+0x90>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
			initializeTimer();
 80005d2:	f000 faef 	bl	8000bb4 <initializeTimer>
			SysTick_Config(SystemCoreClock / 1000);
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_GPIO_EXTI_Callback+0x94>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_GPIO_EXTI_Callback+0x98>)
 80005dc:	fba2 2303 	umull	r2, r3, r2, r3
 80005e0:	099b      	lsrs	r3, r3, #6
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ffae 	bl	8000544 <SysTick_Config>

		    standbyModeFlag = 0;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_GPIO_EXTI_Callback+0x78>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
			keyPressed = true;
		}
	}
	//when an ISR finishes executing and returns, the microcontroller
	//will not automatically enter the sleep mode
}
 80005ee:	e002      	b.n	80005f6 <HAL_GPIO_EXTI_Callback+0x6e>
			keyPressed = true;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_GPIO_EXTI_Callback+0x9c>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001d8 	.word	0x200001d8
 8000604:	080057c4 	.word	0x080057c4
 8000608:	080057d8 	.word	0x080057d8
 800060c:	20000000 	.word	0x20000000
 8000610:	200001d4 	.word	0x200001d4
 8000614:	200001dc 	.word	0x200001dc
 8000618:	200001d0 	.word	0x200001d0
 800061c:	20000004 	.word	0x20000004
 8000620:	10624dd3 	.word	0x10624dd3
 8000624:	200001e0 	.word	0x200001e0

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fd4d 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f84e 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 fa16 	bl	8000a64 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000638:	f000 f8a0 	bl	800077c <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800063c:	f000 f8ca 	bl	80007d4 <MX_RTC_Init>
  MX_TIM1_Init();
 8000640:	f000 f962 	bl	8000908 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000644:	f000 f9b6 	bl	80009b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	printf("Enter stop mode in 10 sec\r\n");
 8000648:	4819      	ldr	r0, [pc, #100]	; (80006b0 <main+0x88>)
 800064a:	f004 fc1f 	bl	8004e8c <puts>

	initializeTimer();
 800064e:	f000 fab1 	bl	8000bb4 <initializeTimer>
	SysTick_Config(SystemCoreClock / 1000);
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <main+0x8c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <main+0x90>)
 8000658:	fba2 2303 	umull	r2, r3, r2, r3
 800065c:	099b      	lsrs	r3, r3, #6
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff70 	bl	8000544 <SysTick_Config>
//			printf("Weakup from stop mode\r\n");
//			HAL_Delay(200);
//		}

		// Check if a key has been pressed
		if (keyPressed == true) {
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <main+0x94>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d00a      	beq.n	8000684 <main+0x5c>
			// Update the lastKeyPressMillis
			lastKeyPressMillis = millis();
 800066e:	f000 fa7f 	bl	8000b70 <millis>
 8000672:	4603      	mov	r3, r0
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <main+0x98>)
 8000676:	6013      	str	r3, [r2, #0]
			standbyModeFlag = 0; // Reset the standby mode flag
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <main+0x9c>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			keyPressed = false;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <main+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
		}

		// Calculate the elapsed time since the last key press
		elapsedTime = millis() - lastKeyPressMillis;
 8000684:	f000 fa74 	bl	8000b70 <millis>
 8000688:	4602      	mov	r2, r0
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <main+0x98>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <main+0xa0>)
 8000692:	6013      	str	r3, [r2, #0]

		// Check if the elapsed time exceeds the standby timeout and if not in standby mode already
		if (elapsedTime >= standbyTimeout && !standbyModeFlag) {
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <main+0xa0>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <main+0xa4>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3e1      	bcc.n	8000664 <main+0x3c>
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <main+0x9c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1dc      	bne.n	8000664 <main+0x3c>
//			standbyTimeout = 10000;
//			lastKeyPressMillis = 0;
//			standbyModeFlag = 0;
//			elapsedTime = millis() - lastKeyPressMillis;

			enterStopMode();
 80006aa:	f000 fabb 	bl	8000c24 <enterStopMode>
		if (keyPressed == true) {
 80006ae:	e7d9      	b.n	8000664 <main+0x3c>
 80006b0:	080057f0 	.word	0x080057f0
 80006b4:	20000004 	.word	0x20000004
 80006b8:	10624dd3 	.word	0x10624dd3
 80006bc:	200001e0 	.word	0x200001e0
 80006c0:	200001d4 	.word	0x200001d4
 80006c4:	200001d8 	.word	0x200001d8
 80006c8:	200001dc 	.word	0x200001dc
 80006cc:	20000000 	.word	0x20000000

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b096      	sub	sp, #88	; 0x58
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	2244      	movs	r2, #68	; 0x44
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fb5e 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	463b      	mov	r3, r7
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f6:	f001 f873 	bl	80017e0 <HAL_PWREx_ControlVoltageScaling>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000700:	f000 faa4 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000704:	2318      	movs	r3, #24
 8000706:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000714:	2360      	movs	r3, #96	; 0x60
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800071c:	2301      	movs	r3, #1
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000724:	2328      	movs	r3, #40	; 0x28
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f90d 	bl	8001958 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000744:	f000 fa82 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2303      	movs	r3, #3
 800074e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	2104      	movs	r1, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fd12 	bl	800218c <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800076e:	f000 fa6d 	bl	8000c4c <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3758      	adds	r7, #88	; 0x58
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_LPUART1_UART_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_LPUART1_UART_Init+0x50>)
 80007ba:	f003 fd7d 	bl	80042b8 <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 fa42 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000090 	.word	0x20000090
 80007d0:	40008000 	.word	0x40008000

080007d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b092      	sub	sp, #72	; 0x48
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007ea:	2300      	movs	r3, #0
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	222c      	movs	r2, #44	; 0x2c
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fad3 	bl	8004da0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007fa:	4b41      	ldr	r3, [pc, #260]	; (8000900 <MX_RTC_Init+0x12c>)
 80007fc:	4a41      	ldr	r2, [pc, #260]	; (8000904 <MX_RTC_Init+0x130>)
 80007fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000800:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <MX_RTC_Init+0x12c>)
 8000802:	2200      	movs	r2, #0
 8000804:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <MX_RTC_Init+0x12c>)
 8000808:	227f      	movs	r2, #127	; 0x7f
 800080a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800080c:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <MX_RTC_Init+0x12c>)
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_RTC_Init+0x12c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <MX_RTC_Init+0x12c>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800081e:	4b38      	ldr	r3, [pc, #224]	; (8000900 <MX_RTC_Init+0x12c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000824:	4b36      	ldr	r3, [pc, #216]	; (8000900 <MX_RTC_Init+0x12c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800082a:	4835      	ldr	r0, [pc, #212]	; (8000900 <MX_RTC_Init+0x12c>)
 800082c:	f002 fb9c 	bl	8002f68 <HAL_RTC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000836:	f000 fa09 	bl	8000c4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000846:	2300      	movs	r3, #0
 8000848:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000854:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000858:	2201      	movs	r2, #1
 800085a:	4619      	mov	r1, r3
 800085c:	4828      	ldr	r0, [pc, #160]	; (8000900 <MX_RTC_Init+0x12c>)
 800085e:	f002 fbfe 	bl	800305e <HAL_RTC_SetTime>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000868:	f000 f9f0 	bl	8000c4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800086c:	2301      	movs	r3, #1
 800086e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000872:	2301      	movs	r3, #1
 8000874:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000884:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000888:	2201      	movs	r2, #1
 800088a:	4619      	mov	r1, r3
 800088c:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_RTC_Init+0x12c>)
 800088e:	f002 fc83 	bl	8003198 <HAL_RTC_SetDate>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000898:	f000 f9d8 	bl	8000c4c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800089c:	2300      	movs	r3, #0
 800089e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2201      	movs	r2, #1
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_RTC_Init+0x12c>)
 80008d4:	f002 fce8 	bl	80032a8 <HAL_RTC_SetAlarm_IT>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 80008de:	f000 f9b5 	bl	8000c4c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_RTC_Init+0x12c>)
 80008e8:	f002 ff22 	bl	8003730 <HAL_RTCEx_SetWakeUpTimer_IT>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_RTC_Init+0x122>
  {
    Error_Handler();
 80008f2:	f000 f9ab 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3748      	adds	r7, #72	; 0x48
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000114 	.word	0x20000114
 8000904:	40002800 	.word	0x40002800

08000908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_TIM1_Init+0xa4>)
 800092a:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <MX_TIM1_Init+0xa8>)
 800092c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_TIM1_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_TIM1_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800093a:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_TIM1_Init+0xa4>)
 800093c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000940:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_TIM1_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_TIM1_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_TIM1_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000954:	4815      	ldr	r0, [pc, #84]	; (80009ac <MX_TIM1_Init+0xa4>)
 8000956:	f002 ffb9 	bl	80038cc <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 f974 	bl	8000c4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000964:	2307      	movs	r3, #7
 8000966:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4619      	mov	r1, r3
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <MX_TIM1_Init+0xa4>)
 8000974:	f003 f991 	bl	8003c9a <HAL_TIM_SlaveConfigSynchro>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800097e:	f000 f965 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_TIM1_Init+0xa4>)
 8000994:	f003 fb98 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800099e:	f000 f955 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000138 	.word	0x20000138
 80009b0:	40012c00 	.word	0x40012c00

080009b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_TIM2_Init+0xac>)
 80009d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009dc:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_TIM2_Init+0xac>)
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_TIM2_Init+0xac>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e8:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM2_Init+0xac>)
 80009ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM2_Init+0xac>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_TIM2_Init+0xac>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fc:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_TIM2_Init+0xac>)
 80009fe:	f002 ff65 	bl	80038cc <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a08:	f000 f920 	bl	8000c4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000a10:	2310      	movs	r3, #16
 8000a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_TIM2_Init+0xac>)
 8000a1c:	f003 f93d 	bl	8003c9a <HAL_TIM_SlaveConfigSynchro>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000a26:	f000 f911 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	480a      	ldr	r0, [pc, #40]	; (8000a60 <MX_TIM2_Init+0xac>)
 8000a38:	f003 fb46 	bl	80040c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a42:	f000 f903 	bl	8000c4c <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM_TIM2_TI4_GPIO) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_TIM2_Init+0xac>)
 8000a4a:	f003 fbc5 	bl	80041d8 <HAL_TIMEx_RemapConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000a54:	f000 f8fa 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000184 	.word	0x20000184

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a39      	ldr	r2, [pc, #228]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a2d      	ldr	r2, [pc, #180]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000ac2:	f000 fee3 	bl	800188c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad2:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <MX_GPIO_Init+0x100>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_USER_LED_BLUE_GPIO_Port, BSP_USER_LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	4821      	ldr	r0, [pc, #132]	; (8000b68 <MX_GPIO_Init+0x104>)
 8000ae4:	f000 fe26 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	481b      	ldr	r0, [pc, #108]	; (8000b6c <MX_GPIO_Init+0x108>)
 8000b00:	f000 fc86 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b08:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f000 fc78 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_USER_LED_BLUE_Pin */
  GPIO_InitStruct.Pin = BSP_USER_LED_BLUE_Pin;
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_USER_LED_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_GPIO_Init+0x104>)
 8000b38:	f000 fc6a 	bl	8001410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2006      	movs	r0, #6
 8000b42:	f000 fc22 	bl	800138a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b46:	2006      	movs	r0, #6
 8000b48:	f000 fc3b 	bl	80013c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f000 fc1a 	bl	800138a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f000 fc33 	bl	80013c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	48000800 	.word	0x48000800

08000b70 <millis>:
//{
//	// set  the flag
//	keyPressed = true;
//
//}
uint32_t millis() {
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
	return milliseconds;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <millis+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200001d0 	.word	0x200001d0

08000b88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b98:	d104      	bne.n	8000ba4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		milliseconds++;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ba2:	6013      	str	r3, [r2, #0]
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	200001d0 	.word	0x200001d0

08000bb4 <initializeTimer>:

void initializeTimer() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <initializeTimer+0x64>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <initializeTimer+0x64>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <initializeTimer+0x64>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <initializeTimer+0x68>)
 8000bd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000) - 1; // Timer runs at 1kHz
 8000bda:	f001 fc6f 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <initializeTimer+0x6c>)
 8000be2:	fba2 2303 	umull	r2, r3, r2, r3
 8000be6:	099b      	lsrs	r3, r3, #6
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <initializeTimer+0x68>)
 8000bec:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <initializeTimer+0x68>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = UINT16_MAX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <initializeTimer+0x68>)
 8000bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <initializeTimer+0x68>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]

	HAL_TIM_Base_Init(&htim2);
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <initializeTimer+0x68>)
 8000c04:	f002 fe62 	bl	80038cc <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <initializeTimer+0x68>)
 8000c0a:	f002 feb7 	bl	800397c <HAL_TIM_Base_Start_IT>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	20000184 	.word	0x20000184
 8000c20:	10624dd3 	.word	0x10624dd3

08000c24 <enterStopMode>:

void enterStopMode() {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	standbyModeFlag = 1;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <enterStopMode+0x20>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]

	// Perform standby mode operations here
	// Save the screen or perform any required tasks before entering stop mode
	printf("Entering Stop mode\n");
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <enterStopMode+0x24>)
 8000c30:	f004 f92c 	bl	8004e8c <puts>

	// Enter stop mode here using the appropriate STM32L4 HAL function
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000c34:	2101      	movs	r1, #1
 8000c36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c3a:	f000 fdab 	bl	8001794 <HAL_PWR_EnterSTOPMode>

//    standbyModeFlag = 0;
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200001d8 	.word	0x200001d8
 8000c48:	0800580c 	.word	0x0800580c

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_MspInit+0x44>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c62:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <HAL_MspInit+0x44>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_MspInit+0x44>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x44>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x44>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x44>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ac      	sub	sp, #176	; 0xb0
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	228c      	movs	r2, #140	; 0x8c
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f004 f86d 	bl	8004da0 <memset>
  if(huart->Instance==LPUART1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <HAL_UART_MspInit+0xb4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d13d      	bne.n	8000d4c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fc79 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce8:	f7ff ffb0 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cec:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_UART_MspInit+0xb8>)
 8000cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_UART_MspInit+0xb8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_UART_MspInit+0xb8>)
 8000cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_UART_MspInit+0xb8>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <HAL_UART_MspInit+0xb8>)
 8000d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_UART_MspInit+0xb8>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000d1c:	f000 fdb6 	bl	800188c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d20:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d44:	4619      	mov	r1, r3
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_UART_MspInit+0xbc>)
 8000d48:	f000 fb62 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	37b0      	adds	r7, #176	; 0xb0
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40008000 	.word	0x40008000
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48001800 	.word	0x48001800

08000d60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0a6      	sub	sp, #152	; 0x98
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	228c      	movs	r2, #140	; 0x8c
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 f815 	bl	8004da0 <memset>
  if(hrtc->Instance==RTC)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <HAL_RTC_MspInit+0x7c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d128      	bne.n	8000dd2 <HAL_RTC_MspInit+0x72>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fc1e 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d9e:	f7ff ff55 	bl	8000c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000da2:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <HAL_RTC_MspInit+0x80>)
 8000da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <HAL_RTC_MspInit+0x80>)
 8000daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 fae7 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 fb00 	bl	80013c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2029      	movs	r0, #41	; 0x29
 8000dc8:	f000 fadf 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000dcc:	2029      	movs	r0, #41	; 0x29
 8000dce:	f000 faf8 	bl	80013c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	3798      	adds	r7, #152	; 0x98
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40002800 	.word	0x40002800
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a16      	ldr	r2, [pc, #88]	; (8000e4c <HAL_TIM_Base_MspInit+0x68>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d10c      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_TIM_Base_MspInit+0x6c>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <HAL_TIM_Base_MspInit+0x6c>)
 8000dfc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e00:	6613      	str	r3, [r2, #96]	; 0x60
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_TIM_Base_MspInit+0x6c>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e0e:	e018      	b.n	8000e42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e18:	d113      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_Base_MspInit+0x6c>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_TIM_Base_MspInit+0x6c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_Base_MspInit+0x6c>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	201c      	movs	r0, #28
 8000e38:	f000 faa7 	bl	800138a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f000 fac0 	bl	80013c2 <HAL_NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012c00 	.word	0x40012c00
 8000e50:	40021000 	.word	0x40021000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 f968 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	HAL_SYSTICK_IRQHandler();
 8000ea4:	f000 faa7 	bl	80013f6 <HAL_SYSTICK_IRQHandler>
	milliseconds++;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <SysTick_Handler+0x1c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	4a02      	ldr	r2, [pc, #8]	; (8000eb8 <SysTick_Handler+0x1c>)
 8000eb0:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001d0 	.word	0x200001d0

08000ebc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <RTC_WKUP_IRQHandler+0x10>)
 8000ec2:	f002 fcc9 	bl	8003858 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000114 	.word	0x20000114

08000ed0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 fc45 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <TIM2_IRQHandler+0x10>)
 8000ee6:	f002 fdb9 	bl	8003a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000184 	.word	0x20000184

08000ef4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ef8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000efc:	f000 fc32 	bl	8001764 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <RTC_Alarm_IRQHandler+0x10>)
 8000f0a:	f002 fb09 	bl	8003520 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000114 	.word	0x20000114

08000f18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e00a      	b.n	8000f40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f2a:	f3af 8000 	nop.w
 8000f2e:	4601      	mov	r1, r0
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	1c5a      	adds	r2, r3, #1
 8000f34:	60ba      	str	r2, [r7, #8]
 8000f36:	b2ca      	uxtb	r2, r1
 8000f38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	dbf0      	blt.n	8000f2a <_read+0x12>
  }

  return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
//
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY );
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	4804      	ldr	r0, [pc, #16]	; (8000f7c <_write+0x28>)
 8000f6c:	f003 f9f2 	bl	8004354 <HAL_UART_Transmit>

  return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000090 	.word	0x20000090

08000f80 <_close>:

int _close(int file)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa8:	605a      	str	r2, [r3, #4]
  return 0;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_isatty>:

int _isatty(int file)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b085      	sub	sp, #20
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f003 fe98 	bl	8004d4c <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20050000 	.word	0x20050000
 8001048:	00000400 	.word	0x00000400
 800104c:	200001e4 	.word	0x200001e4
 8001050:	20000200 	.word	0x20000200

08001054 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800107c:	f7ff ffea 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f003 fe57 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010aa:	f7ff fabd 	bl	8000628 <main>

080010ae <LoopForever>:

LoopForever:
    b LoopForever
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010bc:	080058dc 	.word	0x080058dc
  ldr r2, =_sbss
 80010c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010c4:	200001fc 	.word	0x200001fc

080010c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC1_2_IRQHandler>

080010ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f94d 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f80e 	bl	80010fc <HAL_InitTick>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e001      	b.n	80010f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ec:	f7ff fdb4 	bl	8000c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_InitTick+0x6c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d023      	beq.n	8001158 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_InitTick+0x70>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_InitTick+0x6c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f000 f959 	bl	80013de <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d809      	bhi.n	800114c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001140:	f000 f923 	bl	800138a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_InitTick+0x74>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e007      	b.n	800115c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e004      	b.n	800115c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e001      	b.n	800115c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20000004 	.word	0x20000004
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000000c 	.word	0x2000000c
 8001198:	200001e8 	.word	0x200001e8

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200001e8 	.word	0x200001e8

080011b4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_ResumeTick+0x1c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_ResumeTick+0x1c>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010

080011d4 <__NVIC_SetPriorityGrouping>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff3e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff31 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013fa:	f000 f802 	bl	8001402 <HAL_SYSTICK_Callback>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e166      	b.n	80016ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8158 	beq.w	80016e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d005      	beq.n	8001450 <HAL_GPIO_Init+0x40>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d130      	bne.n	80014b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001486:	2201      	movs	r2, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	f003 0201 	and.w	r2, r3, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d017      	beq.n	80014ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d123      	bne.n	8001542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0203 	and.w	r2, r3, #3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80b2 	beq.w	80016e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001584:	4b61      	ldr	r3, [pc, #388]	; (800170c <HAL_GPIO_Init+0x2fc>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001588:	4a60      	ldr	r2, [pc, #384]	; (800170c <HAL_GPIO_Init+0x2fc>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6613      	str	r3, [r2, #96]	; 0x60
 8001590:	4b5e      	ldr	r3, [pc, #376]	; (800170c <HAL_GPIO_Init+0x2fc>)
 8001592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800159c:	4a5c      	ldr	r2, [pc, #368]	; (8001710 <HAL_GPIO_Init+0x300>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015c6:	d02b      	beq.n	8001620 <HAL_GPIO_Init+0x210>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_GPIO_Init+0x304>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d025      	beq.n	800161c <HAL_GPIO_Init+0x20c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a51      	ldr	r2, [pc, #324]	; (8001718 <HAL_GPIO_Init+0x308>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d01f      	beq.n	8001618 <HAL_GPIO_Init+0x208>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a50      	ldr	r2, [pc, #320]	; (800171c <HAL_GPIO_Init+0x30c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d019      	beq.n	8001614 <HAL_GPIO_Init+0x204>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a4f      	ldr	r2, [pc, #316]	; (8001720 <HAL_GPIO_Init+0x310>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d013      	beq.n	8001610 <HAL_GPIO_Init+0x200>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a4e      	ldr	r2, [pc, #312]	; (8001724 <HAL_GPIO_Init+0x314>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d00d      	beq.n	800160c <HAL_GPIO_Init+0x1fc>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a4d      	ldr	r2, [pc, #308]	; (8001728 <HAL_GPIO_Init+0x318>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d007      	beq.n	8001608 <HAL_GPIO_Init+0x1f8>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4c      	ldr	r2, [pc, #304]	; (800172c <HAL_GPIO_Init+0x31c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d101      	bne.n	8001604 <HAL_GPIO_Init+0x1f4>
 8001600:	2307      	movs	r3, #7
 8001602:	e00e      	b.n	8001622 <HAL_GPIO_Init+0x212>
 8001604:	2308      	movs	r3, #8
 8001606:	e00c      	b.n	8001622 <HAL_GPIO_Init+0x212>
 8001608:	2306      	movs	r3, #6
 800160a:	e00a      	b.n	8001622 <HAL_GPIO_Init+0x212>
 800160c:	2305      	movs	r3, #5
 800160e:	e008      	b.n	8001622 <HAL_GPIO_Init+0x212>
 8001610:	2304      	movs	r3, #4
 8001612:	e006      	b.n	8001622 <HAL_GPIO_Init+0x212>
 8001614:	2303      	movs	r3, #3
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x212>
 8001618:	2302      	movs	r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x212>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x212>
 8001620:	2300      	movs	r3, #0
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001632:	4937      	ldr	r1, [pc, #220]	; (8001710 <HAL_GPIO_Init+0x300>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <HAL_GPIO_Init+0x320>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001664:	4a32      	ldr	r2, [pc, #200]	; (8001730 <HAL_GPIO_Init+0x320>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_GPIO_Init+0x320>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800168e:	4a28      	ldr	r2, [pc, #160]	; (8001730 <HAL_GPIO_Init+0x320>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_GPIO_Init+0x320>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_GPIO_Init+0x320>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016be:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_GPIO_Init+0x320>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <HAL_GPIO_Init+0x320>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f47f ae91 	bne.w	8001420 <HAL_GPIO_Init+0x10>
  }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000
 8001714:	48000400 	.word	0x48000400
 8001718:	48000800 	.word	0x48000800
 800171c:	48000c00 	.word	0x48000c00
 8001720:	48001000 	.word	0x48001000
 8001724:	48001400 	.word	0x48001400
 8001728:	48001800 	.word	0x48001800
 800172c:	48001c00 	.word	0x48001c00
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001750:	e002      	b.n	8001758 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	4013      	ands	r3, r2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d006      	beq.n	8001788 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177a:	4a05      	ldr	r2, [pc, #20]	; (8001790 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe ff00 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010400 	.word	0x40010400

08001794 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017a6:	d104      	bne.n	80017b2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f8a8 	bl	8001900 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80017b0:	e003      	b.n	80017ba <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f879 	bl	80018ac <HAL_PWREx_EnterSTOP0Mode>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <HAL_PWREx_GetVoltageRange+0x18>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40007000 	.word	0x40007000

080017e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017ee:	d130      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80017f0:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017fc:	d038      	beq.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001806:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2232      	movs	r2, #50	; 0x32
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0c9b      	lsrs	r3, r3, #18
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001824:	e002      	b.n	800182c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3b01      	subs	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001838:	d102      	bne.n	8001840 <HAL_PWREx_ControlVoltageScaling+0x60>
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f2      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184c:	d110      	bne.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e00f      	b.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d007      	beq.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40007000 	.word	0x40007000
 8001884:	20000004 	.word	0x20000004
 8001888:	431bde83 	.word	0x431bde83

0800188c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189a:	6053      	str	r3, [r2, #4]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80018bc:	f023 0307 	bic.w	r3, r3, #7
 80018c0:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80018d4:	bf30      	wfi
 80018d6:	e002      	b.n	80018de <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80018d8:	bf40      	sev
    __WFE();
 80018da:	bf20      	wfe
    __WFE();
 80018dc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_PWREx_EnterSTOP0Mode+0x50>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6113      	str	r3, [r2, #16]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40007000 	.word	0x40007000
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 0307 	bic.w	r3, r3, #7
 8001912:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	4a0d      	ldr	r2, [pc, #52]	; (8001954 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800192c:	bf30      	wfi
 800192e:	e002      	b.n	8001936 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001930:	bf40      	sev
    __WFE();
 8001932:	bf20      	wfe
    __WFE();
 8001934:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6113      	str	r3, [r2, #16]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	f000 bc08 	b.w	800217c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196c:	4b96      	ldr	r3, [pc, #600]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001976:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80e4 	beq.w	8001b56 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d007      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4c>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	f040 808b 	bne.w	8001ab2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f040 8087 	bne.w	8001ab2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019a4:	4b88      	ldr	r3, [pc, #544]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x64>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e3df      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4b81      	ldr	r3, [pc, #516]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <HAL_RCC_OscConfig+0x7e>
 80019cc:	4b7e      	ldr	r3, [pc, #504]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d4:	e005      	b.n	80019e2 <HAL_RCC_OscConfig+0x8a>
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d223      	bcs.n	8001a2e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fd92 	bl	8002514 <RCC_SetFlashLatencyFromMSIRange>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e3c0      	b.n	800217c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b70      	ldr	r3, [pc, #448]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	496d      	ldr	r1, [pc, #436]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	021b      	lsls	r3, r3, #8
 8001a26:	4968      	ldr	r1, [pc, #416]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
 8001a2c:	e025      	b.n	8001a7a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2e:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4960      	ldr	r1, [pc, #384]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4c:	4b5e      	ldr	r3, [pc, #376]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	495b      	ldr	r1, [pc, #364]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 fd52 	bl	8002514 <RCC_SetFlashLatencyFromMSIRange>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e380      	b.n	800217c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a7a:	f000 fc87 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4950      	ldr	r1, [pc, #320]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	fa22 f303 	lsr.w	r3, r2, r3
 8001a96:	4a4e      	ldr	r2, [pc, #312]	; (8001bd0 <HAL_RCC_OscConfig+0x278>)
 8001a98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb2c 	bl	80010fc <HAL_InitTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d052      	beq.n	8001b54 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	e364      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d032      	beq.n	8001b20 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aba:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a42      	ldr	r2, [pc, #264]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fb69 	bl	800119c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ace:	f7ff fb65 	bl	800119c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e34d      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b33      	ldr	r3, [pc, #204]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4930      	ldr	r1, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b0a:	4b2f      	ldr	r3, [pc, #188]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	492b      	ldr	r1, [pc, #172]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	604b      	str	r3, [r1, #4]
 8001b1e:	e01a      	b.n	8001b56 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a28      	ldr	r2, [pc, #160]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb36 	bl	800119c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b34:	f7ff fb32 	bl	800119c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e31a      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1dc>
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d073      	beq.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_OscConfig+0x21c>
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d10e      	bne.n	8001b8c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d10b      	bne.n	8001b8c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d063      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d15f      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e2f7      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d106      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x24c>
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e025      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bac:	d114      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x280>
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a02      	ldr	r2, [pc, #8]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e013      	b.n	8001bf0 <HAL_RCC_OscConfig+0x298>
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	08005820 	.word	0x08005820
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a9f      	ldr	r2, [pc, #636]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b9d      	ldr	r3, [pc, #628]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a9c      	ldr	r2, [pc, #624]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fad0 	bl	800119c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff facc 	bl	800119c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e2b4      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	4b92      	ldr	r3, [pc, #584]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x2a8>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fabc 	bl	800119c <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fab8 	bl	800119c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	; 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e2a0      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2d0>
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d060      	beq.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_OscConfig+0x310>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d119      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d116      	bne.n	8001c96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c68:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x328>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e27d      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	061b      	lsls	r3, r3, #24
 8001c8e:	4973      	ldr	r1, [pc, #460]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c94:	e040      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d023      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9e:	4b6f      	ldr	r3, [pc, #444]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff fa77 	bl	800119c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fa73 	bl	800119c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e25b      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	495f      	ldr	r1, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e018      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5c      	ldr	r2, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fa53 	bl	800119c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fa4f 	bl	800119c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e237      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1f0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03c      	beq.n	8001d9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d01c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fa2e 	bl	800119c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fa2a 	bl	800119c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e212      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ef      	beq.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
 8001d64:	e01b      	b.n	8001d9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6c:	4a3b      	ldr	r2, [pc, #236]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff fa11 	bl	800119c <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7ff fa0d 	bl	800119c <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1f5      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ef      	bne.n	8001d7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80a6 	beq.w	8001ef8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001db0:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1d      	ldr	r2, [pc, #116]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df0:	f7ff f9d4 	bl	800119c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7ff f9d0 	bl	800119c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1b8      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCC_OscConfig+0x508>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d8>
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2e:	e029      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d115      	bne.n	8001e64 <HAL_RCC_OscConfig+0x50c>
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	e014      	b.n	8001e84 <HAL_RCC_OscConfig+0x52c>
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40007000 	.word	0x40007000
 8001e64:	4b9d      	ldr	r3, [pc, #628]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a9c      	ldr	r2, [pc, #624]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	4b99      	ldr	r3, [pc, #612]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	4a98      	ldr	r2, [pc, #608]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d016      	beq.n	8001eba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff f986 	bl	800119c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7ff f982 	bl	800119c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e168      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ed      	beq.n	8001e94 <HAL_RCC_OscConfig+0x53c>
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f96f 	bl	800119c <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff f96b 	bl	800119c <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e151      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	4b80      	ldr	r3, [pc, #512]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eec:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001ef2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d03c      	beq.n	8001f7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f0c:	4b73      	ldr	r3, [pc, #460]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f12:	4a72      	ldr	r2, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff f93e 	bl	800119c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f24:	f7ff f93a 	bl	800119c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e122      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f36:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ef      	beq.n	8001f24 <HAL_RCC_OscConfig+0x5cc>
 8001f44:	e01b      	b.n	8001f7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f46:	4b65      	ldr	r3, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4c:	4a63      	ldr	r2, [pc, #396]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f921 	bl	800119c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f5e:	f7ff f91d 	bl	800119c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e105      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f70:	4b5a      	ldr	r3, [pc, #360]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ef      	bne.n	8001f5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80f9 	beq.w	800217a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	f040 80cf 	bne.w	8002130 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0203 	and.w	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d12c      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d123      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d11b      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d113      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d109      	bne.n	8002000 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d071      	beq.n	80020e4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d068      	beq.n	80020d8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e0ac      	b.n	800217c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002022:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800202e:	f7ff f8b5 	bl	800119c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7ff f8b1 	bl	800119c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e099      	b.n	800217c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f0      	bne.n	8002036 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_OscConfig+0x788>)
 800205a:	4013      	ands	r3, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002064:	3a01      	subs	r2, #1
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800206e:	0212      	lsls	r2, r2, #8
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002076:	0852      	lsrs	r2, r2, #1
 8002078:	3a01      	subs	r2, #1
 800207a:	0552      	lsls	r2, r2, #21
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002082:	0852      	lsrs	r2, r2, #1
 8002084:	3a01      	subs	r2, #1
 8002086:	0652      	lsls	r2, r2, #25
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800208e:	06d2      	lsls	r2, r2, #27
 8002090:	430a      	orrs	r2, r1
 8002092:	4912      	ldr	r1, [pc, #72]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020b0:	f7ff f874 	bl	800119c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff f870 	bl	800119c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e058      	b.n	800217c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_RCC_OscConfig+0x784>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d6:	e050      	b.n	800217a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e04f      	b.n	800217c <HAL_RCC_OscConfig+0x824>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d144      	bne.n	800217a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a23      	ldr	r2, [pc, #140]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4a20      	ldr	r2, [pc, #128]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002106:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002108:	f7ff f848 	bl	800119c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002110:	f7ff f844 	bl	800119c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e02c      	b.n	800217c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x7b8>
 800212e:	e024      	b.n	800217a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	d01f      	beq.n	8002176 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a12      	ldr	r2, [pc, #72]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800213c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7ff f82b 	bl	800119c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214a:	f7ff f827 	bl	800119c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e00f      	b.n	800217c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4905      	ldr	r1, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x82c>)
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_OscConfig+0x830>)
 8002170:	4013      	ands	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
 8002174:	e001      	b.n	800217a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	feeefffc 	.word	0xfeeefffc

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0e7      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b75      	ldr	r3, [pc, #468]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b72      	ldr	r3, [pc, #456]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4970      	ldr	r1, [pc, #448]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b6e      	ldr	r3, [pc, #440]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0cf      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d908      	bls.n	80021fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4960      	ldr	r1, [pc, #384]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d04c      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b5a      	ldr	r3, [pc, #360]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d121      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0a6      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e09a      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002242:	4b4e      	ldr	r3, [pc, #312]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e08e      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002252:	4b4a      	ldr	r3, [pc, #296]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e086      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4943      	ldr	r1, [pc, #268]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002274:	f7fe ff92 	bl	800119c <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe ff8e 	bl	800119c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e06e      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d010      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	429a      	cmp	r2, r3
 80022be:	d208      	bcs.n	80022d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b2e      	ldr	r3, [pc, #184]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	492b      	ldr	r1, [pc, #172]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d210      	bcs.n	8002302 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e0:	4b25      	ldr	r3, [pc, #148]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 0207 	bic.w	r2, r3, #7
 80022e8:	4923      	ldr	r1, [pc, #140]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f0:	4b21      	ldr	r3, [pc, #132]	; (8002378 <HAL_RCC_ClockConfig+0x1ec>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e036      	b.n	8002370 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	4918      	ldr	r1, [pc, #96]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232c:	4b13      	ldr	r3, [pc, #76]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4910      	ldr	r1, [pc, #64]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002340:	f000 f824 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	091b      	lsrs	r3, r3, #4
 800234c:	f003 030f 	and.w	r3, r3, #15
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCC_ClockConfig+0x1f4>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	4a09      	ldr	r2, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1f8>)
 800235e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <HAL_RCC_ClockConfig+0x1fc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fec9 	bl	80010fc <HAL_InitTick>
 800236a:	4603      	mov	r3, r0
 800236c:	72fb      	strb	r3, [r7, #11]

  return status;
 800236e:	7afb      	ldrb	r3, [r7, #11]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40022000 	.word	0x40022000
 800237c:	40021000 	.word	0x40021000
 8002380:	08005820 	.word	0x08005820
 8002384:	20000004 	.word	0x20000004
 8002388:	20000008 	.word	0x20000008

0800238c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a4:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x34>
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d121      	bne.n	80023fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d11e      	bne.n	80023fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023cc:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e005      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023dc:	4b2d      	ldr	r3, [pc, #180]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023e8:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d102      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <HAL_RCC_GetSysClockFreq+0x110>)
 8002406:	61bb      	str	r3, [r7, #24]
 8002408:	e004      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d101      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002412:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d134      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241a:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0xa6>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d003      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0xac>
 8002430:	e005      	b.n	800243e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002432:	4b1a      	ldr	r3, [pc, #104]	; (800249c <HAL_RCC_GetSysClockFreq+0x110>)
 8002434:	617b      	str	r3, [r7, #20]
      break;
 8002436:	e005      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002438:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800243a:	617b      	str	r3, [r7, #20]
      break;
 800243c:	e002      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	617b      	str	r3, [r7, #20]
      break;
 8002442:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	3301      	adds	r3, #1
 8002450:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	fb03 f202 	mul.w	r2, r3, r2
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_GetSysClockFreq+0x108>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	0e5b      	lsrs	r3, r3, #25
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	3301      	adds	r3, #1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002482:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002484:	69bb      	ldr	r3, [r7, #24]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	08005838 	.word	0x08005838
 800249c:	00f42400 	.word	0x00f42400
 80024a0:	007a1200 	.word	0x007a1200

080024a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024c0:	f7ff fff0 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4904      	ldr	r1, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024dc:	4618      	mov	r0, r3
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08005830 	.word	0x08005830

080024e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024ec:	f7ff ffda 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0adb      	lsrs	r3, r3, #11
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4904      	ldr	r1, [pc, #16]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021000 	.word	0x40021000
 8002510:	08005830 	.word	0x08005830

08002514 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800252c:	f7ff f94a 	bl	80017c4 <HAL_PWREx_GetVoltageRange>
 8002530:	6178      	str	r0, [r7, #20]
 8002532:	e014      	b.n	800255e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	4a24      	ldr	r2, [pc, #144]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253e:	6593      	str	r3, [r2, #88]	; 0x58
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800254c:	f7ff f93a 	bl	80017c4 <HAL_PWREx_GetVoltageRange>
 8002550:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800255c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002564:	d10b      	bne.n	800257e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d919      	bls.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2ba0      	cmp	r3, #160	; 0xa0
 8002570:	d902      	bls.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002572:	2302      	movs	r3, #2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e013      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002578:	2301      	movs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	e010      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b80      	cmp	r3, #128	; 0x80
 8002582:	d902      	bls.n	800258a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002584:	2303      	movs	r3, #3
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	e00a      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d102      	bne.n	8002596 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002590:	2302      	movs	r3, #2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	e004      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b70      	cmp	r3, #112	; 0x70
 800259a:	d101      	bne.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800259c:	2301      	movs	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 0207 	bic.w	r2, r3, #7
 80025a8:	4909      	ldr	r1, [pc, #36]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e000      	b.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40022000 	.word	0x40022000

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025dc:	2300      	movs	r3, #0
 80025de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e0:	2300      	movs	r3, #0
 80025e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d041      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f8:	d02a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025fe:	d824      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002600:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002604:	d008      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800260a:	d81e      	bhi.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002614:	d010      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002616:	e018      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002618:	4b86      	ldr	r3, [pc, #536]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a85      	ldr	r2, [pc, #532]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002624:	e015      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f000 facd 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002636:	e00c      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3320      	adds	r3, #32
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fbb6 	bl	8002db0 <RCCEx_PLLSAI2_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002648:	e003      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	74fb      	strb	r3, [r7, #19]
      break;
 800264e:	e000      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10b      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002658:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002666:	4973      	ldr	r1, [pc, #460]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800266e:	e001      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d041      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002684:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002688:	d02a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800268a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268e:	d824      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002694:	d008      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269a:	d81e      	bhi.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d010      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026a6:	e018      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a8:	4b62      	ldr	r3, [pc, #392]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b4:	e015      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fa85 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c6:	e00c      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3320      	adds	r3, #32
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fb6e 	bl	8002db0 <RCCEx_PLLSAI2_Config>
 80026d4:	4603      	mov	r3, r0
 80026d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d8:	e003      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	74fb      	strb	r3, [r7, #19]
      break;
 80026de:	e000      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10b      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026f6:	494f      	ldr	r1, [pc, #316]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026fe:	e001      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a0 	beq.w	8002852 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002744:	2301      	movs	r3, #1
 8002746:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3a      	ldr	r2, [pc, #232]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002754:	f7fe fd22 	bl	800119c <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275a:	e009      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe fd1e 	bl	800119c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d902      	bls.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	74fb      	strb	r3, [r7, #19]
        break;
 800276e:	e005      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002770:	4b31      	ldr	r3, [pc, #196]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d15c      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01f      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	d019      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d016      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fcdd 	bl	800119c <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e4:	e00b      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fcd9 	bl	800119c <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d902      	bls.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	74fb      	strb	r3, [r7, #19]
            break;
 80027fc:	e006      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ec      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	4904      	ldr	r1, [pc, #16]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800282a:	e009      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
 8002830:	e006      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002840:	7c7b      	ldrb	r3, [r7, #17]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d105      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002846:	4ba6      	ldr	r3, [pc, #664]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	4aa5      	ldr	r2, [pc, #660]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800284c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002850:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800285e:	4ba0      	ldr	r3, [pc, #640]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f023 0203 	bic.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	499c      	ldr	r1, [pc, #624]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002880:	4b97      	ldr	r3, [pc, #604]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 020c 	bic.w	r2, r3, #12
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	4994      	ldr	r1, [pc, #592]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a2:	4b8f      	ldr	r3, [pc, #572]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	498b      	ldr	r1, [pc, #556]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c4:	4b86      	ldr	r3, [pc, #536]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4983      	ldr	r1, [pc, #524]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028e6:	4b7e      	ldr	r3, [pc, #504]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f4:	497a      	ldr	r1, [pc, #488]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002908:	4b75      	ldr	r3, [pc, #468]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002916:	4972      	ldr	r1, [pc, #456]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800292a:	4b6d      	ldr	r3, [pc, #436]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002938:	4969      	ldr	r1, [pc, #420]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800294c:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295a:	4961      	ldr	r1, [pc, #388]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296e:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800297c:	4958      	ldr	r1, [pc, #352]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002990:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	4950      	ldr	r1, [pc, #320]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4947      	ldr	r1, [pc, #284]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029d4:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029da:	f023 0203 	bic.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	493f      	ldr	r1, [pc, #252]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d028      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029f6:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	4936      	ldr	r1, [pc, #216]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a16:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4a31      	ldr	r2, [pc, #196]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a20:	60d3      	str	r3, [r2, #12]
 8002a22:	e011      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 f8c9 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d028      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a62:	491f      	ldr	r1, [pc, #124]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
 8002a80:	e011      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f89a 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d02a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ac0:	4907      	ldr	r1, [pc, #28]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad2:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a02      	ldr	r2, [pc, #8]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002adc:	60d3      	str	r3, [r2, #12]
 8002ade:	e013      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002ae0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 f869 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002b04:	7cfb      	ldrb	r3, [r7, #19]
 8002b06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02f      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b14:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	4929      	ldr	r1, [pc, #164]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	2102      	movs	r1, #2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f846 	bl	8002bcc <RCCEx_PLLSAI1_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d014      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	74bb      	strb	r3, [r7, #18]
 8002b4e:	e011      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3320      	adds	r3, #32
 8002b5e:	2102      	movs	r1, #2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f925 	bl	8002db0 <RCCEx_PLLSAI2_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b6a:	7cfb      	ldrb	r3, [r7, #19]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b86:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b90:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000

08002bcc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bda:	4b74      	ldr	r3, [pc, #464]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d018      	beq.n	8002c18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002be6:	4b71      	ldr	r3, [pc, #452]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0203 	and.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d10d      	bne.n	8002c12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d009      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bfe:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d047      	beq.n	8002ca2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
 8002c16:	e044      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d018      	beq.n	8002c52 <RCCEx_PLLSAI1_Config+0x86>
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d825      	bhi.n	8002c70 <RCCEx_PLLSAI1_Config+0xa4>
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d002      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0x62>
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d009      	beq.n	8002c40 <RCCEx_PLLSAI1_Config+0x74>
 8002c2c:	e020      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11d      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3e:	e01a      	b.n	8002c76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c40:	4b5a      	ldr	r3, [pc, #360]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d116      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e013      	b.n	8002c7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c52:	4b56      	ldr	r3, [pc, #344]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c5e:	4b53      	ldr	r3, [pc, #332]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c6e:	e006      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	e004      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c86:	4b49      	ldr	r3, [pc, #292]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	4943      	ldr	r1, [pc, #268]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d17c      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ca8:	4b40      	ldr	r3, [pc, #256]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fa72 	bl	800119c <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cba:	e009      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cbc:	f7fe fa6e 	bl	800119c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d902      	bls.n	8002cd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8002cce:	e005      	b.n	8002cdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1ef      	bne.n	8002cbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d15f      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d110      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6892      	ldr	r2, [r2, #8]
 8002cf8:	0211      	lsls	r1, r2, #8
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68d2      	ldr	r2, [r2, #12]
 8002cfe:	06d2      	lsls	r2, r2, #27
 8002d00:	430a      	orrs	r2, r1
 8002d02:	492a      	ldr	r1, [pc, #168]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	610b      	str	r3, [r1, #16]
 8002d08:	e027      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d112      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d10:	4b26      	ldr	r3, [pc, #152]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	0211      	lsls	r1, r2, #8
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6912      	ldr	r2, [r2, #16]
 8002d26:	0852      	lsrs	r2, r2, #1
 8002d28:	3a01      	subs	r2, #1
 8002d2a:	0552      	lsls	r2, r2, #21
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	491f      	ldr	r1, [pc, #124]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	610b      	str	r3, [r1, #16]
 8002d34:	e011      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d36:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	0211      	lsls	r1, r2, #8
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6952      	ldr	r2, [r2, #20]
 8002d4c:	0852      	lsrs	r2, r2, #1
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0652      	lsls	r2, r2, #25
 8002d52:	430a      	orrs	r2, r1
 8002d54:	4915      	ldr	r1, [pc, #84]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a13      	ldr	r2, [pc, #76]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe fa19 	bl	800119c <HAL_GetTick>
 8002d6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d6c:	e009      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d6e:	f7fe fa15 	bl	800119c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d902      	bls.n	8002d82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d80:	e005      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0ef      	beq.n	8002d6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dbe:	4b69      	ldr	r3, [pc, #420]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dca:	4b66      	ldr	r3, [pc, #408]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10d      	bne.n	8002df6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002de2:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
       ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d047      	beq.n	8002e86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e044      	b.n	8002e86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d018      	beq.n	8002e36 <RCCEx_PLLSAI2_Config+0x86>
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d825      	bhi.n	8002e54 <RCCEx_PLLSAI2_Config+0xa4>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <RCCEx_PLLSAI2_Config+0x62>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d009      	beq.n	8002e24 <RCCEx_PLLSAI2_Config+0x74>
 8002e10:	e020      	b.n	8002e54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e22:	e01a      	b.n	8002e5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e24:	4b4f      	ldr	r3, [pc, #316]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e013      	b.n	8002e5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e36:	4b4b      	ldr	r3, [pc, #300]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e42:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e52:	e006      	b.n	8002e62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e004      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	4938      	ldr	r1, [pc, #224]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d166      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe f980 	bl	800119c <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e9e:	e009      	b.n	8002eb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ea0:	f7fe f97c 	bl	800119c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb2:	e005      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ef      	bne.n	8002ea0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d149      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d110      	bne.n	8002eee <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002ed4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	0211      	lsls	r1, r2, #8
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	06d2      	lsls	r2, r2, #27
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	491f      	ldr	r1, [pc, #124]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	614b      	str	r3, [r1, #20]
 8002eec:	e011      	b.n	8002f12 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	0211      	lsls	r1, r2, #8
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6912      	ldr	r2, [r2, #16]
 8002f04:	0852      	lsrs	r2, r2, #1
 8002f06:	3a01      	subs	r2, #1
 8002f08:	0652      	lsls	r2, r2, #25
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	4915      	ldr	r1, [pc, #84]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f93d 	bl	800119c <HAL_GetTick>
 8002f22:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f24:	e009      	b.n	8002f3a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f26:	f7fe f939 	bl	800119c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d902      	bls.n	8002f3a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	73fb      	strb	r3, [r7, #15]
          break;
 8002f38:	e005      	b.n	8002f46 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ef      	beq.n	8002f26 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000

08002f68 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d06c      	beq.n	8003054 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd fee6 	bl	8000d60 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	22ca      	movs	r2, #202	; 0xca
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2253      	movs	r2, #83	; 0x53
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 fb2d 	bl	800360c <RTC_EnterInitMode>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d14b      	bne.n	8003054 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fce:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6899      	ldr	r1, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68d2      	ldr	r2, [r2, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6919      	ldr	r1, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	041a      	lsls	r2, r3, #16
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb31 	bl	8003674 <RTC_ExitInitMode>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11b      	bne.n	8003054 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0203 	bic.w	r2, r2, #3
 800302a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69da      	ldr	r2, [r3, #28]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	22ff      	movs	r2, #255	; 0xff
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800305e:	b590      	push	{r4, r7, lr}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_RTC_SetTime+0x1a>
 8003074:	2302      	movs	r3, #2
 8003076:	e08b      	b.n	8003190 <HAL_RTC_SetTime+0x132>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	22ca      	movs	r2, #202	; 0xca
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2253      	movs	r2, #83	; 0x53
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fab7 	bl	800360c <RTC_EnterInitMode>
 800309e:	4603      	mov	r3, r0
 80030a0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d163      	bne.n	8003170 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d126      	bne.n	80030fc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2200      	movs	r2, #0
 80030c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fb12 	bl	80036f0 <RTC_ByteToBcd2>
 80030cc:	4603      	mov	r3, r0
 80030ce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	785b      	ldrb	r3, [r3, #1]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fb0b 	bl	80036f0 <RTC_ByteToBcd2>
 80030da:	4603      	mov	r3, r0
 80030dc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030de:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	789b      	ldrb	r3, [r3, #2]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fb03 	bl	80036f0 <RTC_ByteToBcd2>
 80030ea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030ec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	78db      	ldrb	r3, [r3, #3]
 80030f4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e018      	b.n	800312e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2200      	movs	r2, #0
 800310e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	785b      	ldrb	r3, [r3, #1]
 800311a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800311c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003122:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	78db      	ldrb	r3, [r3, #3]
 8003128:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003138:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800313c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800314c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa84 	bl	8003674 <RTC_ExitInitMode>
 800316c:	4603      	mov	r3, r0
 800316e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	22ff      	movs	r2, #255	; 0xff
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800318e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}

08003198 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_RTC_SetDate+0x1a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e075      	b.n	800329e <HAL_RTC_SetDate+0x106>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10e      	bne.n	80031e6 <HAL_RTC_SetDate+0x4e>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	f023 0310 	bic.w	r3, r3, #16
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	330a      	adds	r3, #10
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11c      	bne.n	8003226 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	78db      	ldrb	r3, [r3, #3]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fa7d 	bl	80036f0 <RTC_ByteToBcd2>
 80031f6:	4603      	mov	r3, r0
 80031f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fa76 	bl	80036f0 <RTC_ByteToBcd2>
 8003204:	4603      	mov	r3, r0
 8003206:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003208:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	789b      	ldrb	r3, [r3, #2]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fa6e 	bl	80036f0 <RTC_ByteToBcd2>
 8003214:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003216:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	e00e      	b.n	8003244 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	78db      	ldrb	r3, [r3, #3]
 800322a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	785b      	ldrb	r3, [r3, #1]
 8003230:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003232:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003238:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003240:	4313      	orrs	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	22ca      	movs	r2, #202	; 0xca
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2253      	movs	r2, #83	; 0x53
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f9d9 	bl	800360c <RTC_EnterInitMode>
 800325a:	4603      	mov	r3, r0
 800325c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10c      	bne.n	800327e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800326e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003272:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f9fd 	bl	8003674 <RTC_ExitInitMode>
 800327a:	4603      	mov	r3, r0
 800327c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	22ff      	movs	r2, #255	; 0xff
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003286:	7cfb      	ldrb	r3, [r7, #19]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}
	...

080032a8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_RTC_SetAlarm_IT+0x1a>
 80032be:	2302      	movs	r3, #2
 80032c0:	e127      	b.n	8003512 <HAL_RTC_SetAlarm_IT+0x26a>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2202      	movs	r2, #2
 80032ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d137      	bne.n	8003348 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f9fd 	bl	80036f0 <RTC_ByteToBcd2>
 80032f6:	4603      	mov	r3, r0
 80032f8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	785b      	ldrb	r3, [r3, #1]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f9f6 	bl	80036f0 <RTC_ByteToBcd2>
 8003304:	4603      	mov	r3, r0
 8003306:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003308:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	789b      	ldrb	r3, [r3, #2]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f9ee 	bl	80036f0 <RTC_ByteToBcd2>
 8003314:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003316:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	78db      	ldrb	r3, [r3, #3]
 800331e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003320:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f9e0 	bl	80036f0 <RTC_ByteToBcd2>
 8003330:	4603      	mov	r3, r0
 8003332:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003334:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800333c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003342:	4313      	orrs	r3, r2
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e023      	b.n	8003390 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2200      	movs	r2, #0
 800335a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003368:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800336e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	78db      	ldrb	r3, [r3, #3]
 8003374:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003376:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800337e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003380:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003386:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800338c:	4313      	orrs	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	22ca      	movs	r2, #202	; 0xca
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2253      	movs	r2, #83	; 0x53
 80033aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b4:	d14a      	bne.n	800344c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80033d6:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80033d8:	f7fd fee0 	bl	800119c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80033de:	e015      	b.n	800340c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033e0:	f7fd fedc 	bl	800119c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ee:	d90d      	bls.n	800340c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	22ff      	movs	r2, #255	; 0xff
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2203      	movs	r2, #3
 80033fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e082      	b.n	8003512 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0e2      	beq.n	80033e0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003438:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003448:	609a      	str	r2, [r3, #8]
 800344a:	e049      	b.n	80034e0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800345a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f462 7220 	orn	r2, r2, #640	; 0x280
 800346c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800346e:	f7fd fe95 	bl	800119c <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003474:	e015      	b.n	80034a2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003476:	f7fd fe91 	bl	800119c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003484:	d90d      	bls.n	80034a2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	22ff      	movs	r2, #255	; 0xff
 800348c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2203      	movs	r2, #3
 8003492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e037      	b.n	8003512 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0e2      	beq.n	8003476 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ce:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80034e0:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_RTC_SetAlarm_IT+0x274>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <HAL_RTC_SetAlarm_IT+0x274>)
 80034e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ea:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RTC_SetAlarm_IT+0x274>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_RTC_SetAlarm_IT+0x274>)
 80034f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034f6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	22ff      	movs	r2, #255	; 0xff
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	bf00      	nop
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800352a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800352e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d012      	beq.n	8003564 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800355c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f824 	bl	80035ac <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d012      	beq.n	8003598 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	b2da      	uxtb	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003590:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f990 	bl	80038b8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40010400 	.word	0x40010400

080035ac <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80035d8:	f7fd fde0 	bl	800119c <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035de:	e009      	b.n	80035f4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035e0:	f7fd fddc 	bl	800119c <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ee:	d901      	bls.n	80035f4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e007      	b.n	8003604 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0ee      	beq.n	80035e0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d120      	bne.n	8003668 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800362e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003630:	f7fd fdb4 	bl	800119c <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003636:	e00d      	b.n	8003654 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003638:	f7fd fdb0 	bl	800119c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003646:	d905      	bls.n	8003654 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2203      	movs	r2, #3
 8003650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <RTC_EnterInitMode+0x5c>
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d1e7      	bne.n	8003638 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <RTC_ExitInitMode+0x78>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a19      	ldr	r2, [pc, #100]	; (80036ec <RTC_ExitInitMode+0x78>)
 8003686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800368c:	4b17      	ldr	r3, [pc, #92]	; (80036ec <RTC_ExitInitMode+0x78>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10c      	bne.n	80036b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff91 	bl	80035c0 <HAL_RTC_WaitForSynchro>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01e      	beq.n	80036e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2203      	movs	r2, #3
 80036a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e017      	b.n	80036e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <RTC_ExitInitMode+0x78>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <RTC_ExitInitMode+0x78>)
 80036b8:	f023 0320 	bic.w	r3, r3, #32
 80036bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ff7e 	bl	80035c0 <HAL_RTC_WaitForSynchro>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <RTC_ExitInitMode+0x78>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <RTC_ExitInitMode+0x78>)
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40002800 	.word	0x40002800

080036f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003702:	e005      	b.n	8003710 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3301      	adds	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	3b0a      	subs	r3, #10
 800370e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003710:	7afb      	ldrb	r3, [r7, #11]
 8003712:	2b09      	cmp	r3, #9
 8003714:	d8f6      	bhi.n	8003704 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	b2da      	uxtb	r2, r3
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	4313      	orrs	r3, r2
 8003722:	b2db      	uxtb	r3, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003746:	2302      	movs	r3, #2
 8003748:	e07f      	b.n	800384a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	22ca      	movs	r2, #202	; 0xca
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2253      	movs	r2, #83	; 0x53
 8003768:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800378a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d120      	bne.n	80037dc <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800379a:	f7fd fcff 	bl	800119c <HAL_GetTick>
 800379e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80037a0:	e015      	b.n	80037ce <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037a2:	f7fd fcfb 	bl	800119c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037b0:	d90d      	bls.n	80037ce <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	22ff      	movs	r2, #255	; 0xff
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2203      	movs	r2, #3
 80037be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e03d      	b.n	800384a <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0e2      	beq.n	80037a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 0107 	bic.w	r1, r3, #7
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80037f8:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a15      	ldr	r2, [pc, #84]	; (8003854 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80037fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003802:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800380a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800380e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800381e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800382e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	22ff      	movs	r2, #255	; 0xff
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003862:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003866:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003886:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f80b 	bl	80038a4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40010400 	.word	0x40010400

080038a4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e049      	b.n	8003972 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fa76 	bl	8000de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	4619      	mov	r1, r3
 800390a:	4610      	mov	r0, r2
 800390c:	f000 fa30 	bl	8003d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d001      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e04f      	b.n	8003a34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <HAL_TIM_Base_Start_IT+0xc4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d01d      	beq.n	80039f2 <HAL_TIM_Base_Start_IT+0x76>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d018      	beq.n	80039f2 <HAL_TIM_Base_Start_IT+0x76>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_TIM_Base_Start_IT+0xc8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_TIM_Base_Start_IT+0x76>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_TIM_Base_Start_IT+0xcc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_TIM_Base_Start_IT+0x76>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_TIM_Base_Start_IT+0xd0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_TIM_Base_Start_IT+0x76>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_TIM_Base_Start_IT+0xd4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_TIM_Base_Start_IT+0x76>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d115      	bne.n	8003a1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <HAL_TIM_Base_Start_IT+0xdc>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b06      	cmp	r3, #6
 8003a02:	d015      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0xb4>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0a:	d011      	beq.n	8003a30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1c:	e008      	b.n	8003a30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	00010007 	.word	0x00010007

08003a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d122      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0202 	mvn.w	r2, #2
 8003a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f947 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f939 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f94a 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d122      	bne.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d11b      	bne.n	8003b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0204 	mvn.w	r2, #4
 8003adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f91d 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 8003af8:	e005      	b.n	8003b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f90f 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f920 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d122      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d11b      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0208 	mvn.w	r2, #8
 8003b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8f3 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8e5 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8f6 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d122      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0210 	mvn.w	r2, #16
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8c9 	bl	8003d32 <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8bb 	bl	8003d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f8cc 	bl	8003d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10e      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d107      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0201 	mvn.w	r2, #1
 8003bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fc ffd4 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d10e      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d107      	bne.n	8003c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fb42 	bl	8004290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	d10e      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d107      	bne.n	8003c3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb35 	bl	80042a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b40      	cmp	r3, #64	; 0x40
 8003c46:	d10e      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d107      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f87a 	bl	8003d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d10e      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d107      	bne.n	8003c92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f06f 0220 	mvn.w	r2, #32
 8003c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 faf5 	bl	800427c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e031      	b.n	8003d16 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003cc2:	6839      	ldr	r1, [r7, #0]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f8ed 	bl	8003ea4 <TIM_SlaveTimer_SetConfig>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e018      	b.n	8003d16 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d02:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a40      	ldr	r2, [pc, #256]	; (8003e84 <TIM_Base_SetConfig+0x114>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8e:	d00f      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3d      	ldr	r2, [pc, #244]	; (8003e88 <TIM_Base_SetConfig+0x118>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a3c      	ldr	r2, [pc, #240]	; (8003e8c <TIM_Base_SetConfig+0x11c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <TIM_Base_SetConfig+0x120>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_Base_SetConfig+0x40>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3a      	ldr	r2, [pc, #232]	; (8003e94 <TIM_Base_SetConfig+0x124>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d108      	bne.n	8003dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2f      	ldr	r2, [pc, #188]	; (8003e84 <TIM_Base_SetConfig+0x114>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01f      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d01b      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <TIM_Base_SetConfig+0x118>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d017      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <TIM_Base_SetConfig+0x11c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <TIM_Base_SetConfig+0x120>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00f      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <TIM_Base_SetConfig+0x124>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a28      	ldr	r2, [pc, #160]	; (8003e98 <TIM_Base_SetConfig+0x128>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d007      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a27      	ldr	r2, [pc, #156]	; (8003e9c <TIM_Base_SetConfig+0x12c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_Base_SetConfig+0x9a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a26      	ldr	r2, [pc, #152]	; (8003ea0 <TIM_Base_SetConfig+0x130>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d108      	bne.n	8003e1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <TIM_Base_SetConfig+0x114>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00f      	beq.n	8003e68 <TIM_Base_SetConfig+0xf8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <TIM_Base_SetConfig+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_Base_SetConfig+0xf8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <TIM_Base_SetConfig+0x128>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0xf8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a10      	ldr	r2, [pc, #64]	; (8003e9c <TIM_Base_SetConfig+0x12c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0xf8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a0f      	ldr	r2, [pc, #60]	; (8003ea0 <TIM_Base_SetConfig+0x130>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d103      	bne.n	8003e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	615a      	str	r2, [r3, #20]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40000800 	.word	0x40000800
 8003e90:	40000c00 	.word	0x40000c00
 8003e94:	40013400 	.word	0x40013400
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800

08003ea4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b70      	cmp	r3, #112	; 0x70
 8003ef0:	d01a      	beq.n	8003f28 <TIM_SlaveTimer_SetConfig+0x84>
 8003ef2:	2b70      	cmp	r3, #112	; 0x70
 8003ef4:	d860      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x114>
 8003ef6:	2b60      	cmp	r3, #96	; 0x60
 8003ef8:	d054      	beq.n	8003fa4 <TIM_SlaveTimer_SetConfig+0x100>
 8003efa:	2b60      	cmp	r3, #96	; 0x60
 8003efc:	d85c      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x114>
 8003efe:	2b50      	cmp	r3, #80	; 0x50
 8003f00:	d046      	beq.n	8003f90 <TIM_SlaveTimer_SetConfig+0xec>
 8003f02:	2b50      	cmp	r3, #80	; 0x50
 8003f04:	d858      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x114>
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d019      	beq.n	8003f3e <TIM_SlaveTimer_SetConfig+0x9a>
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d854      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x114>
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d055      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x11a>
 8003f12:	2b30      	cmp	r3, #48	; 0x30
 8003f14:	d850      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x114>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d051      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x11a>
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d84c      	bhi.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x114>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d04d      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x11a>
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d04b      	beq.n	8003fbe <TIM_SlaveTimer_SetConfig+0x11a>
 8003f26:	e047      	b.n	8003fb8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68d9      	ldr	r1, [r3, #12]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f000 f8a6 	bl	8004088 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003f3c:	e040      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d101      	bne.n	8003f4a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e03b      	b.n	8003fc2 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
      break;
 8003f8e:	e017      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6899      	ldr	r1, [r3, #8]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f000 f814 	bl	8003fca <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fa2:	e00d      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f000 f839 	bl	8004028 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fb6:	e003      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	75fb      	strb	r3, [r7, #23]
      break;
 8003fbc:	e000      	b.n	8003fc0 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003fbe:	bf00      	nop
  }

  return status;
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f023 0201 	bic.w	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f023 030a 	bic.w	r3, r3, #10
 8004006:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	621a      	str	r2, [r3, #32]
}
 800401c:	bf00      	nop
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 0210 	bic.w	r2, r3, #16
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	031b      	lsls	r3, r3, #12
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004064:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	621a      	str	r2, [r3, #32]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e068      	b.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2e      	ldr	r2, [pc, #184]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d108      	bne.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800411a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01d      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d018      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10c      	bne.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40013400 	.word	0x40013400
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800
 80041d0:	40000c00 	.word	0x40000c00
 80041d4:	40014000 	.word	0x40014000

080041d8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP_INSTANCE(htim->Instance));
  assert_param(IS_TIM_REMAP(Remap));

  __HAL_LOCK(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_TIMEx_RemapConfig+0x18>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e038      	b.n	8004262 <HAL_TIMEx_RemapConfig+0x8a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set ETR_SEL bit field (if required) */
  if (IS_TIM_ETRSEL_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <HAL_TIMEx_RemapConfig+0x98>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_TIMEx_RemapConfig+0x48>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d009      	beq.n	8004220 <HAL_TIMEx_RemapConfig+0x48>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a18      	ldr	r2, [pc, #96]	; (8004274 <HAL_TIMEx_RemapConfig+0x9c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d004      	beq.n	8004220 <HAL_TIMEx_RemapConfig+0x48>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <HAL_TIMEx_RemapConfig+0xa0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d111      	bne.n	8004244 <HAL_TIMEx_RemapConfig+0x6c>
  {
    tmpor2 = htim->Instance->OR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004226:	60fb      	str	r3, [r7, #12]
    tmpor2 &= ~TIM1_OR2_ETRSEL_Msk;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800422e:	60fb      	str	r3, [r7, #12]
    tmpor2 |= (Remap & TIM1_OR2_ETRSEL_Msk);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f403 33e0 	and.w	r3, r3, #114688	; 0x1c000
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    /* Set TIMx_OR2 */
    htim->Instance->OR2 = tmpor2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set other remapping capabilities */
  tmpor1 = Remap;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	60bb      	str	r3, [r7, #8]
  tmpor1 &= ~TIM1_OR2_ETRSEL_Msk;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f423 33e0 	bic.w	r3, r3, #114688	; 0x1c000
 800424e:	60bb      	str	r3, [r7, #8]

  /* Set TIMx_OR1 */
  htim->Instance->OR1 = tmpor1;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40012c00 	.word	0x40012c00
 8004274:	40000400 	.word	0x40000400
 8004278:	40013400 	.word	0x40013400

0800427c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e040      	b.n	800434c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fc fce0 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2224      	movs	r2, #36	; 0x24
 80042e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8c0 	bl	800447c <UART_SetConfig>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e022      	b.n	800434c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 fb6c 	bl	80049ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0201 	orr.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fbf3 	bl	8004b30 <UART_CheckIdleState>
 800434a:	4603      	mov	r3, r0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af02      	add	r7, sp, #8
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004368:	2b20      	cmp	r3, #32
 800436a:	f040 8082 	bne.w	8004472 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_UART_Transmit+0x26>
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e07a      	b.n	8004474 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_UART_Transmit+0x38>
 8004388:	2302      	movs	r3, #2
 800438a:	e073      	b.n	8004474 <HAL_UART_Transmit+0x120>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2221      	movs	r2, #33	; 0x21
 80043a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043a2:	f7fc fefb 	bl	800119c <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	88fa      	ldrh	r2, [r7, #6]
 80043b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043c0:	d108      	bne.n	80043d4 <HAL_UART_Transmit+0x80>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d104      	bne.n	80043d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	61bb      	str	r3, [r7, #24]
 80043d2:	e003      	b.n	80043dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043e4:	e02d      	b.n	8004442 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fbe6 	bl	8004bc2 <UART_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e039      	b.n	8004474 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	881a      	ldrh	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004412:	b292      	uxth	r2, r2
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	3302      	adds	r3, #2
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e008      	b.n	8004430 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	b292      	uxth	r2, r2
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1cb      	bne.n	80043e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	2140      	movs	r1, #64	; 0x40
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fbb2 	bl	8004bc2 <UART_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e005      	b.n	8004474 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e000      	b.n	8004474 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004472:	2302      	movs	r3, #2
  }
}
 8004474:	4618      	mov	r0, r3
 8004476:	3720      	adds	r7, #32
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800447c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004480:	b08a      	sub	sp, #40	; 0x28
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	431a      	orrs	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4ba4      	ldr	r3, [pc, #656]	; (800473c <UART_SetConfig+0x2c0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a99      	ldr	r2, [pc, #612]	; (8004740 <UART_SetConfig+0x2c4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d004      	beq.n	80044e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	4313      	orrs	r3, r2
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a90      	ldr	r2, [pc, #576]	; (8004744 <UART_SetConfig+0x2c8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d126      	bne.n	8004554 <UART_SetConfig+0xd8>
 8004506:	4b90      	ldr	r3, [pc, #576]	; (8004748 <UART_SetConfig+0x2cc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b03      	cmp	r3, #3
 8004512:	d81b      	bhi.n	800454c <UART_SetConfig+0xd0>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0xa0>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	0800452d 	.word	0x0800452d
 8004520:	0800453d 	.word	0x0800453d
 8004524:	08004535 	.word	0x08004535
 8004528:	08004545 	.word	0x08004545
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004532:	e116      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004534:	2302      	movs	r3, #2
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e112      	b.n	8004762 <UART_SetConfig+0x2e6>
 800453c:	2304      	movs	r3, #4
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e10e      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004544:	2308      	movs	r3, #8
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e10a      	b.n	8004762 <UART_SetConfig+0x2e6>
 800454c:	2310      	movs	r3, #16
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e106      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a7c      	ldr	r2, [pc, #496]	; (800474c <UART_SetConfig+0x2d0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d138      	bne.n	80045d0 <UART_SetConfig+0x154>
 800455e:	4b7a      	ldr	r3, [pc, #488]	; (8004748 <UART_SetConfig+0x2cc>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d82d      	bhi.n	80045c8 <UART_SetConfig+0x14c>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <UART_SetConfig+0xf8>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	080045a9 	.word	0x080045a9
 8004578:	080045c9 	.word	0x080045c9
 800457c:	080045c9 	.word	0x080045c9
 8004580:	080045c9 	.word	0x080045c9
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045c9 	.word	0x080045c9
 800458c:	080045c9 	.word	0x080045c9
 8004590:	080045c9 	.word	0x080045c9
 8004594:	080045b1 	.word	0x080045b1
 8004598:	080045c9 	.word	0x080045c9
 800459c:	080045c9 	.word	0x080045c9
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045c1 	.word	0x080045c1
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e0d8      	b.n	8004762 <UART_SetConfig+0x2e6>
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e0d4      	b.n	8004762 <UART_SetConfig+0x2e6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e0d0      	b.n	8004762 <UART_SetConfig+0x2e6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e0cc      	b.n	8004762 <UART_SetConfig+0x2e6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e0c8      	b.n	8004762 <UART_SetConfig+0x2e6>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a5e      	ldr	r2, [pc, #376]	; (8004750 <UART_SetConfig+0x2d4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d125      	bne.n	8004626 <UART_SetConfig+0x1aa>
 80045da:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <UART_SetConfig+0x2cc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045e4:	2b30      	cmp	r3, #48	; 0x30
 80045e6:	d016      	beq.n	8004616 <UART_SetConfig+0x19a>
 80045e8:	2b30      	cmp	r3, #48	; 0x30
 80045ea:	d818      	bhi.n	800461e <UART_SetConfig+0x1a2>
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d00a      	beq.n	8004606 <UART_SetConfig+0x18a>
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	d814      	bhi.n	800461e <UART_SetConfig+0x1a2>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <UART_SetConfig+0x182>
 80045f8:	2b10      	cmp	r3, #16
 80045fa:	d008      	beq.n	800460e <UART_SetConfig+0x192>
 80045fc:	e00f      	b.n	800461e <UART_SetConfig+0x1a2>
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004604:	e0ad      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004606:	2302      	movs	r3, #2
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460c:	e0a9      	b.n	8004762 <UART_SetConfig+0x2e6>
 800460e:	2304      	movs	r3, #4
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004614:	e0a5      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004616:	2308      	movs	r3, #8
 8004618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461c:	e0a1      	b.n	8004762 <UART_SetConfig+0x2e6>
 800461e:	2310      	movs	r3, #16
 8004620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004624:	e09d      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a4a      	ldr	r2, [pc, #296]	; (8004754 <UART_SetConfig+0x2d8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d125      	bne.n	800467c <UART_SetConfig+0x200>
 8004630:	4b45      	ldr	r3, [pc, #276]	; (8004748 <UART_SetConfig+0x2cc>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800463a:	2bc0      	cmp	r3, #192	; 0xc0
 800463c:	d016      	beq.n	800466c <UART_SetConfig+0x1f0>
 800463e:	2bc0      	cmp	r3, #192	; 0xc0
 8004640:	d818      	bhi.n	8004674 <UART_SetConfig+0x1f8>
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d00a      	beq.n	800465c <UART_SetConfig+0x1e0>
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d814      	bhi.n	8004674 <UART_SetConfig+0x1f8>
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <UART_SetConfig+0x1d8>
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d008      	beq.n	8004664 <UART_SetConfig+0x1e8>
 8004652:	e00f      	b.n	8004674 <UART_SetConfig+0x1f8>
 8004654:	2300      	movs	r3, #0
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e082      	b.n	8004762 <UART_SetConfig+0x2e6>
 800465c:	2302      	movs	r3, #2
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e07e      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004664:	2304      	movs	r3, #4
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e07a      	b.n	8004762 <UART_SetConfig+0x2e6>
 800466c:	2308      	movs	r3, #8
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e076      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004674:	2310      	movs	r3, #16
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e072      	b.n	8004762 <UART_SetConfig+0x2e6>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a35      	ldr	r2, [pc, #212]	; (8004758 <UART_SetConfig+0x2dc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d12a      	bne.n	80046dc <UART_SetConfig+0x260>
 8004686:	4b30      	ldr	r3, [pc, #192]	; (8004748 <UART_SetConfig+0x2cc>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004694:	d01a      	beq.n	80046cc <UART_SetConfig+0x250>
 8004696:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800469a:	d81b      	bhi.n	80046d4 <UART_SetConfig+0x258>
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	d00c      	beq.n	80046bc <UART_SetConfig+0x240>
 80046a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a6:	d815      	bhi.n	80046d4 <UART_SetConfig+0x258>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <UART_SetConfig+0x238>
 80046ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046b0:	d008      	beq.n	80046c4 <UART_SetConfig+0x248>
 80046b2:	e00f      	b.n	80046d4 <UART_SetConfig+0x258>
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e052      	b.n	8004762 <UART_SetConfig+0x2e6>
 80046bc:	2302      	movs	r3, #2
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c2:	e04e      	b.n	8004762 <UART_SetConfig+0x2e6>
 80046c4:	2304      	movs	r3, #4
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ca:	e04a      	b.n	8004762 <UART_SetConfig+0x2e6>
 80046cc:	2308      	movs	r3, #8
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d2:	e046      	b.n	8004762 <UART_SetConfig+0x2e6>
 80046d4:	2310      	movs	r3, #16
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046da:	e042      	b.n	8004762 <UART_SetConfig+0x2e6>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a17      	ldr	r2, [pc, #92]	; (8004740 <UART_SetConfig+0x2c4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d13a      	bne.n	800475c <UART_SetConfig+0x2e0>
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <UART_SetConfig+0x2cc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f4:	d01a      	beq.n	800472c <UART_SetConfig+0x2b0>
 80046f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046fa:	d81b      	bhi.n	8004734 <UART_SetConfig+0x2b8>
 80046fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004700:	d00c      	beq.n	800471c <UART_SetConfig+0x2a0>
 8004702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004706:	d815      	bhi.n	8004734 <UART_SetConfig+0x2b8>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <UART_SetConfig+0x298>
 800470c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004710:	d008      	beq.n	8004724 <UART_SetConfig+0x2a8>
 8004712:	e00f      	b.n	8004734 <UART_SetConfig+0x2b8>
 8004714:	2300      	movs	r3, #0
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800471a:	e022      	b.n	8004762 <UART_SetConfig+0x2e6>
 800471c:	2302      	movs	r3, #2
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e01e      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004724:	2304      	movs	r3, #4
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e01a      	b.n	8004762 <UART_SetConfig+0x2e6>
 800472c:	2308      	movs	r3, #8
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e016      	b.n	8004762 <UART_SetConfig+0x2e6>
 8004734:	2310      	movs	r3, #16
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e012      	b.n	8004762 <UART_SetConfig+0x2e6>
 800473c:	efff69f3 	.word	0xefff69f3
 8004740:	40008000 	.word	0x40008000
 8004744:	40013800 	.word	0x40013800
 8004748:	40021000 	.word	0x40021000
 800474c:	40004400 	.word	0x40004400
 8004750:	40004800 	.word	0x40004800
 8004754:	40004c00 	.word	0x40004c00
 8004758:	40005000 	.word	0x40005000
 800475c:	2310      	movs	r3, #16
 800475e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a9f      	ldr	r2, [pc, #636]	; (80049e4 <UART_SetConfig+0x568>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d17a      	bne.n	8004862 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800476c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004770:	2b08      	cmp	r3, #8
 8004772:	d824      	bhi.n	80047be <UART_SetConfig+0x342>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0x300>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047bf 	.word	0x080047bf
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047bf 	.word	0x080047bf
 800478c:	080047af 	.word	0x080047af
 8004790:	080047bf 	.word	0x080047bf
 8004794:	080047bf 	.word	0x080047bf
 8004798:	080047bf 	.word	0x080047bf
 800479c:	080047b7 	.word	0x080047b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7fd fe8c 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80047a4:	61f8      	str	r0, [r7, #28]
        break;
 80047a6:	e010      	b.n	80047ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a8:	4b8f      	ldr	r3, [pc, #572]	; (80049e8 <UART_SetConfig+0x56c>)
 80047aa:	61fb      	str	r3, [r7, #28]
        break;
 80047ac:	e00d      	b.n	80047ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ae:	f7fd fded 	bl	800238c <HAL_RCC_GetSysClockFreq>
 80047b2:	61f8      	str	r0, [r7, #28]
        break;
 80047b4:	e009      	b.n	80047ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	61fb      	str	r3, [r7, #28]
        break;
 80047bc:	e005      	b.n	80047ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80fb 	beq.w	80049c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d305      	bcc.n	80047ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d903      	bls.n	80047f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047f4:	e0e8      	b.n	80049c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2200      	movs	r2, #0
 80047fa:	461c      	mov	r4, r3
 80047fc:	4615      	mov	r5, r2
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	022b      	lsls	r3, r5, #8
 8004808:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800480c:	0222      	lsls	r2, r4, #8
 800480e:	68f9      	ldr	r1, [r7, #12]
 8004810:	6849      	ldr	r1, [r1, #4]
 8004812:	0849      	lsrs	r1, r1, #1
 8004814:	2000      	movs	r0, #0
 8004816:	4688      	mov	r8, r1
 8004818:	4681      	mov	r9, r0
 800481a:	eb12 0a08 	adds.w	sl, r2, r8
 800481e:	eb43 0b09 	adc.w	fp, r3, r9
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004830:	4650      	mov	r0, sl
 8004832:	4659      	mov	r1, fp
 8004834:	f7fb fcda 	bl	80001ec <__aeabi_uldivmod>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4613      	mov	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004846:	d308      	bcc.n	800485a <UART_SetConfig+0x3de>
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484e:	d204      	bcs.n	800485a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e0b6      	b.n	80049c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004860:	e0b2      	b.n	80049c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486a:	d15e      	bne.n	800492a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800486c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004870:	2b08      	cmp	r3, #8
 8004872:	d828      	bhi.n	80048c6 <UART_SetConfig+0x44a>
 8004874:	a201      	add	r2, pc, #4	; (adr r2, 800487c <UART_SetConfig+0x400>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
 8004888:	080048c7 	.word	0x080048c7
 800488c:	080048b7 	.word	0x080048b7
 8004890:	080048c7 	.word	0x080048c7
 8004894:	080048c7 	.word	0x080048c7
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048bf 	.word	0x080048bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a0:	f7fd fe0c 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 80048a4:	61f8      	str	r0, [r7, #28]
        break;
 80048a6:	e014      	b.n	80048d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a8:	f7fd fe1e 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
        break;
 80048ae:	e010      	b.n	80048d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b4d      	ldr	r3, [pc, #308]	; (80049e8 <UART_SetConfig+0x56c>)
 80048b2:	61fb      	str	r3, [r7, #28]
        break;
 80048b4:	e00d      	b.n	80048d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fd fd69 	bl	800238c <HAL_RCC_GetSysClockFreq>
 80048ba:	61f8      	str	r0, [r7, #28]
        break;
 80048bc:	e009      	b.n	80048d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c2:	61fb      	str	r3, [r7, #28]
        break;
 80048c4:	e005      	b.n	80048d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d077      	beq.n	80049c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005a      	lsls	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	441a      	add	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b0f      	cmp	r3, #15
 80048f2:	d916      	bls.n	8004922 <UART_SetConfig+0x4a6>
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d212      	bcs.n	8004922 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f023 030f 	bic.w	r3, r3, #15
 8004904:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	b29b      	uxth	r3, r3
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	b29a      	uxth	r2, r3
 8004912:	8afb      	ldrh	r3, [r7, #22]
 8004914:	4313      	orrs	r3, r2
 8004916:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	8afa      	ldrh	r2, [r7, #22]
 800491e:	60da      	str	r2, [r3, #12]
 8004920:	e052      	b.n	80049c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004928:	e04e      	b.n	80049c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800492a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800492e:	2b08      	cmp	r3, #8
 8004930:	d827      	bhi.n	8004982 <UART_SetConfig+0x506>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x4bc>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800495d 	.word	0x0800495d
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004983 	.word	0x08004983
 8004948:	08004973 	.word	0x08004973
 800494c:	08004983 	.word	0x08004983
 8004950:	08004983 	.word	0x08004983
 8004954:	08004983 	.word	0x08004983
 8004958:	0800497b 	.word	0x0800497b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fd fdae 	bl	80024bc <HAL_RCC_GetPCLK1Freq>
 8004960:	61f8      	str	r0, [r7, #28]
        break;
 8004962:	e014      	b.n	800498e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fd fdc0 	bl	80024e8 <HAL_RCC_GetPCLK2Freq>
 8004968:	61f8      	str	r0, [r7, #28]
        break;
 800496a:	e010      	b.n	800498e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800496c:	4b1e      	ldr	r3, [pc, #120]	; (80049e8 <UART_SetConfig+0x56c>)
 800496e:	61fb      	str	r3, [r7, #28]
        break;
 8004970:	e00d      	b.n	800498e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004972:	f7fd fd0b 	bl	800238c <HAL_RCC_GetSysClockFreq>
 8004976:	61f8      	str	r0, [r7, #28]
        break;
 8004978:	e009      	b.n	800498e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800497a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497e:	61fb      	str	r3, [r7, #28]
        break;
 8004980:	e005      	b.n	800498e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800498c:	bf00      	nop
    }

    if (pclk != 0U)
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d019      	beq.n	80049c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	085a      	lsrs	r2, r3, #1
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	441a      	add	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b0f      	cmp	r3, #15
 80049ac:	d909      	bls.n	80049c2 <UART_SetConfig+0x546>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b4:	d205      	bcs.n	80049c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60da      	str	r2, [r3, #12]
 80049c0:	e002      	b.n	80049c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3728      	adds	r7, #40	; 0x28
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	40008000 	.word	0x40008000
 80049e8:	00f42400 	.word	0x00f42400

080049ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d10a      	bne.n	8004b02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b40:	f7fc fb2c 	bl	800119c <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d10e      	bne.n	8004b72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f82d 	bl	8004bc2 <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e023      	b.n	8004bba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d10e      	bne.n	8004b9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f817 	bl	8004bc2 <UART_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e00d      	b.n	8004bba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b09c      	sub	sp, #112	; 0x70
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd2:	e0a5      	b.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bda:	f000 80a1 	beq.w	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bde:	f7fc fadd 	bl	800119c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d302      	bcc.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d13e      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c08:	667b      	str	r3, [r7, #100]	; 0x64
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e6      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c46:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e5      	bne.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e067      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d04f      	beq.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8e:	d147      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c98:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e6      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	613b      	str	r3, [r7, #16]
   return(result);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3308      	adds	r3, #8
 8004cea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cec:	623a      	str	r2, [r7, #32]
 8004cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	69f9      	ldr	r1, [r7, #28]
 8004cf2:	6a3a      	ldr	r2, [r7, #32]
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e010      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	f43f af4a 	beq.w	8004bd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3770      	adds	r7, #112	; 0x70
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <__errno>:
 8004d4c:	4b01      	ldr	r3, [pc, #4]	; (8004d54 <__errno+0x8>)
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000010 	.word	0x20000010

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	; (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	; (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	; (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f000 fd1e 	bl	80057ac <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	080058d4 	.word	0x080058d4
 8004d94:	080058d4 	.word	0x080058d4
 8004d98:	080058d4 	.word	0x080058d4
 8004d9c:	080058d8 	.word	0x080058d8

08004da0 <memset>:
 8004da0:	4402      	add	r2, r0
 8004da2:	4603      	mov	r3, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_puts_r>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	460e      	mov	r6, r1
 8004db4:	4605      	mov	r5, r0
 8004db6:	b118      	cbz	r0, 8004dc0 <_puts_r+0x10>
 8004db8:	6983      	ldr	r3, [r0, #24]
 8004dba:	b90b      	cbnz	r3, 8004dc0 <_puts_r+0x10>
 8004dbc:	f000 fa48 	bl	8005250 <__sinit>
 8004dc0:	69ab      	ldr	r3, [r5, #24]
 8004dc2:	68ac      	ldr	r4, [r5, #8]
 8004dc4:	b913      	cbnz	r3, 8004dcc <_puts_r+0x1c>
 8004dc6:	4628      	mov	r0, r5
 8004dc8:	f000 fa42 	bl	8005250 <__sinit>
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <_puts_r+0xd0>)
 8004dce:	429c      	cmp	r4, r3
 8004dd0:	d120      	bne.n	8004e14 <_puts_r+0x64>
 8004dd2:	686c      	ldr	r4, [r5, #4]
 8004dd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dd6:	07db      	lsls	r3, r3, #31
 8004dd8:	d405      	bmi.n	8004de6 <_puts_r+0x36>
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	0598      	lsls	r0, r3, #22
 8004dde:	d402      	bmi.n	8004de6 <_puts_r+0x36>
 8004de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004de2:	f000 fad3 	bl	800538c <__retarget_lock_acquire_recursive>
 8004de6:	89a3      	ldrh	r3, [r4, #12]
 8004de8:	0719      	lsls	r1, r3, #28
 8004dea:	d51d      	bpl.n	8004e28 <_puts_r+0x78>
 8004dec:	6923      	ldr	r3, [r4, #16]
 8004dee:	b1db      	cbz	r3, 8004e28 <_puts_r+0x78>
 8004df0:	3e01      	subs	r6, #1
 8004df2:	68a3      	ldr	r3, [r4, #8]
 8004df4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60a3      	str	r3, [r4, #8]
 8004dfc:	bb39      	cbnz	r1, 8004e4e <_puts_r+0x9e>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da38      	bge.n	8004e74 <_puts_r+0xc4>
 8004e02:	4622      	mov	r2, r4
 8004e04:	210a      	movs	r1, #10
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 f848 	bl	8004e9c <__swbuf_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d011      	beq.n	8004e34 <_puts_r+0x84>
 8004e10:	250a      	movs	r5, #10
 8004e12:	e011      	b.n	8004e38 <_puts_r+0x88>
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <_puts_r+0xd4>)
 8004e16:	429c      	cmp	r4, r3
 8004e18:	d101      	bne.n	8004e1e <_puts_r+0x6e>
 8004e1a:	68ac      	ldr	r4, [r5, #8]
 8004e1c:	e7da      	b.n	8004dd4 <_puts_r+0x24>
 8004e1e:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <_puts_r+0xd8>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	bf08      	it	eq
 8004e24:	68ec      	ldreq	r4, [r5, #12]
 8004e26:	e7d5      	b.n	8004dd4 <_puts_r+0x24>
 8004e28:	4621      	mov	r1, r4
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f000 f888 	bl	8004f40 <__swsetup_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d0dd      	beq.n	8004df0 <_puts_r+0x40>
 8004e34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e3a:	07da      	lsls	r2, r3, #31
 8004e3c:	d405      	bmi.n	8004e4a <_puts_r+0x9a>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	059b      	lsls	r3, r3, #22
 8004e42:	d402      	bmi.n	8004e4a <_puts_r+0x9a>
 8004e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e46:	f000 faa2 	bl	800538e <__retarget_lock_release_recursive>
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	da04      	bge.n	8004e5c <_puts_r+0xac>
 8004e52:	69a2      	ldr	r2, [r4, #24]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	dc06      	bgt.n	8004e66 <_puts_r+0xb6>
 8004e58:	290a      	cmp	r1, #10
 8004e5a:	d004      	beq.n	8004e66 <_puts_r+0xb6>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	6022      	str	r2, [r4, #0]
 8004e62:	7019      	strb	r1, [r3, #0]
 8004e64:	e7c5      	b.n	8004df2 <_puts_r+0x42>
 8004e66:	4622      	mov	r2, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 f817 	bl	8004e9c <__swbuf_r>
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d1bf      	bne.n	8004df2 <_puts_r+0x42>
 8004e72:	e7df      	b.n	8004e34 <_puts_r+0x84>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	250a      	movs	r5, #10
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	701d      	strb	r5, [r3, #0]
 8004e7e:	e7db      	b.n	8004e38 <_puts_r+0x88>
 8004e80:	0800588c 	.word	0x0800588c
 8004e84:	080058ac 	.word	0x080058ac
 8004e88:	0800586c 	.word	0x0800586c

08004e8c <puts>:
 8004e8c:	4b02      	ldr	r3, [pc, #8]	; (8004e98 <puts+0xc>)
 8004e8e:	4601      	mov	r1, r0
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f7ff bf8d 	b.w	8004db0 <_puts_r>
 8004e96:	bf00      	nop
 8004e98:	20000010 	.word	0x20000010

08004e9c <__swbuf_r>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	460e      	mov	r6, r1
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	b118      	cbz	r0, 8004eae <__swbuf_r+0x12>
 8004ea6:	6983      	ldr	r3, [r0, #24]
 8004ea8:	b90b      	cbnz	r3, 8004eae <__swbuf_r+0x12>
 8004eaa:	f000 f9d1 	bl	8005250 <__sinit>
 8004eae:	4b21      	ldr	r3, [pc, #132]	; (8004f34 <__swbuf_r+0x98>)
 8004eb0:	429c      	cmp	r4, r3
 8004eb2:	d12b      	bne.n	8004f0c <__swbuf_r+0x70>
 8004eb4:	686c      	ldr	r4, [r5, #4]
 8004eb6:	69a3      	ldr	r3, [r4, #24]
 8004eb8:	60a3      	str	r3, [r4, #8]
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	071a      	lsls	r2, r3, #28
 8004ebe:	d52f      	bpl.n	8004f20 <__swbuf_r+0x84>
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	b36b      	cbz	r3, 8004f20 <__swbuf_r+0x84>
 8004ec4:	6923      	ldr	r3, [r4, #16]
 8004ec6:	6820      	ldr	r0, [r4, #0]
 8004ec8:	1ac0      	subs	r0, r0, r3
 8004eca:	6963      	ldr	r3, [r4, #20]
 8004ecc:	b2f6      	uxtb	r6, r6
 8004ece:	4283      	cmp	r3, r0
 8004ed0:	4637      	mov	r7, r6
 8004ed2:	dc04      	bgt.n	8004ede <__swbuf_r+0x42>
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f000 f926 	bl	8005128 <_fflush_r>
 8004edc:	bb30      	cbnz	r0, 8004f2c <__swbuf_r+0x90>
 8004ede:	68a3      	ldr	r3, [r4, #8]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60a3      	str	r3, [r4, #8]
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	6022      	str	r2, [r4, #0]
 8004eea:	701e      	strb	r6, [r3, #0]
 8004eec:	6963      	ldr	r3, [r4, #20]
 8004eee:	3001      	adds	r0, #1
 8004ef0:	4283      	cmp	r3, r0
 8004ef2:	d004      	beq.n	8004efe <__swbuf_r+0x62>
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	07db      	lsls	r3, r3, #31
 8004ef8:	d506      	bpl.n	8004f08 <__swbuf_r+0x6c>
 8004efa:	2e0a      	cmp	r6, #10
 8004efc:	d104      	bne.n	8004f08 <__swbuf_r+0x6c>
 8004efe:	4621      	mov	r1, r4
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 f911 	bl	8005128 <_fflush_r>
 8004f06:	b988      	cbnz	r0, 8004f2c <__swbuf_r+0x90>
 8004f08:	4638      	mov	r0, r7
 8004f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	; (8004f38 <__swbuf_r+0x9c>)
 8004f0e:	429c      	cmp	r4, r3
 8004f10:	d101      	bne.n	8004f16 <__swbuf_r+0x7a>
 8004f12:	68ac      	ldr	r4, [r5, #8]
 8004f14:	e7cf      	b.n	8004eb6 <__swbuf_r+0x1a>
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <__swbuf_r+0xa0>)
 8004f18:	429c      	cmp	r4, r3
 8004f1a:	bf08      	it	eq
 8004f1c:	68ec      	ldreq	r4, [r5, #12]
 8004f1e:	e7ca      	b.n	8004eb6 <__swbuf_r+0x1a>
 8004f20:	4621      	mov	r1, r4
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 f80c 	bl	8004f40 <__swsetup_r>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d0cb      	beq.n	8004ec4 <__swbuf_r+0x28>
 8004f2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f30:	e7ea      	b.n	8004f08 <__swbuf_r+0x6c>
 8004f32:	bf00      	nop
 8004f34:	0800588c 	.word	0x0800588c
 8004f38:	080058ac 	.word	0x080058ac
 8004f3c:	0800586c 	.word	0x0800586c

08004f40 <__swsetup_r>:
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <__swsetup_r+0xcc>)
 8004f42:	b570      	push	{r4, r5, r6, lr}
 8004f44:	681d      	ldr	r5, [r3, #0]
 8004f46:	4606      	mov	r6, r0
 8004f48:	460c      	mov	r4, r1
 8004f4a:	b125      	cbz	r5, 8004f56 <__swsetup_r+0x16>
 8004f4c:	69ab      	ldr	r3, [r5, #24]
 8004f4e:	b913      	cbnz	r3, 8004f56 <__swsetup_r+0x16>
 8004f50:	4628      	mov	r0, r5
 8004f52:	f000 f97d 	bl	8005250 <__sinit>
 8004f56:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <__swsetup_r+0xd0>)
 8004f58:	429c      	cmp	r4, r3
 8004f5a:	d10f      	bne.n	8004f7c <__swsetup_r+0x3c>
 8004f5c:	686c      	ldr	r4, [r5, #4]
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f64:	0719      	lsls	r1, r3, #28
 8004f66:	d42c      	bmi.n	8004fc2 <__swsetup_r+0x82>
 8004f68:	06dd      	lsls	r5, r3, #27
 8004f6a:	d411      	bmi.n	8004f90 <__swsetup_r+0x50>
 8004f6c:	2309      	movs	r3, #9
 8004f6e:	6033      	str	r3, [r6, #0]
 8004f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7a:	e03e      	b.n	8004ffa <__swsetup_r+0xba>
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <__swsetup_r+0xd4>)
 8004f7e:	429c      	cmp	r4, r3
 8004f80:	d101      	bne.n	8004f86 <__swsetup_r+0x46>
 8004f82:	68ac      	ldr	r4, [r5, #8]
 8004f84:	e7eb      	b.n	8004f5e <__swsetup_r+0x1e>
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <__swsetup_r+0xd8>)
 8004f88:	429c      	cmp	r4, r3
 8004f8a:	bf08      	it	eq
 8004f8c:	68ec      	ldreq	r4, [r5, #12]
 8004f8e:	e7e6      	b.n	8004f5e <__swsetup_r+0x1e>
 8004f90:	0758      	lsls	r0, r3, #29
 8004f92:	d512      	bpl.n	8004fba <__swsetup_r+0x7a>
 8004f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f96:	b141      	cbz	r1, 8004faa <__swsetup_r+0x6a>
 8004f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	d002      	beq.n	8004fa6 <__swsetup_r+0x66>
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 fa5b 	bl	800545c <_free_r>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004fb0:	81a3      	strh	r3, [r4, #12]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	6923      	ldr	r3, [r4, #16]
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	f043 0308 	orr.w	r3, r3, #8
 8004fc0:	81a3      	strh	r3, [r4, #12]
 8004fc2:	6923      	ldr	r3, [r4, #16]
 8004fc4:	b94b      	cbnz	r3, 8004fda <__swsetup_r+0x9a>
 8004fc6:	89a3      	ldrh	r3, [r4, #12]
 8004fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd0:	d003      	beq.n	8004fda <__swsetup_r+0x9a>
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f000 fa01 	bl	80053dc <__smakebuf_r>
 8004fda:	89a0      	ldrh	r0, [r4, #12]
 8004fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fe0:	f010 0301 	ands.w	r3, r0, #1
 8004fe4:	d00a      	beq.n	8004ffc <__swsetup_r+0xbc>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	6963      	ldr	r3, [r4, #20]
 8004fec:	425b      	negs	r3, r3
 8004fee:	61a3      	str	r3, [r4, #24]
 8004ff0:	6923      	ldr	r3, [r4, #16]
 8004ff2:	b943      	cbnz	r3, 8005006 <__swsetup_r+0xc6>
 8004ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ff8:	d1ba      	bne.n	8004f70 <__swsetup_r+0x30>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	0781      	lsls	r1, r0, #30
 8004ffe:	bf58      	it	pl
 8005000:	6963      	ldrpl	r3, [r4, #20]
 8005002:	60a3      	str	r3, [r4, #8]
 8005004:	e7f4      	b.n	8004ff0 <__swsetup_r+0xb0>
 8005006:	2000      	movs	r0, #0
 8005008:	e7f7      	b.n	8004ffa <__swsetup_r+0xba>
 800500a:	bf00      	nop
 800500c:	20000010 	.word	0x20000010
 8005010:	0800588c 	.word	0x0800588c
 8005014:	080058ac 	.word	0x080058ac
 8005018:	0800586c 	.word	0x0800586c

0800501c <__sflush_r>:
 800501c:	898a      	ldrh	r2, [r1, #12]
 800501e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005022:	4605      	mov	r5, r0
 8005024:	0710      	lsls	r0, r2, #28
 8005026:	460c      	mov	r4, r1
 8005028:	d458      	bmi.n	80050dc <__sflush_r+0xc0>
 800502a:	684b      	ldr	r3, [r1, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	dc05      	bgt.n	800503c <__sflush_r+0x20>
 8005030:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	dc02      	bgt.n	800503c <__sflush_r+0x20>
 8005036:	2000      	movs	r0, #0
 8005038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800503c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800503e:	2e00      	cmp	r6, #0
 8005040:	d0f9      	beq.n	8005036 <__sflush_r+0x1a>
 8005042:	2300      	movs	r3, #0
 8005044:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005048:	682f      	ldr	r7, [r5, #0]
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	d032      	beq.n	80050b4 <__sflush_r+0x98>
 800504e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	075a      	lsls	r2, r3, #29
 8005054:	d505      	bpl.n	8005062 <__sflush_r+0x46>
 8005056:	6863      	ldr	r3, [r4, #4]
 8005058:	1ac0      	subs	r0, r0, r3
 800505a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800505c:	b10b      	cbz	r3, 8005062 <__sflush_r+0x46>
 800505e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005060:	1ac0      	subs	r0, r0, r3
 8005062:	2300      	movs	r3, #0
 8005064:	4602      	mov	r2, r0
 8005066:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005068:	6a21      	ldr	r1, [r4, #32]
 800506a:	4628      	mov	r0, r5
 800506c:	47b0      	blx	r6
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	d106      	bne.n	8005082 <__sflush_r+0x66>
 8005074:	6829      	ldr	r1, [r5, #0]
 8005076:	291d      	cmp	r1, #29
 8005078:	d82c      	bhi.n	80050d4 <__sflush_r+0xb8>
 800507a:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <__sflush_r+0x108>)
 800507c:	40ca      	lsrs	r2, r1
 800507e:	07d6      	lsls	r6, r2, #31
 8005080:	d528      	bpl.n	80050d4 <__sflush_r+0xb8>
 8005082:	2200      	movs	r2, #0
 8005084:	6062      	str	r2, [r4, #4]
 8005086:	04d9      	lsls	r1, r3, #19
 8005088:	6922      	ldr	r2, [r4, #16]
 800508a:	6022      	str	r2, [r4, #0]
 800508c:	d504      	bpl.n	8005098 <__sflush_r+0x7c>
 800508e:	1c42      	adds	r2, r0, #1
 8005090:	d101      	bne.n	8005096 <__sflush_r+0x7a>
 8005092:	682b      	ldr	r3, [r5, #0]
 8005094:	b903      	cbnz	r3, 8005098 <__sflush_r+0x7c>
 8005096:	6560      	str	r0, [r4, #84]	; 0x54
 8005098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800509a:	602f      	str	r7, [r5, #0]
 800509c:	2900      	cmp	r1, #0
 800509e:	d0ca      	beq.n	8005036 <__sflush_r+0x1a>
 80050a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050a4:	4299      	cmp	r1, r3
 80050a6:	d002      	beq.n	80050ae <__sflush_r+0x92>
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f9d7 	bl	800545c <_free_r>
 80050ae:	2000      	movs	r0, #0
 80050b0:	6360      	str	r0, [r4, #52]	; 0x34
 80050b2:	e7c1      	b.n	8005038 <__sflush_r+0x1c>
 80050b4:	6a21      	ldr	r1, [r4, #32]
 80050b6:	2301      	movs	r3, #1
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b0      	blx	r6
 80050bc:	1c41      	adds	r1, r0, #1
 80050be:	d1c7      	bne.n	8005050 <__sflush_r+0x34>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0c4      	beq.n	8005050 <__sflush_r+0x34>
 80050c6:	2b1d      	cmp	r3, #29
 80050c8:	d001      	beq.n	80050ce <__sflush_r+0xb2>
 80050ca:	2b16      	cmp	r3, #22
 80050cc:	d101      	bne.n	80050d2 <__sflush_r+0xb6>
 80050ce:	602f      	str	r7, [r5, #0]
 80050d0:	e7b1      	b.n	8005036 <__sflush_r+0x1a>
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d8:	81a3      	strh	r3, [r4, #12]
 80050da:	e7ad      	b.n	8005038 <__sflush_r+0x1c>
 80050dc:	690f      	ldr	r7, [r1, #16]
 80050de:	2f00      	cmp	r7, #0
 80050e0:	d0a9      	beq.n	8005036 <__sflush_r+0x1a>
 80050e2:	0793      	lsls	r3, r2, #30
 80050e4:	680e      	ldr	r6, [r1, #0]
 80050e6:	bf08      	it	eq
 80050e8:	694b      	ldreq	r3, [r1, #20]
 80050ea:	600f      	str	r7, [r1, #0]
 80050ec:	bf18      	it	ne
 80050ee:	2300      	movne	r3, #0
 80050f0:	eba6 0807 	sub.w	r8, r6, r7
 80050f4:	608b      	str	r3, [r1, #8]
 80050f6:	f1b8 0f00 	cmp.w	r8, #0
 80050fa:	dd9c      	ble.n	8005036 <__sflush_r+0x1a>
 80050fc:	6a21      	ldr	r1, [r4, #32]
 80050fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005100:	4643      	mov	r3, r8
 8005102:	463a      	mov	r2, r7
 8005104:	4628      	mov	r0, r5
 8005106:	47b0      	blx	r6
 8005108:	2800      	cmp	r0, #0
 800510a:	dc06      	bgt.n	800511a <__sflush_r+0xfe>
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005118:	e78e      	b.n	8005038 <__sflush_r+0x1c>
 800511a:	4407      	add	r7, r0
 800511c:	eba8 0800 	sub.w	r8, r8, r0
 8005120:	e7e9      	b.n	80050f6 <__sflush_r+0xda>
 8005122:	bf00      	nop
 8005124:	20400001 	.word	0x20400001

08005128 <_fflush_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	690b      	ldr	r3, [r1, #16]
 800512c:	4605      	mov	r5, r0
 800512e:	460c      	mov	r4, r1
 8005130:	b913      	cbnz	r3, 8005138 <_fflush_r+0x10>
 8005132:	2500      	movs	r5, #0
 8005134:	4628      	mov	r0, r5
 8005136:	bd38      	pop	{r3, r4, r5, pc}
 8005138:	b118      	cbz	r0, 8005142 <_fflush_r+0x1a>
 800513a:	6983      	ldr	r3, [r0, #24]
 800513c:	b90b      	cbnz	r3, 8005142 <_fflush_r+0x1a>
 800513e:	f000 f887 	bl	8005250 <__sinit>
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <_fflush_r+0x6c>)
 8005144:	429c      	cmp	r4, r3
 8005146:	d11b      	bne.n	8005180 <_fflush_r+0x58>
 8005148:	686c      	ldr	r4, [r5, #4]
 800514a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0ef      	beq.n	8005132 <_fflush_r+0xa>
 8005152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005154:	07d0      	lsls	r0, r2, #31
 8005156:	d404      	bmi.n	8005162 <_fflush_r+0x3a>
 8005158:	0599      	lsls	r1, r3, #22
 800515a:	d402      	bmi.n	8005162 <_fflush_r+0x3a>
 800515c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800515e:	f000 f915 	bl	800538c <__retarget_lock_acquire_recursive>
 8005162:	4628      	mov	r0, r5
 8005164:	4621      	mov	r1, r4
 8005166:	f7ff ff59 	bl	800501c <__sflush_r>
 800516a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800516c:	07da      	lsls	r2, r3, #31
 800516e:	4605      	mov	r5, r0
 8005170:	d4e0      	bmi.n	8005134 <_fflush_r+0xc>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	059b      	lsls	r3, r3, #22
 8005176:	d4dd      	bmi.n	8005134 <_fflush_r+0xc>
 8005178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517a:	f000 f908 	bl	800538e <__retarget_lock_release_recursive>
 800517e:	e7d9      	b.n	8005134 <_fflush_r+0xc>
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <_fflush_r+0x70>)
 8005182:	429c      	cmp	r4, r3
 8005184:	d101      	bne.n	800518a <_fflush_r+0x62>
 8005186:	68ac      	ldr	r4, [r5, #8]
 8005188:	e7df      	b.n	800514a <_fflush_r+0x22>
 800518a:	4b04      	ldr	r3, [pc, #16]	; (800519c <_fflush_r+0x74>)
 800518c:	429c      	cmp	r4, r3
 800518e:	bf08      	it	eq
 8005190:	68ec      	ldreq	r4, [r5, #12]
 8005192:	e7da      	b.n	800514a <_fflush_r+0x22>
 8005194:	0800588c 	.word	0x0800588c
 8005198:	080058ac 	.word	0x080058ac
 800519c:	0800586c 	.word	0x0800586c

080051a0 <std>:
 80051a0:	2300      	movs	r3, #0
 80051a2:	b510      	push	{r4, lr}
 80051a4:	4604      	mov	r4, r0
 80051a6:	e9c0 3300 	strd	r3, r3, [r0]
 80051aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ae:	6083      	str	r3, [r0, #8]
 80051b0:	8181      	strh	r1, [r0, #12]
 80051b2:	6643      	str	r3, [r0, #100]	; 0x64
 80051b4:	81c2      	strh	r2, [r0, #14]
 80051b6:	6183      	str	r3, [r0, #24]
 80051b8:	4619      	mov	r1, r3
 80051ba:	2208      	movs	r2, #8
 80051bc:	305c      	adds	r0, #92	; 0x5c
 80051be:	f7ff fdef 	bl	8004da0 <memset>
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <std+0x38>)
 80051c4:	6263      	str	r3, [r4, #36]	; 0x24
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <std+0x3c>)
 80051c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <std+0x40>)
 80051cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051ce:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <std+0x44>)
 80051d0:	6224      	str	r4, [r4, #32]
 80051d2:	6323      	str	r3, [r4, #48]	; 0x30
 80051d4:	bd10      	pop	{r4, pc}
 80051d6:	bf00      	nop
 80051d8:	0800563d 	.word	0x0800563d
 80051dc:	0800565f 	.word	0x0800565f
 80051e0:	08005697 	.word	0x08005697
 80051e4:	080056bb 	.word	0x080056bb

080051e8 <_cleanup_r>:
 80051e8:	4901      	ldr	r1, [pc, #4]	; (80051f0 <_cleanup_r+0x8>)
 80051ea:	f000 b8af 	b.w	800534c <_fwalk_reent>
 80051ee:	bf00      	nop
 80051f0:	08005129 	.word	0x08005129

080051f4 <__sfmoreglue>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	2268      	movs	r2, #104	; 0x68
 80051f8:	1e4d      	subs	r5, r1, #1
 80051fa:	4355      	muls	r5, r2
 80051fc:	460e      	mov	r6, r1
 80051fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005202:	f000 f997 	bl	8005534 <_malloc_r>
 8005206:	4604      	mov	r4, r0
 8005208:	b140      	cbz	r0, 800521c <__sfmoreglue+0x28>
 800520a:	2100      	movs	r1, #0
 800520c:	e9c0 1600 	strd	r1, r6, [r0]
 8005210:	300c      	adds	r0, #12
 8005212:	60a0      	str	r0, [r4, #8]
 8005214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005218:	f7ff fdc2 	bl	8004da0 <memset>
 800521c:	4620      	mov	r0, r4
 800521e:	bd70      	pop	{r4, r5, r6, pc}

08005220 <__sfp_lock_acquire>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__sfp_lock_acquire+0x8>)
 8005222:	f000 b8b3 	b.w	800538c <__retarget_lock_acquire_recursive>
 8005226:	bf00      	nop
 8005228:	200001ed 	.word	0x200001ed

0800522c <__sfp_lock_release>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__sfp_lock_release+0x8>)
 800522e:	f000 b8ae 	b.w	800538e <__retarget_lock_release_recursive>
 8005232:	bf00      	nop
 8005234:	200001ed 	.word	0x200001ed

08005238 <__sinit_lock_acquire>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__sinit_lock_acquire+0x8>)
 800523a:	f000 b8a7 	b.w	800538c <__retarget_lock_acquire_recursive>
 800523e:	bf00      	nop
 8005240:	200001ee 	.word	0x200001ee

08005244 <__sinit_lock_release>:
 8005244:	4801      	ldr	r0, [pc, #4]	; (800524c <__sinit_lock_release+0x8>)
 8005246:	f000 b8a2 	b.w	800538e <__retarget_lock_release_recursive>
 800524a:	bf00      	nop
 800524c:	200001ee 	.word	0x200001ee

08005250 <__sinit>:
 8005250:	b510      	push	{r4, lr}
 8005252:	4604      	mov	r4, r0
 8005254:	f7ff fff0 	bl	8005238 <__sinit_lock_acquire>
 8005258:	69a3      	ldr	r3, [r4, #24]
 800525a:	b11b      	cbz	r3, 8005264 <__sinit+0x14>
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005260:	f7ff bff0 	b.w	8005244 <__sinit_lock_release>
 8005264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005268:	6523      	str	r3, [r4, #80]	; 0x50
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <__sinit+0x68>)
 800526c:	4a13      	ldr	r2, [pc, #76]	; (80052bc <__sinit+0x6c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	62a2      	str	r2, [r4, #40]	; 0x28
 8005272:	42a3      	cmp	r3, r4
 8005274:	bf04      	itt	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	61a3      	streq	r3, [r4, #24]
 800527a:	4620      	mov	r0, r4
 800527c:	f000 f820 	bl	80052c0 <__sfp>
 8005280:	6060      	str	r0, [r4, #4]
 8005282:	4620      	mov	r0, r4
 8005284:	f000 f81c 	bl	80052c0 <__sfp>
 8005288:	60a0      	str	r0, [r4, #8]
 800528a:	4620      	mov	r0, r4
 800528c:	f000 f818 	bl	80052c0 <__sfp>
 8005290:	2200      	movs	r2, #0
 8005292:	60e0      	str	r0, [r4, #12]
 8005294:	2104      	movs	r1, #4
 8005296:	6860      	ldr	r0, [r4, #4]
 8005298:	f7ff ff82 	bl	80051a0 <std>
 800529c:	68a0      	ldr	r0, [r4, #8]
 800529e:	2201      	movs	r2, #1
 80052a0:	2109      	movs	r1, #9
 80052a2:	f7ff ff7d 	bl	80051a0 <std>
 80052a6:	68e0      	ldr	r0, [r4, #12]
 80052a8:	2202      	movs	r2, #2
 80052aa:	2112      	movs	r1, #18
 80052ac:	f7ff ff78 	bl	80051a0 <std>
 80052b0:	2301      	movs	r3, #1
 80052b2:	61a3      	str	r3, [r4, #24]
 80052b4:	e7d2      	b.n	800525c <__sinit+0xc>
 80052b6:	bf00      	nop
 80052b8:	08005868 	.word	0x08005868
 80052bc:	080051e9 	.word	0x080051e9

080052c0 <__sfp>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	4607      	mov	r7, r0
 80052c4:	f7ff ffac 	bl	8005220 <__sfp_lock_acquire>
 80052c8:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <__sfp+0x84>)
 80052ca:	681e      	ldr	r6, [r3, #0]
 80052cc:	69b3      	ldr	r3, [r6, #24]
 80052ce:	b913      	cbnz	r3, 80052d6 <__sfp+0x16>
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7ff ffbd 	bl	8005250 <__sinit>
 80052d6:	3648      	adds	r6, #72	; 0x48
 80052d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052dc:	3b01      	subs	r3, #1
 80052de:	d503      	bpl.n	80052e8 <__sfp+0x28>
 80052e0:	6833      	ldr	r3, [r6, #0]
 80052e2:	b30b      	cbz	r3, 8005328 <__sfp+0x68>
 80052e4:	6836      	ldr	r6, [r6, #0]
 80052e6:	e7f7      	b.n	80052d8 <__sfp+0x18>
 80052e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052ec:	b9d5      	cbnz	r5, 8005324 <__sfp+0x64>
 80052ee:	4b16      	ldr	r3, [pc, #88]	; (8005348 <__sfp+0x88>)
 80052f0:	60e3      	str	r3, [r4, #12]
 80052f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052f6:	6665      	str	r5, [r4, #100]	; 0x64
 80052f8:	f000 f847 	bl	800538a <__retarget_lock_init_recursive>
 80052fc:	f7ff ff96 	bl	800522c <__sfp_lock_release>
 8005300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005308:	6025      	str	r5, [r4, #0]
 800530a:	61a5      	str	r5, [r4, #24]
 800530c:	2208      	movs	r2, #8
 800530e:	4629      	mov	r1, r5
 8005310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005314:	f7ff fd44 	bl	8004da0 <memset>
 8005318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800531c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005320:	4620      	mov	r0, r4
 8005322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005324:	3468      	adds	r4, #104	; 0x68
 8005326:	e7d9      	b.n	80052dc <__sfp+0x1c>
 8005328:	2104      	movs	r1, #4
 800532a:	4638      	mov	r0, r7
 800532c:	f7ff ff62 	bl	80051f4 <__sfmoreglue>
 8005330:	4604      	mov	r4, r0
 8005332:	6030      	str	r0, [r6, #0]
 8005334:	2800      	cmp	r0, #0
 8005336:	d1d5      	bne.n	80052e4 <__sfp+0x24>
 8005338:	f7ff ff78 	bl	800522c <__sfp_lock_release>
 800533c:	230c      	movs	r3, #12
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	e7ee      	b.n	8005320 <__sfp+0x60>
 8005342:	bf00      	nop
 8005344:	08005868 	.word	0x08005868
 8005348:	ffff0001 	.word	0xffff0001

0800534c <_fwalk_reent>:
 800534c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005350:	4606      	mov	r6, r0
 8005352:	4688      	mov	r8, r1
 8005354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005358:	2700      	movs	r7, #0
 800535a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800535e:	f1b9 0901 	subs.w	r9, r9, #1
 8005362:	d505      	bpl.n	8005370 <_fwalk_reent+0x24>
 8005364:	6824      	ldr	r4, [r4, #0]
 8005366:	2c00      	cmp	r4, #0
 8005368:	d1f7      	bne.n	800535a <_fwalk_reent+0xe>
 800536a:	4638      	mov	r0, r7
 800536c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005370:	89ab      	ldrh	r3, [r5, #12]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d907      	bls.n	8005386 <_fwalk_reent+0x3a>
 8005376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800537a:	3301      	adds	r3, #1
 800537c:	d003      	beq.n	8005386 <_fwalk_reent+0x3a>
 800537e:	4629      	mov	r1, r5
 8005380:	4630      	mov	r0, r6
 8005382:	47c0      	blx	r8
 8005384:	4307      	orrs	r7, r0
 8005386:	3568      	adds	r5, #104	; 0x68
 8005388:	e7e9      	b.n	800535e <_fwalk_reent+0x12>

0800538a <__retarget_lock_init_recursive>:
 800538a:	4770      	bx	lr

0800538c <__retarget_lock_acquire_recursive>:
 800538c:	4770      	bx	lr

0800538e <__retarget_lock_release_recursive>:
 800538e:	4770      	bx	lr

08005390 <__swhatbuf_r>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	460e      	mov	r6, r1
 8005394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005398:	2900      	cmp	r1, #0
 800539a:	b096      	sub	sp, #88	; 0x58
 800539c:	4614      	mov	r4, r2
 800539e:	461d      	mov	r5, r3
 80053a0:	da08      	bge.n	80053b4 <__swhatbuf_r+0x24>
 80053a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	602a      	str	r2, [r5, #0]
 80053aa:	061a      	lsls	r2, r3, #24
 80053ac:	d410      	bmi.n	80053d0 <__swhatbuf_r+0x40>
 80053ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053b2:	e00e      	b.n	80053d2 <__swhatbuf_r+0x42>
 80053b4:	466a      	mov	r2, sp
 80053b6:	f000 f9a7 	bl	8005708 <_fstat_r>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	dbf1      	blt.n	80053a2 <__swhatbuf_r+0x12>
 80053be:	9a01      	ldr	r2, [sp, #4]
 80053c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053c8:	425a      	negs	r2, r3
 80053ca:	415a      	adcs	r2, r3
 80053cc:	602a      	str	r2, [r5, #0]
 80053ce:	e7ee      	b.n	80053ae <__swhatbuf_r+0x1e>
 80053d0:	2340      	movs	r3, #64	; 0x40
 80053d2:	2000      	movs	r0, #0
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	b016      	add	sp, #88	; 0x58
 80053d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080053dc <__smakebuf_r>:
 80053dc:	898b      	ldrh	r3, [r1, #12]
 80053de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053e0:	079d      	lsls	r5, r3, #30
 80053e2:	4606      	mov	r6, r0
 80053e4:	460c      	mov	r4, r1
 80053e6:	d507      	bpl.n	80053f8 <__smakebuf_r+0x1c>
 80053e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053ec:	6023      	str	r3, [r4, #0]
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	2301      	movs	r3, #1
 80053f2:	6163      	str	r3, [r4, #20]
 80053f4:	b002      	add	sp, #8
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	ab01      	add	r3, sp, #4
 80053fa:	466a      	mov	r2, sp
 80053fc:	f7ff ffc8 	bl	8005390 <__swhatbuf_r>
 8005400:	9900      	ldr	r1, [sp, #0]
 8005402:	4605      	mov	r5, r0
 8005404:	4630      	mov	r0, r6
 8005406:	f000 f895 	bl	8005534 <_malloc_r>
 800540a:	b948      	cbnz	r0, 8005420 <__smakebuf_r+0x44>
 800540c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005410:	059a      	lsls	r2, r3, #22
 8005412:	d4ef      	bmi.n	80053f4 <__smakebuf_r+0x18>
 8005414:	f023 0303 	bic.w	r3, r3, #3
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	e7e3      	b.n	80053e8 <__smakebuf_r+0xc>
 8005420:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <__smakebuf_r+0x7c>)
 8005422:	62b3      	str	r3, [r6, #40]	; 0x28
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	6020      	str	r0, [r4, #0]
 8005428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542c:	81a3      	strh	r3, [r4, #12]
 800542e:	9b00      	ldr	r3, [sp, #0]
 8005430:	6163      	str	r3, [r4, #20]
 8005432:	9b01      	ldr	r3, [sp, #4]
 8005434:	6120      	str	r0, [r4, #16]
 8005436:	b15b      	cbz	r3, 8005450 <__smakebuf_r+0x74>
 8005438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800543c:	4630      	mov	r0, r6
 800543e:	f000 f975 	bl	800572c <_isatty_r>
 8005442:	b128      	cbz	r0, 8005450 <__smakebuf_r+0x74>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	81a3      	strh	r3, [r4, #12]
 8005450:	89a0      	ldrh	r0, [r4, #12]
 8005452:	4305      	orrs	r5, r0
 8005454:	81a5      	strh	r5, [r4, #12]
 8005456:	e7cd      	b.n	80053f4 <__smakebuf_r+0x18>
 8005458:	080051e9 	.word	0x080051e9

0800545c <_free_r>:
 800545c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800545e:	2900      	cmp	r1, #0
 8005460:	d044      	beq.n	80054ec <_free_r+0x90>
 8005462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005466:	9001      	str	r0, [sp, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	f1a1 0404 	sub.w	r4, r1, #4
 800546e:	bfb8      	it	lt
 8005470:	18e4      	addlt	r4, r4, r3
 8005472:	f000 f97d 	bl	8005770 <__malloc_lock>
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <_free_r+0x94>)
 8005478:	9801      	ldr	r0, [sp, #4]
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	b933      	cbnz	r3, 800548c <_free_r+0x30>
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	6014      	str	r4, [r2, #0]
 8005482:	b003      	add	sp, #12
 8005484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005488:	f000 b978 	b.w	800577c <__malloc_unlock>
 800548c:	42a3      	cmp	r3, r4
 800548e:	d908      	bls.n	80054a2 <_free_r+0x46>
 8005490:	6825      	ldr	r5, [r4, #0]
 8005492:	1961      	adds	r1, r4, r5
 8005494:	428b      	cmp	r3, r1
 8005496:	bf01      	itttt	eq
 8005498:	6819      	ldreq	r1, [r3, #0]
 800549a:	685b      	ldreq	r3, [r3, #4]
 800549c:	1949      	addeq	r1, r1, r5
 800549e:	6021      	streq	r1, [r4, #0]
 80054a0:	e7ed      	b.n	800547e <_free_r+0x22>
 80054a2:	461a      	mov	r2, r3
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	b10b      	cbz	r3, 80054ac <_free_r+0x50>
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	d9fa      	bls.n	80054a2 <_free_r+0x46>
 80054ac:	6811      	ldr	r1, [r2, #0]
 80054ae:	1855      	adds	r5, r2, r1
 80054b0:	42a5      	cmp	r5, r4
 80054b2:	d10b      	bne.n	80054cc <_free_r+0x70>
 80054b4:	6824      	ldr	r4, [r4, #0]
 80054b6:	4421      	add	r1, r4
 80054b8:	1854      	adds	r4, r2, r1
 80054ba:	42a3      	cmp	r3, r4
 80054bc:	6011      	str	r1, [r2, #0]
 80054be:	d1e0      	bne.n	8005482 <_free_r+0x26>
 80054c0:	681c      	ldr	r4, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	6053      	str	r3, [r2, #4]
 80054c6:	4421      	add	r1, r4
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	e7da      	b.n	8005482 <_free_r+0x26>
 80054cc:	d902      	bls.n	80054d4 <_free_r+0x78>
 80054ce:	230c      	movs	r3, #12
 80054d0:	6003      	str	r3, [r0, #0]
 80054d2:	e7d6      	b.n	8005482 <_free_r+0x26>
 80054d4:	6825      	ldr	r5, [r4, #0]
 80054d6:	1961      	adds	r1, r4, r5
 80054d8:	428b      	cmp	r3, r1
 80054da:	bf04      	itt	eq
 80054dc:	6819      	ldreq	r1, [r3, #0]
 80054de:	685b      	ldreq	r3, [r3, #4]
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	bf04      	itt	eq
 80054e4:	1949      	addeq	r1, r1, r5
 80054e6:	6021      	streq	r1, [r4, #0]
 80054e8:	6054      	str	r4, [r2, #4]
 80054ea:	e7ca      	b.n	8005482 <_free_r+0x26>
 80054ec:	b003      	add	sp, #12
 80054ee:	bd30      	pop	{r4, r5, pc}
 80054f0:	200001f0 	.word	0x200001f0

080054f4 <sbrk_aligned>:
 80054f4:	b570      	push	{r4, r5, r6, lr}
 80054f6:	4e0e      	ldr	r6, [pc, #56]	; (8005530 <sbrk_aligned+0x3c>)
 80054f8:	460c      	mov	r4, r1
 80054fa:	6831      	ldr	r1, [r6, #0]
 80054fc:	4605      	mov	r5, r0
 80054fe:	b911      	cbnz	r1, 8005506 <sbrk_aligned+0x12>
 8005500:	f000 f88c 	bl	800561c <_sbrk_r>
 8005504:	6030      	str	r0, [r6, #0]
 8005506:	4621      	mov	r1, r4
 8005508:	4628      	mov	r0, r5
 800550a:	f000 f887 	bl	800561c <_sbrk_r>
 800550e:	1c43      	adds	r3, r0, #1
 8005510:	d00a      	beq.n	8005528 <sbrk_aligned+0x34>
 8005512:	1cc4      	adds	r4, r0, #3
 8005514:	f024 0403 	bic.w	r4, r4, #3
 8005518:	42a0      	cmp	r0, r4
 800551a:	d007      	beq.n	800552c <sbrk_aligned+0x38>
 800551c:	1a21      	subs	r1, r4, r0
 800551e:	4628      	mov	r0, r5
 8005520:	f000 f87c 	bl	800561c <_sbrk_r>
 8005524:	3001      	adds	r0, #1
 8005526:	d101      	bne.n	800552c <sbrk_aligned+0x38>
 8005528:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800552c:	4620      	mov	r0, r4
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	200001f4 	.word	0x200001f4

08005534 <_malloc_r>:
 8005534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005538:	1ccd      	adds	r5, r1, #3
 800553a:	f025 0503 	bic.w	r5, r5, #3
 800553e:	3508      	adds	r5, #8
 8005540:	2d0c      	cmp	r5, #12
 8005542:	bf38      	it	cc
 8005544:	250c      	movcc	r5, #12
 8005546:	2d00      	cmp	r5, #0
 8005548:	4607      	mov	r7, r0
 800554a:	db01      	blt.n	8005550 <_malloc_r+0x1c>
 800554c:	42a9      	cmp	r1, r5
 800554e:	d905      	bls.n	800555c <_malloc_r+0x28>
 8005550:	230c      	movs	r3, #12
 8005552:	603b      	str	r3, [r7, #0]
 8005554:	2600      	movs	r6, #0
 8005556:	4630      	mov	r0, r6
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555c:	4e2e      	ldr	r6, [pc, #184]	; (8005618 <_malloc_r+0xe4>)
 800555e:	f000 f907 	bl	8005770 <__malloc_lock>
 8005562:	6833      	ldr	r3, [r6, #0]
 8005564:	461c      	mov	r4, r3
 8005566:	bb34      	cbnz	r4, 80055b6 <_malloc_r+0x82>
 8005568:	4629      	mov	r1, r5
 800556a:	4638      	mov	r0, r7
 800556c:	f7ff ffc2 	bl	80054f4 <sbrk_aligned>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	4604      	mov	r4, r0
 8005574:	d14d      	bne.n	8005612 <_malloc_r+0xde>
 8005576:	6834      	ldr	r4, [r6, #0]
 8005578:	4626      	mov	r6, r4
 800557a:	2e00      	cmp	r6, #0
 800557c:	d140      	bne.n	8005600 <_malloc_r+0xcc>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	4631      	mov	r1, r6
 8005582:	4638      	mov	r0, r7
 8005584:	eb04 0803 	add.w	r8, r4, r3
 8005588:	f000 f848 	bl	800561c <_sbrk_r>
 800558c:	4580      	cmp	r8, r0
 800558e:	d13a      	bne.n	8005606 <_malloc_r+0xd2>
 8005590:	6821      	ldr	r1, [r4, #0]
 8005592:	3503      	adds	r5, #3
 8005594:	1a6d      	subs	r5, r5, r1
 8005596:	f025 0503 	bic.w	r5, r5, #3
 800559a:	3508      	adds	r5, #8
 800559c:	2d0c      	cmp	r5, #12
 800559e:	bf38      	it	cc
 80055a0:	250c      	movcc	r5, #12
 80055a2:	4629      	mov	r1, r5
 80055a4:	4638      	mov	r0, r7
 80055a6:	f7ff ffa5 	bl	80054f4 <sbrk_aligned>
 80055aa:	3001      	adds	r0, #1
 80055ac:	d02b      	beq.n	8005606 <_malloc_r+0xd2>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	442b      	add	r3, r5
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	e00e      	b.n	80055d4 <_malloc_r+0xa0>
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	1b52      	subs	r2, r2, r5
 80055ba:	d41e      	bmi.n	80055fa <_malloc_r+0xc6>
 80055bc:	2a0b      	cmp	r2, #11
 80055be:	d916      	bls.n	80055ee <_malloc_r+0xba>
 80055c0:	1961      	adds	r1, r4, r5
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	6025      	str	r5, [r4, #0]
 80055c6:	bf18      	it	ne
 80055c8:	6059      	strne	r1, [r3, #4]
 80055ca:	6863      	ldr	r3, [r4, #4]
 80055cc:	bf08      	it	eq
 80055ce:	6031      	streq	r1, [r6, #0]
 80055d0:	5162      	str	r2, [r4, r5]
 80055d2:	604b      	str	r3, [r1, #4]
 80055d4:	4638      	mov	r0, r7
 80055d6:	f104 060b 	add.w	r6, r4, #11
 80055da:	f000 f8cf 	bl	800577c <__malloc_unlock>
 80055de:	f026 0607 	bic.w	r6, r6, #7
 80055e2:	1d23      	adds	r3, r4, #4
 80055e4:	1af2      	subs	r2, r6, r3
 80055e6:	d0b6      	beq.n	8005556 <_malloc_r+0x22>
 80055e8:	1b9b      	subs	r3, r3, r6
 80055ea:	50a3      	str	r3, [r4, r2]
 80055ec:	e7b3      	b.n	8005556 <_malloc_r+0x22>
 80055ee:	6862      	ldr	r2, [r4, #4]
 80055f0:	42a3      	cmp	r3, r4
 80055f2:	bf0c      	ite	eq
 80055f4:	6032      	streq	r2, [r6, #0]
 80055f6:	605a      	strne	r2, [r3, #4]
 80055f8:	e7ec      	b.n	80055d4 <_malloc_r+0xa0>
 80055fa:	4623      	mov	r3, r4
 80055fc:	6864      	ldr	r4, [r4, #4]
 80055fe:	e7b2      	b.n	8005566 <_malloc_r+0x32>
 8005600:	4634      	mov	r4, r6
 8005602:	6876      	ldr	r6, [r6, #4]
 8005604:	e7b9      	b.n	800557a <_malloc_r+0x46>
 8005606:	230c      	movs	r3, #12
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4638      	mov	r0, r7
 800560c:	f000 f8b6 	bl	800577c <__malloc_unlock>
 8005610:	e7a1      	b.n	8005556 <_malloc_r+0x22>
 8005612:	6025      	str	r5, [r4, #0]
 8005614:	e7de      	b.n	80055d4 <_malloc_r+0xa0>
 8005616:	bf00      	nop
 8005618:	200001f0 	.word	0x200001f0

0800561c <_sbrk_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d06      	ldr	r5, [pc, #24]	; (8005638 <_sbrk_r+0x1c>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fb fcde 	bl	8000fe8 <_sbrk>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_sbrk_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_sbrk_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	200001f8 	.word	0x200001f8

0800563c <__sread>:
 800563c:	b510      	push	{r4, lr}
 800563e:	460c      	mov	r4, r1
 8005640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005644:	f000 f8a0 	bl	8005788 <_read_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	bfab      	itete	ge
 800564c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800564e:	89a3      	ldrhlt	r3, [r4, #12]
 8005650:	181b      	addge	r3, r3, r0
 8005652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005656:	bfac      	ite	ge
 8005658:	6563      	strge	r3, [r4, #84]	; 0x54
 800565a:	81a3      	strhlt	r3, [r4, #12]
 800565c:	bd10      	pop	{r4, pc}

0800565e <__swrite>:
 800565e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005662:	461f      	mov	r7, r3
 8005664:	898b      	ldrh	r3, [r1, #12]
 8005666:	05db      	lsls	r3, r3, #23
 8005668:	4605      	mov	r5, r0
 800566a:	460c      	mov	r4, r1
 800566c:	4616      	mov	r6, r2
 800566e:	d505      	bpl.n	800567c <__swrite+0x1e>
 8005670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005674:	2302      	movs	r3, #2
 8005676:	2200      	movs	r2, #0
 8005678:	f000 f868 	bl	800574c <_lseek_r>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	4632      	mov	r2, r6
 800568a:	463b      	mov	r3, r7
 800568c:	4628      	mov	r0, r5
 800568e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005692:	f000 b817 	b.w	80056c4 <_write_r>

08005696 <__sseek>:
 8005696:	b510      	push	{r4, lr}
 8005698:	460c      	mov	r4, r1
 800569a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800569e:	f000 f855 	bl	800574c <_lseek_r>
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	bf15      	itete	ne
 80056a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80056aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056b2:	81a3      	strheq	r3, [r4, #12]
 80056b4:	bf18      	it	ne
 80056b6:	81a3      	strhne	r3, [r4, #12]
 80056b8:	bd10      	pop	{r4, pc}

080056ba <__sclose>:
 80056ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056be:	f000 b813 	b.w	80056e8 <_close_r>
	...

080056c4 <_write_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4d07      	ldr	r5, [pc, #28]	; (80056e4 <_write_r+0x20>)
 80056c8:	4604      	mov	r4, r0
 80056ca:	4608      	mov	r0, r1
 80056cc:	4611      	mov	r1, r2
 80056ce:	2200      	movs	r2, #0
 80056d0:	602a      	str	r2, [r5, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f7fb fc3e 	bl	8000f54 <_write>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_write_r+0x1e>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_write_r+0x1e>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	200001f8 	.word	0x200001f8

080056e8 <_close_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d06      	ldr	r5, [pc, #24]	; (8005704 <_close_r+0x1c>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fb fc44 	bl	8000f80 <_close>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_close_r+0x1a>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_close_r+0x1a>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	200001f8 	.word	0x200001f8

08005708 <_fstat_r>:
 8005708:	b538      	push	{r3, r4, r5, lr}
 800570a:	4d07      	ldr	r5, [pc, #28]	; (8005728 <_fstat_r+0x20>)
 800570c:	2300      	movs	r3, #0
 800570e:	4604      	mov	r4, r0
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	f7fb fc3f 	bl	8000f98 <_fstat>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	d102      	bne.n	8005724 <_fstat_r+0x1c>
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	b103      	cbz	r3, 8005724 <_fstat_r+0x1c>
 8005722:	6023      	str	r3, [r4, #0]
 8005724:	bd38      	pop	{r3, r4, r5, pc}
 8005726:	bf00      	nop
 8005728:	200001f8 	.word	0x200001f8

0800572c <_isatty_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4d06      	ldr	r5, [pc, #24]	; (8005748 <_isatty_r+0x1c>)
 8005730:	2300      	movs	r3, #0
 8005732:	4604      	mov	r4, r0
 8005734:	4608      	mov	r0, r1
 8005736:	602b      	str	r3, [r5, #0]
 8005738:	f7fb fc3e 	bl	8000fb8 <_isatty>
 800573c:	1c43      	adds	r3, r0, #1
 800573e:	d102      	bne.n	8005746 <_isatty_r+0x1a>
 8005740:	682b      	ldr	r3, [r5, #0]
 8005742:	b103      	cbz	r3, 8005746 <_isatty_r+0x1a>
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	200001f8 	.word	0x200001f8

0800574c <_lseek_r>:
 800574c:	b538      	push	{r3, r4, r5, lr}
 800574e:	4d07      	ldr	r5, [pc, #28]	; (800576c <_lseek_r+0x20>)
 8005750:	4604      	mov	r4, r0
 8005752:	4608      	mov	r0, r1
 8005754:	4611      	mov	r1, r2
 8005756:	2200      	movs	r2, #0
 8005758:	602a      	str	r2, [r5, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f7fb fc37 	bl	8000fce <_lseek>
 8005760:	1c43      	adds	r3, r0, #1
 8005762:	d102      	bne.n	800576a <_lseek_r+0x1e>
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	b103      	cbz	r3, 800576a <_lseek_r+0x1e>
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	bd38      	pop	{r3, r4, r5, pc}
 800576c:	200001f8 	.word	0x200001f8

08005770 <__malloc_lock>:
 8005770:	4801      	ldr	r0, [pc, #4]	; (8005778 <__malloc_lock+0x8>)
 8005772:	f7ff be0b 	b.w	800538c <__retarget_lock_acquire_recursive>
 8005776:	bf00      	nop
 8005778:	200001ec 	.word	0x200001ec

0800577c <__malloc_unlock>:
 800577c:	4801      	ldr	r0, [pc, #4]	; (8005784 <__malloc_unlock+0x8>)
 800577e:	f7ff be06 	b.w	800538e <__retarget_lock_release_recursive>
 8005782:	bf00      	nop
 8005784:	200001ec 	.word	0x200001ec

08005788 <_read_r>:
 8005788:	b538      	push	{r3, r4, r5, lr}
 800578a:	4d07      	ldr	r5, [pc, #28]	; (80057a8 <_read_r+0x20>)
 800578c:	4604      	mov	r4, r0
 800578e:	4608      	mov	r0, r1
 8005790:	4611      	mov	r1, r2
 8005792:	2200      	movs	r2, #0
 8005794:	602a      	str	r2, [r5, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	f7fb fbbe 	bl	8000f18 <_read>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_read_r+0x1e>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_read_r+0x1e>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	200001f8 	.word	0x200001f8

080057ac <_init>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr

080057b8 <_fini>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr
